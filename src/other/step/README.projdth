*************************************************

NOTE:  this tarball is the scl3-2_cygwin.tar.bz2
tarball described below, with the change of binary
names for cygwin in the makefiles removed and this 
file inserted.  
The text below is the text form of the contents of:

http://www.statik.tu-cottbus.de/fileadmin/project_dth/scl/

as retreived Mar. 7, 2009

*************************************************


NIST STEP Class Library (SCL)

    * What is SCL?
    * Platform issues
    * Installation
    * Testing and using SCL

What is SCL?

SCL is basically a toolbox to build interfaces between 
application programs and STEP data repositories. The 
latter can be STEP physical files (SPF as defined by 
ISO 10303-21) or object-oriented database systems, of 
which two products are supported by SCL.

SCL was written by NIST for the U.S. government and is 
therefore not subject to copyright. You may study it, 
modify it, redistribute it, create free or non-free 
software with it. For more information about SCL and in 
order to get its original distribution, please refer to 
the official SCL site at NIST:
http://www.mel.nist.gov/msidstaff/sauder/SCL.htm.

WSTEP, a free SCL port to Windows is available at
http://www.bauv.unibw-muenchen.de/~bauv1/download/WStep/
(ported by Stefan Schwarz).
Platform issues

The original SCL source distribution cannot be cleanly 
un-archived on case-insensitive file systems like Windows' 
NTFS because of a name conflict. Here is a source archive 
with the conflicting file renamed:
scl3-2.tar.bz2.
Tar.bz2 archives can be unpacked with bzip2 and tar or 
with the Windows program 7-Zip.

SCL is mainly written in C++, but it also contains C 
sources, lex and yacc sources (compatible to flex and 
bison) and csh and sh scripts. The C++ sources, written 
in the 1990s, are not fully compliant to ANSI/ISO C++. 
Here is a patch that updates base parts of SCL to 
ANSI/ISO C++ (only the SPF interface, not the complete 
database system interfaces or the dataprobe GUI). 
The patch also addresses some problems with newer 
UNIX-like systems:
scl3-2_isocpp.diff

There are furthermore some issues with the configure 
script and some makefiles which are addressed by the 
following patch. This patch also adds a macro that is at 
least required for gcc:
scl3-2_build.diff

These patches were tested with gcc 3.3 under Linux, Mac 
OS X, as well as Windows with Cygwin. Cygwin is a UNIX-like 
environment for Windows with complete GNU toolchain. Some 
further modifications are necessary to build SCL under 
Cygwin:
scl3-2_build_cygwin.diff

A source archive with the three patches already applied 
is provided here for your convenience:
scl3-2_cygwin.tar.bz2.

Remaing problem: The p21 file scanner of SCL currently 
does not allow for comments within the parameter list of 
data records. Only comments outside of data records are 
accepted.

    DISCLAIMER: Use at your own risk.
    The patches are incomplete, may be incorrect, and are 
    not endorsed by NIST.

Installation

Install Linux, or Cygwin on Windows, or Fink on Mac OS X. 
In either case you need the packages gcc-core, gcc-g++, 
binutils, make, bison, yacc, sed, tcsh, tar, bzip2.

Under Linux or Mac OS X, unpack scl3-2.tar.bz2. Apply the 
first two patches:

    tar xfj ~/scl3-2.tar.bz2
    cd scl3-2
    patch -p1 < ~/scl3-2_isocpp.diff
    patch -p1 < ~/scl3-2_build.diff

Under Windows + Cygwin, unpack scl3-2_cygwin.tar.bz2, do 
not apply patches:

    tar xfj ~/scl3-2_cygwin.tar.bz2
    cd scl3-2

Build fedex, fedex_plus, exppp, mkProbe and a simple demo 
called p21read with the command

    ./configure --with-arch=local

This takes less than 2 minutes on a 1.6 GHz PC. The results 
are installed under "scl3-2/local/". Add the following 
lines to ~/.bashrc:

    MANPATH="${MANPATH}:~/scl3-2/man"
    PATH="${PATH}:~/scl3-2/local/bin"

(Note: Instead of "local", you should use a more descriptive 
name like "arch-cygwin" in the configure command and PATH 
variable if you build for multiple architectures on the same 
filesystem.)

Testing and using SCL

In order to build the Class Library and p21read for another 
EXPRESS schema like IFC 2x2, use the following command. (
Note: You need a syntactically corrected version of the 
schema: ifc2x2a1.exp.)

    mkProbe -i -p ~/ifc2x2a1.exp ifc2x2

mkProbe builds and installs the library and p21read under 
"scl3-2/local/Probes/ifc2x2/". This takes about 2 minutes on 
a 1.6 GHz PC with Linux but 12 minutes on a 2.8 GHz PC with 
Windows + Cygwin. The resulting executable is 5...20 MB big, 
depending on the platform and whether you strip debug symbols 
off of it. If you want to build only the library, not p21read, 
omit -p from the mkProbe call.

Test p21read with some IFC data:

    ~/scl3-2/local/Probes/ifc2x2/p21read_ifc2x2 in.ifc out.ifc

assumed you provide an existing file "in.ifc". P21read simply 
reads the file in.ifc, checks it, and writes its content back 
into out.ifc.

Besides p21read, SCL comes with some other tiny demonstrators 
which are built by the above configure command and installed 
beneath "local/testbuild/": The demo tstatic creates instances 
of entities in a compiled example EXPRESS schema, populates 
their attributes, and prints them like they would appear in a 
STEP file. The demo treg looks for all entities (classes) 
contained in a compiled EXPRESS schema, creates an instance of 
each entity with random attribute data, and creates a STEP file 
of them. The demo tio reads objects from a STEP file, then reads 
this file again and appends the objects to the existing model, 
and writes the doubled model out to a STEP file.

While the demo tstatic works only with the provided example 
schema, the demos p21read, treg, and tio work with any EXPRESS 
schema you build a STEP Class Library for. Tstatic uses early 
bound access functions, while the other demos use only late 
bound access functions.

Stefan Richter, LS Statik & Dynamik
created 09 Jan 2005, updated 01 Mar 2006
