#ifndef SCLPREFIXES_H
#define	SCLPREFIXES_H

/* DAS
   What I had in mind here is that there could be a different prefix or 
   namespace for some types (like the ones defined in CORBA or some other 
   software package). e.g. the Boolean and Logical enums are problematic 
   with various other software packages. They will be defined by the IDL 
   generated C++. In that case they should not be defined in SCL. In either
   case their SCL uses are always prefixed with macros defined in this file
   to help adapt the code as necessary.
*/

/* **********************
If you define NO_BOOLS_LOGS when you build the SCL then SCL will not define
Bool or Logical C++ enums. You will need to:
 1. Define Bool and Logical yourself somewhere and #include the name of the 
    header file that defines them in a corbaIncludes.h that can be seen by 
    SCL Makefiles (currently found in sdaiOrbix/corbaIncludes.h)
 2. Define SCLBOOL, SCLBOOL_H, SCLLOG, and SCLLOG_H to match their non-SCL
    name space or name prefix.

If you have NO_BOOLS_LOGS turned off (the default) when building SCL
then the definitions for Bool and Logical will be defined in SCL in 
clstepcore/sdaiEnum.h 

You should use the parameterized macro definition of SCLBOOL or SCLLOG below 
when using Bool or Logical.

The macro SCLP23_NAME is used in header files and for constructor/destructor
class function names in corresponding .cc files.

The macro SCLP23 is used everywhere else.
********************* */

// P stands for Part (yeah, it's just to make it short & unique - hopefully)
// as in Part 23 or Part 26.

// The namespace is specified to be SDAI by Part 26 and Part 23
#define P23_NAMESPACE SDAI
// I am defining the name prefix (or it could be a namespace eventually) 
// to be P23 instead of SDAI since I am currently using SCL to implement 
// Part 26.   DAS
//#define P23_NAMESPACE P23

 // Whenever you have something like P23_NAMESPACE##_name the preprocessor 
 // does the concatenation first then substitutes things. Thus you get 
 // P23_NAMESPACE_name instead of <whatever P23_NAMESPACE is>_name. If you
 // call P23_NAMESPACE_F() like P23_NAMESPACE_F(_name) you get 
 // whatever P23_NAMESPACE is>_name like you want. The user never has to
 // use this macro. It is used in the definition of macros the user uses like
 // SCLP23() and SCLP23_NAME().
 #define P23_NAMESPACE_F(x) SDAI##x
// #define P23_NAMESPACE_F(x) P23##x

 // Define the namespace that contains the Bool and Logical enum definitions.
 // NO_BOOLS_LOGS is used to turn off the SCL definitions of Bool and Logical
// SCLBOOL_H and SCLLOG_H are used in the sdaiEnum.h header file where
// the C++ enums Bool and Logical are used.
 #ifndef NO_BOOLS_LOGS
   // Unless otherwise necessary, if not defined by IDL generated code use the
   // SCL namespace definitions.
   #define BOOL_LOG_NAMESPACE P23_NAMESPACE
   #define BOOL_LOG_NAMESPACE_F(x) P23_NAMESPACE_F(x)
 #else 
   // if you turn the definitions off you need to define how they are used.
   #define BOOL_LOG_NAMESPACE 
   #define BOOL_LOG_NAMESPACE_F(x) x
 #endif

// Use one of these 2 sets of 2 defines when Bool and Logical are not 
// defined in a namespace. (first set: no name prefix, 
// second set: w/name prefix)
//#define SCLBOOL_H(x) x
//#define SCLLOG_H(x) x
//#define SCLBOOL_H(x) P23_NAMESPACE##x
//#define SCLLOG_H(x) P23_NAMESPACE##x

// Use these 2 defines when Bool and Logical are defined in an SCL namespace.
#define SCLBOOL_H(x) x
#define SCLLOG_H(x) x
// Use these 2 defines when Bool and Logical are defined in a non-SCL namespace
//#define SCLBOOL_H(x) <non-SCL namespace>::##x
//#define SCLLOG_H(x) <non-SCL namespace>::##x

// Use SCLBOOL and SCLLOG in all other files where the C++ enums Bool and 
// Logical are used.

// Use one of these 2 sets of 2 defines when Bool and Logical are not 
// defined in a namespace. (first set: no name prefix, 
// second set: w/name prefix)
//#define SCLBOOL(x) x
//#define SCLLOG(x) x
//#define SCLBOOL(x) P23_NAMESPACE##x
//#define SCLLOG(x) P23_NAMESPACE##x

// Use these 2 defines when Bool and Logical are defined in an SCL namespace.
#define SCLBOOL(x) P23_NAMESPACE::##x
#define SCLLOG(x) P23_NAMESPACE::##x
// Use these 2 defines when Bool and Logical are defined in a non-SCL namespace
//#define SCLBOOL(x) <non-SCL namespace>::##x
//#define SCLLOG(x) <non-SCL namespace>::##x


// SCLP23_NAME is used in header files and for constructor/destructor
// class function names in corresponding .cc files

// SCLP23 is used everywhere else

// Use these 2 #defines and no struct name space in SCL (namespace would
// currently be defined in Enumeration.h)
//#define SCLP23_NAME(x) P23_NAMESPACE##x
//#define SCLP23(x) P23_NAMESPACE##x
//#define SCLP23_NAME(x) x
//#define SCLP23(x) x

// or these 2 #defines and a struct name space defined to be P23_NAMESPACE 
// (SCL namespace would currently be defined in Enumeration.h)

// Use this one for object names inside the namespace.
#define SCLP23_NAME(x) x
// Use this one for the above objects when used outside the namespace.
#define SCLP23(x) P23_NAMESPACE::##x

// This one is used for places where the CORBA TIE object would be used for a
// Part 26 C++ implementation or where the Part 23 object would be used for a
// Part 23 only implementation.
#define SCLP22(x) CORBA::##x

// use SCLP23_NAME above instead of this one
//#define SCLP23_H(x) x

#endif
