configure.files_notes.txt

Read INSTALL to understand how to run configure to install: 
- SCL, 
- EXPRESS Toolkit
- Exppp Toolkit
- fedex_plus, fedex_os, fedex_idl

Here are some files we are used to (and some new ones) and "what the
deal is" with them now. Some changes that you might want to make to
them may require changes to the configure script. If so you would edit
<pdes_root>/configure.in and run autoconf on it. I checked in the
generated configure script so that we can go back to one that was
released, etc. if we want to. (I know that we could regenerate it from
the checked in configure.in file. We would still not get the same
configure though unless we are using the same version of autoconf.)

*IMPORTANT note* Below where it says "Make changes to", it means if
you want to make changes to all future generated (or copied)
versions. If you want to make a one-time-only change (exception) to a
specific generated file then you would obviously change that generated
file. The .in files that configure uses to generate files contain
variables surrounded by the '@' char (e.g. @PDES_ROOT@). To change the
values used to fill in those variables you would have to edit
configure.in and rerun autoconf to generate a new configure script.

*NIST developers note* - All the RCS directories that used to live
under arch.sun4 (pointed to by arch-sun4) now live under
arch_template/

*note* - Sometimes when you kill configure before it finishes it
deletes some files that it generated. You should be able to run
configure.status (I believe) to regenerate the files that configure
generated (see the info pages on autoconf in emacs). Some files are
copied by setup-arch (which configure generates) to make sure the
files stick around. e.g. even though src/express/mkrules gets deleted
when you kill configure prematurely src/express/mkrules.<arch> will
still be there (it was copied from src/express/mkrules by setup-arch).

<arch> used below refers to the arch directory generated by configure.
<arch> is supplied as an argument to configure using --with-arch=<arch>

mkProbe	
-------
configure generates - <arch>/bin/mkProbe and config/mkProbe.current 
Notes - config/mkProbe.current will be overwritten when configure is
run again. 
Make changes to - config/mkProbe.current.in

<arch>/make_rules
-----------------
configure generates - <arch>/make_rules
Notes - since these are all generated by the same template they will
all use the same make variables consistently.
Make changes to - arch_template/make_rules.in

src/express/mkrules
-------------------
configure generates - src/express/mkrules.<arch> and src/express/mkrules
Notes - src/express/mkrules will be overwritten next time configure is
run. The script <arch>/bin/sclbuild will copy mkrules.<arch> to
mkrules before it runs "make clean" and "make install". The
executables and lib here will be safely installed under <arch>/bin/
and <arch>/lib/ ; src/exppp/makefile and src/fedex_plus/makefile use
src/express/mkrules ; The mkrules has the <arch> dir info built into
it so that the dirs src/exppp/ and src/fedex_plus/ can find the
express library. 
Make changes to - src/express/mkrules.in

<arch>/Probes/template-schema/Makefile.personal
-----------------------------------------------
configure generates - <arch>/Probes/template-schema/Makefile.personal
Notes - 
Make changes to - arch_template/Probes/template-schema/Makefile.personal.in

<arch>/Probes/template-schema/Makefile.public
---------------------------------------------
configure generates - na
Notes - it copies arch_template/Probes/template-schema/Makefile.public to
                         <arch>/Probes/template-schema/Makefile.public
Make changes to - arch_template/Probes/template-schema/Makefile.public

<arch>/scl_cf.h
-----------------------------------------------
configure generates - <arch>/scl_cf.h
Notes - This file is #included by various source code files to deal
with compiler and os specific things. Configure provides the -D compiler
option HAVE_CONFIG_H so source code can know whether the files exists.
Make changes to - arch_template/scl_cf.h.in

<arch>/sclprefixes.h
-----------------------------------------------
configure generates - na
Notes - it copies arch_template/sclprefixes.h.OrbixOstore.h and 
                  arch_template/sclprefixes.h.noOrbixOstore.h to <arch>/ 
It then copies one of those two to <arch>/sclprefixes.h as appropriate.
Make changes to - <arch>/sclprefixes.h

<arch>/ofiles/sdaiOrbix/corbaIncludes.h
-----------------------------------------------
configure generates - <arch>/ofiles/sdaiOrbix/corbaIncludes.h
Notes - This #includes necessary Orbix generated .hh files. It is only
relevant if you have provided Orbix information when running configure.
Make changes to - arch_template/ofiles/sdaiOrbix/corbaIncludes.h.in

<arch>/bin/sclbuild
-----------------------------------------------
configure generates - <arch>/bin/sclbuild and config/sclbuild.current
Notes - This could be used to rebuild what configure built. This is
the script configure runs to build everything. config/sclbuild.current
will be overwritten when configure is run again.
Make changes to - config/sclbuild.current.in

<arch>/bin/setup-arch
-----------------------------------------------
configure generates - <arch>/bin/setup-arch and
 config/setup-arch.current 
Notes - This could be used to recreate the arch dir that configure
created (it would only fully work if configure had not been run again
since many files that would be copied would have been overwritten by
configure). This is the script configure runs to create everything. 
This has left behind more so to indicate exactly what configure did.
config/setup-arch.current will be overwritten when configure is run
again. 
Make changes to - config/setup-arch.current.in

