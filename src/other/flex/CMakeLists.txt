# Minimum required version of CMake
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
IF(COMMAND CMAKE_POLICY)
	CMAKE_POLICY(SET CMP0003 NEW)
ENDIF(COMMAND CMAKE_POLICY)

# set CMake project name
PROJECT(FLEX)

SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/CMake)
find_package(REGEX)

SET(TARGET_LIBS ${TARGET_LIBS} ${REGEX_LIBRARY})

SET(flex_SOURCES
	ccl.c
	dfa.c
	ecs.c
	scanflags.c
	gen.c
	main.c
	misc.c
	nfa.c
	sym.c
	tblcmp.c
	yylex.c
	options.c
	scanopt.c
	buf.c
	tables.c
	tables_shared.c
	filter.c
	regex.c
)
SET(flex_bootstrap_SOURCES
	scan.c   # scan.l
	parse.c  # parse.y
	skel.c   # flex.skl
)

SET(VERSION "2.5.35")

if(NOT WIN32)
	find_library(M_LIBRARY NAMES m PATHS /usr/lib /usr/local/lib)
ELSE(NOT WIN32)
	set(M_LIBRARY "")
endif(NOT WIN32)

include_directories(
	${REGEX_INCLUDE_DIR}
	${CMAKE_CURRENT_SOURCE_DIR}
	${CMAKE_CURRENT_BINARY_DIR}
	)

add_definitions(
	-DHAVE_CONFIG_H
	)

SET(STDC_HEADERS 1)
SET(M4 ${CMAKE_BINARY_DIR}/${BIN_DIR}/m4)
INCLUDE(CheckIncludeFile)
CHECK_INCLUDE_FILE(alloca.h HAVE_ALLOCA_H)
CHECK_INCLUDE_FILE(inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILE(libintl.h HAVE_LIBINTL_H)
CHECK_INCLUDE_FILE(limits.h HAVE_LIMITS_H)
CHECK_INCLUDE_FILE(malloc.h HAVE_MALLOC_H)
CHECK_INCLUDE_FILE(memory.h HAVE_MEMORY_H)
CHECK_INCLUDE_FILE(netinet/in.h HAVE_NETINET_IN_H)
CHECK_INCLUDE_FILE(pthread.h HAVE_PTHREAD_H)
CHECK_INCLUDE_FILE(stdbool.h HAVE_STDBOOL_H)
CHECK_INCLUDE_FILE(stddef.h HAVE_STDDEF_H)
CHECK_INCLUDE_FILE(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILE(stdlib.h HAVE_STDLIB_H)
CHECK_INCLUDE_FILE(string.h HAVE_STRING_H)
CHECK_INCLUDE_FILE(strings.h HAVE_STRINGS_H)
CHECK_INCLUDE_FILE(sys/stat.h HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILE(sys/types.h HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILE(sys/wait.h HAVE_SYS_WAIT_H)
CHECK_INCLUDE_FILE(unistd.h HAVE_UNISTD_H)
CHECK_INCLUDE_FILE(vfork.h HAVE_VFORK_H)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckLibraryExists)
CHECK_FUNCTION_EXISTS(alloca HAVE_ALLOCA)
CHECK_FUNCTION_EXISTS(dup2 HAVE_DUP2)
CHECK_FUNCTION_EXISTS(fork HAVE_FORK)
CHECK_FUNCTION_EXISTS(iconv HAVE_ICONV)
CHECK_FUNCTION_EXISTS(isascii HAVE_ISASCII)
CHECK_FUNCTION_EXISTS(isascii HAVE_ISASCII)
CHECK_LIBRARY_EXISTS(m cos "" HAVE_LIBM)
find_package(Threads)
IF(CMAKE_HAVE_PTHREAD_H AND CMAKE_THREAD_LIBS_INIT)
	SET(HAVE_LIBPTHREAD 1)
ENDIF(CMAKE_HAVE_PTHREAD_H AND CMAKE_THREAD_LIBS_INIT)
CHECK_FUNCTION_EXISTS(malloc HAVE_MALLOC)
CHECK_FUNCTION_EXISTS(memset HAVE_MEMSET)
CHECK_FUNCTION_EXISTS(pow HAVE_POW)
CHECK_FUNCTION_EXISTS(realloc HAVE_REALLOC)
CHECK_FUNCTION_EXISTS(regcomp HAVE_REGCOMP)
CHECK_FUNCTION_EXISTS(strchr HAVE_STRCHR)
CHECK_FUNCTION_EXISTS(strtol HAVE_STRTOL)
CHECK_FUNCTION_EXISTS(vfork HAVE_VFORK)
#CHECK_FUNCTION_EXISTS(HAVE_WORKING_FORK)
#CHECK_FUNCTION_EXISTS(HAVE_WORKING_VFORK)
CHECK_FUNCTION_EXISTS(_bool HAVE__BOOL)

configure_file(conf.in ${CMAKE_CURRENT_BINARY_DIR}/config.h)


add_executable(flex ${flex_SOURCES} ${flex_bootstrap_SOURCES})
if(M_LIBRARY)
	SET(TARGET_LIBS ${TARGET_LIBS} ${M_LIBRARY})
endif(M_LIBRARY)
target_link_libraries(flex ${TARGET_LIBS})
