/* Generated by Together */

package mil.army.arl.brlcad;

import java.rmi.*;
import java.util.Vector;

public interface BrlcadGeometry extends Remote {
    // loadGeometry(String geomInfo)
    // Loads geometry. In the BRL-CAD context we need a database file
    // and the objects to load. If we can find a way to make the details
    // opaque that would be cool.
    public boolean loadGeometry(String geomInfo) 
	throws RemoteException;

    // ====
    // Geometry Query Routines
    // ====
    // shootRay (point, direction)
    // should return an ordered sequence(Vector) of Partitions
    public Vect shootRay(Point origin, Vect dir)
	throws RemoteException;

    // getBoundingBox()
    // Returns bounding box of the top level object(s)
    public BoundingBox getBoundingBox()
	throws RemoteException;

    // getBoundingBox(String item)
    // Returns bounding box of the specified object
    public BoundingBox getBoundingBox(String item)
	throws RemoteException;

    // ====
    // Other Queries
    // ====
    // getTitle()
    // Returns the Title field in the database, if set/supported, \
    // "No Title" otherwise
    public String getTitle()
	throws RemoteException;

    // ====
    // Dynamic geometry
    // ====
    // makeHole
    // Creates a tgc hole in the geometry. Note that there is no indication
    // of the objects through which the hole goes. Will need to determine which
    // regions to subtract the hole from.
    public boolean makeHole(Point origin, Vect dir, 
			    float baseDiam, float topDiam)
	throws RemoteException;
    // FUTURE
    // shootBundle ()
    // shoots a bundle of rays and returns plates?
    // To support homogenization.
}
