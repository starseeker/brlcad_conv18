set(ALL_FLAG_TYPES C CXX SHARED_LINKER)

set(ALL_FLAG_LABELS C_LABEL CXX_LABEL SHARED_LINKER_LABEL C_COMPILER_LABEL CXX_COMPILER_LABEL)
set(C_LABEL "CFLAGS")
set(CXX_LABEL "CXXFLAGS")
set(SHARED_LINKER_LABEL "LDFLAGS")
set(C_COMPILER_LABEL "CC")
set(CXX_COMPILER_LABEL "CXX")

set(MAX_LABEL_LENGTH 0)

# Find longest label string for FLAGS
foreach(setting_label ${ALL_FLAG_LABELS})
  string(LENGTH "${${setting_label}}" CURRENT_LENGTH)
  if(${CURRENT_LENGTH} GREATER ${MAX_LABEL_LENGTH})
    set(MAX_LABEL_LENGTH ${CURRENT_LENGTH})
  endif(${CURRENT_LENGTH} GREATER ${MAX_LABEL_LENGTH})
endforeach(setting_label ${ALL_FLAG_LABELS})

# Add spaces to all lables to make their length uniform
foreach(setting_label ${ALL_FLAG_LABELS})
  string(LENGTH "${${setting_label}}" CURRENT_LENGTH)
  while(${MAX_LABEL_LENGTH} GREATER ${CURRENT_LENGTH})
    set(${setting_label} "${${setting_label}} ")
    string(LENGTH "${${setting_label}}" CURRENT_LENGTH)
  endwhile(${MAX_LABEL_LENGTH} GREATER ${CURRENT_LENGTH})
endforeach(setting_label ${ALL_FLAG_LABELS})

# Add the equals sign.
foreach(setting_label ${ALL_FLAG_LABELS})
  set(${setting_label} "${${setting_label}} =")
endforeach(setting_label ${ALL_FLAG_LABELS})

# If we're not using MSVC, go ahead and print the compilers
if(NOT MSVC)
  message("${C_COMPILER_LABEL} ${CMAKE_C_COMPILER}")
  message("${CXX_COMPILER_LABEL} ${CMAKE_CXX_COMPILER}")
endif(NOT MSVC)

list(GET ALL_FLAG_LABELS 0 LABEL_LENGTH_STR)
string(LENGTH "${LABEL_LENGTH_STR}" LABEL_LENGTH)

set(MAX_LINE_LENGTH 80)

function(print_flags flag_type flags FLAGS_MAXLINE)
  set(LINE_STR "${${flag_type}_LABEL}")
  string(REPLACE " " ";" ${flag_type}_LIST "${flags}")
  list(LENGTH ${flag_type}_LIST FLAG_CNT)
  while(${FLAG_CNT} GREATER 0)
    string(LENGTH "${LINE_STR}" LINE_LENGTH)
    if(${LINE_LENGTH} STREQUAL "0")
      while(${LINE_LENGTH} LESS ${LABEL_LENGTH})
	set(LINE_STR "${LINE_STR} ")
	string(LENGTH "${LINE_STR}" LINE_LENGTH)
      endwhile(${LINE_LENGTH} LESS ${LABEL_LENGTH})
      set(LINE_STR "${LINE_STR}   ")
    endif(${LINE_LENGTH} STREQUAL "0")
    list(GET ${flag_type}_LIST 0 NEXT_FLAG)
    string(LENGTH ${NEXT_FLAG} FLAG_LENGTH)
    math(EXPR NEW_LINE_LENGTH "${LINE_LENGTH} + ${FLAG_LENGTH} + 1")
    if(${NEW_LINE_LENGTH} LESS ${FLAGS_MAXLINE})
      set(LINE_STR "${LINE_STR} ${NEXT_FLAG}")
      list(REMOVE_AT ${flag_type}_LIST 0)
      list(LENGTH ${flag_type}_LIST FLAG_CNT)
    else(${NEW_LINE_LENGTH} LESS ${FLAGS_MAXLINE})
      message("${LINE_STR}")
      set(LINE_STR "")
    endif(${NEW_LINE_LENGTH} LESS ${FLAGS_MAXLINE})
  endwhile(${FLAG_CNT} GREATER 0)
  if(NOT "${LINE_STR}" STREQUAL "")
    message("${LINE_STR}")
  endif(NOT "${LINE_STR}" STREQUAL "")
endfunction()

if(CMAKE_CONFIGURATION_TYPES)
  message("Flags common to all build configurations:")
  foreach(flag_type ${ALL_FLAG_TYPES})
    print_flags(${flag_type} "${CMAKE_${flag_type}_FLAGS}" ${MAX_LINE_LENGTH})
  endforeach(flag_type ${ALL_FLAG_TYPES})
  message(" ")
  foreach(CFG_TYPE ${CMAKE_CONFIGURATION_TYPES})
    message("Additional Compilation flags used when building with configuration ${CFG_TYPE}:")
    string(TOUPPER "${CFG_TYPE}" CFG_TYPE_UPPER)
    foreach(flag_type ${ALL_FLAG_TYPES})
      print_flags(${flag_type} "${CMAKE_${flag_type}_FLAGS_${CFG_TYPE_UPPER}}" ${MAX_LINE_LENGTH})
    endforeach(flag_type ${ALL_FLAG_TYPES})
    message(" ")
  endforeach(CFG_TYPE ${CMAKE_CONFIGURATION_TYPES})
else(CMAKE_CONFIGURATION_TYPES)
  if(CMAKE_BUILD_TYPE)
    string(TOUPPER "${CMAKE_BUILD_TYPE}" BUILD_TYPE)
    foreach(flag_type ${ALL_FLAG_TYPES})
      print_flags(${flag_type} "${CMAKE_${flag_type}_FLAGS} ${CMAKE_${flag_type}_FLAGS_${BUILD_TYPE}}" ${MAX_LINE_LENGTH})
    endforeach(flag_type ${ALL_FLAG_TYPES})
    message(" ")
  else(CMAKE_BUILD_TYPE)
    foreach(flag_type ${ALL_FLAG_TYPES})
      print_flags(${flag_type} "${CMAKE_${flag_type}_FLAGS}" ${MAX_LINE_LENGTH})
    endforeach(flag_type ${ALL_FLAG_TYPES})
  endif(CMAKE_BUILD_TYPE)
endif(CMAKE_CONFIGURATION_TYPES)
