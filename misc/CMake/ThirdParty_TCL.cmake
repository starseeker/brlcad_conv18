# Macro for three-way options that optionally check whether a system
# resource is available.
MACRO(TCL_BUNDLE_OPTION optname default)
	IF(NOT ${optname})
		IF(default)
			SET(${optname} "${default}" CACHE STRING "Build bundled ${optname} libraries.")
		ELSE(default)
			IF(${${CMAKE_PROJECT_NAME}_TCL} STREQUAL "Bundled" OR ${${CMAKE_PROJECT_NAME}_TCL} STREQUAL "Auto (B)")
				SET(${optname} "Auto (B)" CACHE STRING "Build bundled ${optname} libraries.")
			ENDIF(${${CMAKE_PROJECT_NAME}_TCL} STREQUAL "Bundled" OR ${${CMAKE_PROJECT_NAME}_TCL} STREQUAL "Auto (B)")
			IF(${${CMAKE_PROJECT_NAME}_TCL} STREQUAL "System" OR ${${CMAKE_PROJECT_NAME}_TCL} STREQUAL "Auto (S)")
				SET(${optname} "Auto (S)" CACHE STRING "Build bundled ${optname} libraries.")
			ENDIF(${${CMAKE_PROJECT_NAME}_TCL} STREQUAL "System" OR ${${CMAKE_PROJECT_NAME}_TCL} STREQUAL "Auto (S)")
			IF(${${CMAKE_PROJECT_NAME}_BUNDLED_LIBS} STREQUAL "Auto")
				SET(${optname} "Auto" CACHE STRING "Build bundled ${optname} libraries.")
			ENDIF(${${CMAKE_PROJECT_NAME}_BUNDLED_LIBS} STREQUAL "Auto")
		ENDIF(default)
	ENDIF(NOT ${optname})
	IF(${optname} STREQUAL "Auto (B)" OR ${optname} STREQUAL "Auto (S)" OR ${optname} STREQUAL "Auto")
		IF(${${CMAKE_PROJECT_NAME}_TCL} STREQUAL "Bundled" OR ${${CMAKE_PROJECT_NAME}_TCL} STREQUAL "Auto (B)")
			SET(${optname} "Auto (B)" CACHE STRING "Build bundled ${optname} libraries." FORCE)
		ENDIF(${${CMAKE_PROJECT_NAME}_TCL} STREQUAL "Bundled" OR ${${CMAKE_PROJECT_NAME}_TCL} STREQUAL "Auto (B)")
		IF(${${CMAKE_PROJECT_NAME}_TCL} STREQUAL "System" OR ${${CMAKE_PROJECT_NAME}_TCL} STREQUAL "Auto (S)")
			SET(${optname} "Auto (S)" CACHE STRING "Build bundled ${optname} libraries." FORCE)
		ENDIF(${${CMAKE_PROJECT_NAME}_TCL} STREQUAL "System" OR ${${CMAKE_PROJECT_NAME}_TCL} STREQUAL "Auto (S)")
		IF(${${CMAKE_PROJECT_NAME}_TCL} STREQUAL "Auto")
			SET(${optname} "Auto" CACHE STRING "Build bundled ${optname} libraries." FORCE)
		ENDIF(${${CMAKE_PROJECT_NAME}_TCL} STREQUAL "Auto")
	ENDIF(${optname} STREQUAL "Auto (B)" OR ${optname} STREQUAL "Auto (S)" OR ${optname} STREQUAL "Auto")
	set_property(CACHE ${optname} PROPERTY STRINGS Auto Bundled System)
	IF(NOT ${${optname}} STREQUAL "Auto" AND NOT ${${optname}} STREQUAL "Bundled" AND NOT ${${optname}} STREQUAL "System" AND NOT ${${optname}} STREQUAL "Auto (B)" AND NOT ${${optname}} STREQUAL "Auto (S)")
		MESSAGE(WARNING "Unknown value ${${optname}} supplied for ${optname} - defaulting to Auto")
		MESSAGE(WARNING "Valid options are Auto, Bundled and System")
		SET(${optname} "Auto" CACHE STRING "Build bundled libraries." FORCE)
	ENDIF(NOT ${${optname}} STREQUAL "Auto" AND NOT ${${optname}} STREQUAL "Bundled" AND NOT ${${optname}} STREQUAL "System" AND NOT ${${optname}} STREQUAL "Auto (B)" AND NOT ${${optname}} STREQUAL "Auto (S)")
ENDMACRO()


MACRO(THIRD_PARTY_TCL_PACKAGE packagename dir wishcmd depends)
	STRING(TOUPPER ${packagename} PKGNAME_UPPER)
	# If we are doing a local Tcl build, default to bundled.
   TCL_BUNDLE_OPTION(${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER} "") 
	IF(${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER} STREQUAL "Bundled" OR ${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER} STREQUAL "Auto (B)")
		SET(${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER}_BUILD ON)
	ELSE(${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER} STREQUAL "Bundled" OR ${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER} STREQUAL "Auto (B)")
		SET(${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER}_BUILD OFF)
		# Stash the previous results (if any) so we don't repeatedly call out the tests - only report
		# if something actually changes in subsequent runs.
		SET(${PKGNAME_UPPER}_FOUND_STATUS ${${PKGNAME_UPPER}_FOUND})
		IF(NOT ${wishcmd})
			SET(${PKGNAME_UPPER}_FOUND "${PKGNAME_UPPER}-NOTFOUND" CACHE STRING "${PKGNAME_UPPER}_FOUND" FORCE)
			IF(NOT ${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER} STREQUAL "System" AND NOT ${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER} STREQUAL "Auto (S)")
				# Can't test and we're not forced to system by either local settings or the toplevel - turn it on 
				SET(${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER}_BUILD ON)
			ELSE(NOT ${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER} STREQUAL "System" AND NOT ${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER} STREQUAL "Auto (S)")
				IF("${${PKGNAME_UPPER}_FOUND_STATUS}" MATCHES "${PKGNAME_UPPER}-NOTFOUND" AND NOT ${PKGNAME_UPPER}_FOUND)
					MESSAGE(WARNING "No tclsh/wish command available for testing, but system version of ${packagename} is requested - assuming availability of package.")
				ENDIF("${${PKGNAME_UPPER}_FOUND_STATUS}" MATCHES "${PKGNAME_UPPER}-NOTFOUND" AND NOT ${PKGNAME_UPPER}_FOUND)
			ENDIF(NOT ${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER} STREQUAL "System" AND NOT ${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER} STREQUAL "Auto (S)")
		ELSE(NOT ${wishcmd})
			SET(packagefind_script "
catch {package require ${packagename}}
set packageversion NOTFOUND
set packageversion [package versions ${packagename}]
set filename \"${CMAKE_BINARY_DIR}/CMakeTmp/${PKGNAME_UPPER}_PKG_VERSION\"
set fileId [open $filename \"w\"]
puts $fileId $packageversion
close $fileId
exit
")
			SET(packagefind_scriptfile "${CMAKE_BINARY_DIR}/CMakeTmp/${packagename}_packageversion.tcl")
			FILE(WRITE ${packagefind_scriptfile} ${packagefind_script})
			EXEC_PROGRAM(${wishcmd} ARGS ${packagefind_scriptfile} OUTPUT_VARIABLE EXECOUTPUT)
			FILE(READ ${CMAKE_BINARY_DIR}/CMakeTmp/${PKGNAME_UPPER}_PKG_VERSION pkgversion)
			#Need to handle multiple returned versions - this regex is wrong, fix
			#STRING(REGEX REPLACE "([0-9]+\.?[0-9]*)" "\\1" ${pkgversion} ${pkgversion})
			STRING(REGEX REPLACE "\n" "" ${PKGNAME_UPPER}_PACKAGE_VERSION ${pkgversion})
			IF(${PKGNAME_UPPER}_PACKAGE_VERSION)
				SET(${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER}_BUILD OFF)
				SET(${PKGNAME_UPPER}_FOUND "TRUE" CACHE STRING "${PKGNAME_UPPER}_FOUND" FORCE)
			ELSE(${PKGNAME_UPPER}_PACKAGE_VERSION)
				SET(${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER}_BUILD ON)
				SET(${PKGNAME_UPPER}_FOUND "${PKGNAME_UPPER}-NOTFOUND" CACHE STRING "${PKGNAME_UPPER}_FOUND" FORCE)
			ENDIF(${PKGNAME_UPPER}_PACKAGE_VERSION)
			# Be quiet if we're doing this over
			IF("${${PKGNAME_UPPER}_FOUND_STATUS}" MATCHES "${PKGNAME_UPPER}-NOTFOUND" AND NOT ${PKGNAME_UPPER}_FOUND)
				SET(${PKGNAME_UPPER}_FIND_QUIETLY TRUE)
			ENDIF("${${PKGNAME_UPPER}_FOUND_STATUS}" MATCHES "${PKGNAME_UPPER}-NOTFOUND" AND NOT ${PKGNAME_UPPER}_FOUND)
			FIND_PACKAGE_HANDLE_STANDARD_ARGS(${PKGNAME_UPPER} DEFAULT_MSG ${PKGNAME_UPPER}_PACKAGE_VERSION)
		ENDIF(NOT ${wishcmd})
	ENDIF(${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER} STREQUAL "Bundled" OR ${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER} STREQUAL "Auto (B)")
	IF(${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER}_BUILD)
		add_subdirectory(${dir})
		FOREACH(dep ${depends})
			string(TOUPPER ${dep} DEP_UPPER)
			if(BRLCAD_BUILD_${DEP_UPPER})
				add_dependencies(${packagename} ${dep})
			endif(BRLCAD_BUILD_${DEP_UPPER})
		ENDFOREACH(dep ${depends})
		file(STRINGS ${CMAKE_CURRENT_SOURCE_DIR}/${packagename}.dist ${packagename}_ignore_files)
		DISTCHECK_IGNORE(${dir} ${packagename}_ignore_files)
	ELSE(${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER}_BUILD)
		DISTCHECK_IGNORE_ITEM(${dir})
	ENDIF(${CMAKE_PROJECT_NAME}_${PKGNAME_UPPER}_BUILD)
	MARK_AS_ADVANCED(${PKGNAME_UPPER}_FOUND)
ENDMACRO(THIRD_PARTY_TCL_PACKAGE)
