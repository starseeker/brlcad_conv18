# Apache FOP version from parent CMake build system
set(APACHE_FOP_VERSION @APACHE_FOP_VERSION@)

# fop hyphenation path (fop version >= 1.0)
# need v2 hphenation
if(APACHE_FOP_VERSION VERSION_LESS 1.0)
  #set(FOP_HYPH "@CMAKE_BINARY_DIR@/doc/docbook/resources/other/offo-old/binary/fop-hyph.jar")
else(APACHE_FOP_VERSION VERSION_LESS 1.0)
  set(FOP_HYPH "@CMAKE_BINARY_DIR@/doc/docbook/resources/other/offo/binary/fop-hyph.jar")
endif(APACHE_FOP_VERSION VERSION_LESS 1.0)

# FOP uses environment variables - set them.
set(ENV{FOP_HYPHENATION_PATH} "${FOP_HYPH}")

set(ENV{CLASSPATH} "@CMAKE_SOURCE_DIR@/doc/docbook")

# Keep FOP headless on OSX and specify the log4j config
set(ENV{FOP_OPTS} "-Djava.awt.headless=true  -Dlog4j.configuration=\"@CMAKE_SOURCE_DIR@/doc/docbook/log4j.properties\"")

# Make sure the target directory exists
get_filename_component(output_dir "@outfile@" PATH)
execute_process(COMMAND "@CMAKE_COMMAND@" -E make_directory "${output_dir}")

# Run FOP to actually generate the PDF
execute_process(COMMAND "@APACHE_FOP@" -c "@CMAKE_BINARY_DIR@/doc/docbook/fop.xconf" "@fo_outfile@" -pdf "@outfile@" RESULT_VARIABLE CMDRESULT)

# Fatal error if FOP didn't succeed, so the parent CMake build knows something went wrong and can hault.
if(CMDRESULT)
  message(FATAL_ERROR "Apache FOP build failure: ${CMDRESULT}")
endif(CMDRESULT)

