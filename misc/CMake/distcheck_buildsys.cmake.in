#     D I S T C H E C K _ B U I L D S Y S . C M A K E . I N
#
# BRL-CAD
#
# Copyright (c) 2011-2012 United States Government as represented by
# the U.S. Army Research Laboratory.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials provided
# with the distribution.
#
# 3. The name of the author may not be used to endorse or promote
# products derived from this software without specific prior written
# permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
###
# Empty elements in lists are of no interest
IF(COMMAND CMAKE_POLICY)
  CMAKE_POLICY(SET CMP0007 OLD)
ENDIF(COMMAND CMAKE_POLICY)

SET(NOT_DISTCHECK_READY 0)
SET(CMAKE_BINARY_DIR @CMAKE_BINARY_DIR@)

MACRO(UPDATE_CPACK_CONFIGS)
  INCLUDE(@CMAKE_BINARY_DIR@/CPackConfig.cmake)
  SET(CPACK_PROJECT_CONFIG_FILE "@CMAKE_BINARY_DIR@/BRLCAD_CPackOptions.cmake")
  SET(CPACK_SOURCE_INSTALLED_DIRECTORIES "@CMAKE_SOURCE_DIR@;/")
  STRING(REGEX REPLACE "\\\\" "\\\\\\\\" CPACK_SOURCE_IGNORE_FILES "${CPACK_SOURCE_IGNORE_FILES}")
  SET(CPACK_SOURCE_IGNORE_FILES "${CPACK_SOURCE_IGNORE_FILES};${CPACK_EXTRA_IGNORE_FILES}")
  LIST(REMOVE_DUPLICATES CPACK_SOURCE_IGNORE_FILES)
  INCLUDE(CPack)
ENDMACRO(UPDATE_CPACK_CONFIGS)

MACRO(SVN_INFO_TO_PATH_LIST SVN_RAW SVN_PATHLIST)
  SET(SVN_PROCESSING ${${SVN_RAW}})
  STRING(REGEX REPLACE "Name: [^\r\n]*" "\n" SVN_PROCESSING "${SVN_PROCESSING}")
  STRING(REGEX REPLACE "URL: [^\r\n]*" "\n" SVN_PROCESSING "${SVN_PROCESSING}")
  STRING(REGEX REPLACE "Repository [^\r\n]*" "\n" SVN_PROCESSING "${SVN_PROCESSING}")
  STRING(REGEX REPLACE "Text Last[^\r\n]*" "\n" SVN_PROCESSING "${SVN_PROCESSING}")
  STRING(REGEX REPLACE "Last [^\r\n]*" "\n" SVN_PROCESSING "${SVN_PROCESSING}")
  STRING(REGEX REPLACE "Checksum: [^\r\n]*" "\n" SVN_PROCESSING "${SVN_PROCESSING}")
  STRING(REGEX REPLACE "Revision: [^\r\n]*" "\n" SVN_PROCESSING "${SVN_PROCESSING}")
  STRING(REGEX REPLACE "Schedule: [^\r\n]*" "\n" SVN_PROCESSING "${SVN_PROCESSING}")
  STRING(REGEX REPLACE "Node Kind: [^\r\n]*" "\n" SVN_PROCESSING "${SVN_PROCESSING}")
  STRING(REGEX REPLACE "Path: " "" SVN_PROCESSING ${SVN_PROCESSING})
  STRING(REGEX REPLACE "@CMAKE_SOURCE_DIR@/" "" SVN_PROCESSING ${SVN_PROCESSING})
  STRING(REGEX REPLACE "@CMAKE_SOURCE_DIR@\r?\n" "\n" SVN_PROCESSING "${SVN_PROCESSING}")
  STRING(REGEX REPLACE "\n" ";" SVN_PROCESSING "${SVN_PROCESSING}")
  STRING(REGEX REPLACE "/;" ";" SVN_PROCESSING "${SVN_PROCESSING}")
  SET(${SVN_PATHLIST} ${SVN_PROCESSING})
ENDMACRO(SVN_INFO_TO_PATH_LIST)

SET(SVN_TREE_MODIFIED 0)

FIND_PROGRAM(SVN_EXEC svn)
IF(SVN_EXEC AND EXISTS @CMAKE_SOURCE_DIR@/.svn)
  MESSAGE(" --- Building file list from Subversion manifests: ...")
  SET(SVN_FILES "")
  EXECUTE_PROCESS(COMMAND ${SVN_EXEC} info -R @CMAKE_SOURCE_DIR@ OUTPUT_VARIABLE SVN_RAWOUT)
  SVN_INFO_TO_PATH_LIST(SVN_RAWOUT SVN_FILES)

  EXECUTE_PROCESS(COMMAND ${SVN_EXEC} status @CMAKE_SOURCE_DIR@ OUTPUT_VARIABLE SVN_RAWSTATUS)
  STRING(REGEX REPLACE "@CMAKE_SOURCE_DIR@/" "" SVN_RAWSTATUS "${SVN_RAWSTATUS}")
  STRING(REGEX REPLACE "\r?\n" ";" SVN_STATUS "${SVN_RAWSTATUS}")
  FOREACH(ITEM ${SVN_STATUS})
    IF(${ITEM} MATCHES "^M")
      SET(SVN_TREE_MODIFIED 1)
    ENDIF(${ITEM} MATCHES "^M")
    IF(${ITEM} MATCHES "^D")
      STRING(REGEX REPLACE "D[\\t\\ ]*" "" item_path "${ITEM}")
      LIST(REMOVE_ITEM SVN_FILES ${item_path})
    ENDIF(${ITEM} MATCHES "^D")
  ENDFOREACH(ITEM ${SVN_STATUS})
  LIST(SORT SVN_FILES)
  LIST(REMOVE_DUPLICATES SVN_FILES)
  STRING(REGEX REPLACE ";" "\n" SVN_FILES "${SVN_FILES}")
  FILE(WRITE @CMAKE_BINARY_DIR@/svn_files_list.txt "${SVN_FILES}")

  IF(SVN_TREE_MODIFIED)
    MESSAGE("\n**** NOTE:  Subversion reports modified source files present in the source tree.\n     Distcheck proceeding, but archives will not be suitable for release.\n")
    SET(NOT_DISTCHECK_READY 1)
  ENDIF(SVN_TREE_MODIFIED)

  MESSAGE(" --- Building file list from Subversion manifests: Done") 
ENDIF(SVN_EXEC AND EXISTS @CMAKE_SOURCE_DIR@/.svn)

MESSAGE(" --- Building list of files known to the build system: ...") 
FILE(STRINGS @CMAKE_BINARY_DIR@/cmakefiles.cmake BUILD_FILES)
FILE(STRINGS @CMAKE_BINARY_DIR@/cmakedirs.cmake IGNORED_DIRECTORIES)
FOREACH(ITEM ${IGNORED_DIRECTORIES})
  IF(SVN_EXEC AND EXISTS @CMAKE_SOURCE_DIR@/.svn)
    SET(IGNORED_FILES "")
    SET(SVN_RAWOUT "")
    EXECUTE_PROCESS(COMMAND ${SVN_EXEC} info -R ${ITEM} OUTPUT_VARIABLE SVN_RAWOUT)
    SVN_INFO_TO_PATH_LIST(SVN_RAWOUT IGNORED_FILES)
    LIST(APPEND BUILD_FILES ${IGNORED_FILES})
  ELSE(SVN_EXEC AND EXISTS @CMAKE_SOURCE_DIR@/.svn)
    FILE(GLOB_RECURSE IGNORED_FILES RELATIVE @CMAKE_SOURCE_DIR@ "${ITEM}/*")
    SET(IGNORED_PATHS ${IGNORED_FILES})
    WHILE(IGNORED_PATHS)
      SET(IGNORED_PATHS "${IGNORED_PATHS};")
      STRING(REGEX REPLACE "[^/]*;" ";" IGNORED_PATHS "${IGNORED_PATHS}")
      STRING(REGEX REPLACE "/;" ";" IGNORED_PATHS "${IGNORED_PATHS}")
      LIST(REMOVE_DUPLICATES IGNORED_PATHS)
      LIST(APPEND BUILD_FILES ${IGNORED_PATHS})
    ENDWHILE(IGNORED_PATHS)
    LIST(APPEND BUILD_FILES ${IGNORED_FILES})
  ENDIF(SVN_EXEC AND EXISTS @CMAKE_SOURCE_DIR@/.svn)
ENDFOREACH(ITEM ${DIR_FILES_LIST})
STRING(REGEX REPLACE "@CMAKE_SOURCE_DIR@/" "" BUILD_FILES "${BUILD_FILES}")
LIST(SORT BUILD_FILES)
LIST(REMOVE_DUPLICATES BUILD_FILES)
STRING(REGEX REPLACE ";" "\n" BUILD_FILES "${BUILD_FILES}")
FILE(WRITE @CMAKE_BINARY_DIR@/build_files_list.txt "${BUILD_FILES}")
MESSAGE(" --- Building list of files known to the build system: Done") 

SET(CPACK_IGNORE_BUILD_PATH "@CPACK_IGNORE_BUILD_PATH@")
MESSAGE(" --- Building 'ground truth' list of files actually present in source tree: ...") 
FILE(WRITE @CMAKE_BINARY_DIR@/ground_truth.txt "")
FILE(WRITE @CMAKE_BINARY_DIR@/cpack_ignore_files.txt "")
FILE(GLOB_RECURSE GROUND_TRUTH_RAW RELATIVE @CMAKE_SOURCE_DIR@ "@CMAKE_SOURCE_DIR@/*")
STRING(REGEX REPLACE ";[^;]*\\.svn[^;]*" "" GROUND_TRUTH_SCRUBBED "${GROUND_TRUTH_RAW}")
IF(CPACK_IGNORE_BUILD_PATH)
  SET(GROUND_TRUTH_SCRUBBED ";${GROUND_TRUTH_SCRUBBED}")
  STRING(REGEX REPLACE ";${CPACK_IGNORE_BUILD_PATH}[^;]*" "" GROUND_TRUTH_SCRUBBED "${GROUND_TRUTH_SCRUBBED}")
ENDIF(CPACK_IGNORE_BUILD_PATH)
STRING(REGEX REPLACE "[^/]*;" ";" GROUND_TRUTH_P1 "${GROUND_TRUTH_SCRUBBED}")
STRING(REGEX REPLACE "/;" ";" GROUND_TRUTH_P1 "${GROUND_TRUTH_P1}")
LIST(REMOVE_DUPLICATES GROUND_TRUTH_P1)
STRING(REGEX REPLACE "[^/]*;" ";" GROUND_TRUTH_P2 "${GROUND_TRUTH_P1}")
STRING(REGEX REPLACE "/;" ";" GROUND_TRUTH_P2 "${GROUND_TRUTH_P2}")
LIST(REMOVE_DUPLICATES GROUND_TRUTH_P2)
SET(GROUND_TRUTH ${GROUND_TRUTH_SCRUBBED} ${GROUND_TRUTH_P1} ${GROUND_TRUTH_P2})
IF(GROUND_TRUTH)
  LIST(REMOVE_DUPLICATES GROUND_TRUTH)
  LIST(SORT GROUND_TRUTH)
  STRING(REGEX REPLACE ";" "\n" GROUND_TRUTH "${GROUND_TRUTH}")
  FILE(WRITE @CMAKE_BINARY_DIR@/ground_truth.txt "${GROUND_TRUTH}")
ENDIF(GROUND_TRUTH)
MESSAGE(" --- Building 'ground truth' list of files actually present in source tree: Done") 

MESSAGE(" --- Performing comparisons...") 

FILE(STRINGS @CMAKE_BINARY_DIR@/build_files_list.txt BUILD_FILES)
IF(SVN_EXEC AND EXISTS @CMAKE_SOURCE_DIR@/.svn)
  FILE(STRINGS @CMAKE_BINARY_DIR@/svn_files_list.txt SVN_FILES)
ENDIF(SVN_EXEC AND EXISTS @CMAKE_SOURCE_DIR@/.svn)
FILE(STRINGS @CMAKE_BINARY_DIR@/ground_truth.txt GROUND_TRUTH)
LIST(REMOVE_DUPLICATES BUILD_FILES)

IF(SVN_EXEC AND EXISTS @CMAKE_SOURCE_DIR@/.svn)
  SET(BUILD_FILES_NOT_IN_SVN ${BUILD_FILES})
  SET(SVN_FILES_NOT_IN_BUILD ${SVN_FILES})
  list(REMOVE_ITEM BUILD_FILES_NOT_IN_SVN ${SVN_FILES})
  list(REMOVE_ITEM SVN_FILES_NOT_IN_BUILD ${BUILD_FILES})
  list(REMOVE_ITEM GROUND_TRUTH ${SVN_FILES})
ENDIF(SVN_EXEC AND EXISTS @CMAKE_SOURCE_DIR@/.svn)
list(REMOVE_ITEM GROUND_TRUTH ${BUILD_FILES})

IF(SVN_FILES_NOT_IN_BUILD)
  STRING(REGEX REPLACE ";" "\n" SVN_FILES_NOT_IN_BUILD "${SVN_FILES_NOT_IN_BUILD}")
  MESSAGE("\nFiles listed in subversion but not accounted for in build logic: \n${SVN_FILES_NOT_IN_BUILD}\n")
ENDIF(SVN_FILES_NOT_IN_BUILD)

IF(BUILD_FILES_NOT_IN_SVN)
  STRING(REGEX REPLACE ";" "\n" BUILD_FILES_NOT_IN_SVN "${BUILD_FILES_NOT_IN_SVN}")
  MESSAGE("\nFiles present in the build logic but not accounted for in Subversion: \n${BUILD_FILES_NOT_IN_SVN}\n")
ENDIF(BUILD_FILES_NOT_IN_SVN)

IF(SVN_FILES_NOT_IN_BUILD OR BUILD_FILES_NOT_IN_SVN)
  MESSAGE(FATAL_ERROR "Distcheck cannot proceed until the above errors are corrected.")
ENDIF(SVN_FILES_NOT_IN_BUILD OR BUILD_FILES_NOT_IN_SVN)

LIST(LENGTH GROUND_TRUTH IGNORE_COUNT)
IF(IGNORE_COUNT)
  STRING(REGEX REPLACE ";" "\n" CPACK_IGNORE_FILES "${GROUND_TRUTH}")
  FILE(WRITE @CMAKE_BINARY_DIR@/cpack_ignore_files.txt "${CPACK_IGNORE_FILES}")
ENDIF(IGNORE_COUNT)
IF(SVN_EXEC AND EXISTS @CMAKE_SOURCE_DIR@/.svn)
  IF(GROUND_TRUTH)
    # We're ignoring specific files, not patterns, so construct the right entry style for CPack
    # see http://www.cmake.org/pipermail/cmake/2006-October/011548.html
    SET(CPACK_EXTRA_IGNORE_FILES "^@CMAKE_SOURCE_DIR@/${GROUND_TRUTH}$")
    STRING(REGEX REPLACE ";" "$;^@CMAKE_SOURCE_DIR@/" CPACK_EXTRA_IGNORE_FILES "${CPACK_EXTRA_IGNORE_FILES}")
    STRING(REGEX REPLACE "\^@CMAKE_SOURCE_DIR@/\$" "" CPACK_EXTRA_IGNORE_FILES "${CPACK_EXTRA_IGNORE_FILES}")
    IF(${IGNORE_COUNT} LESS 51)
      STRING(REGEX REPLACE ";" "\n" GROUND_TRUTH "${GROUND_TRUTH}")
      MESSAGE("\nFiles unknown to both Subversion and the Build logic (will not be incorporated into dist):\n${GROUND_TRUTH}\n")
    ELSE(${IGNORE_COUNT} LESS 51)
      MESSAGE("\nMore than 50 files are unknown to both Subversion and the Build logic - archives will not be filtered and are not suitable for distribution.\n")
    ENDIF(${IGNORE_COUNT} LESS 51)
  ENDIF(GROUND_TRUTH)
ELSE(SVN_EXEC AND EXISTS @CMAKE_SOURCE_DIR@/.svn)
  IF(GROUND_TRUTH)
    IF(${IGNORE_COUNT} LESS 51)
      STRING(REGEX REPLACE ";" "\n" GROUND_TRUTH "${GROUND_TRUTH}")
      MESSAGE("\nFiles unknown to the Build logic:\n${GROUND_TRUTH}\n")
    ELSE(${IGNORE_COUNT} LESS 51)
      MESSAGE("\nMore than 50 files unknown to the Build logic\nSee @CMAKE_BINARY_DIR@/cpack_ignore_files.txt for the list of ignored files.\n")
    ENDIF(${IGNORE_COUNT} LESS 51)

    MESSAGE(FATAL_ERROR "Distcheck without subversion, unknown source files cannot be positivily identified as non-distribution files, haulting.\n")
  ELSE(GROUND_TRUTH)
    MESSAGE("\nWarning: Distcheck is being performed without subversion.  Temporary files and other unknown files present in directories explicitly ignored by the build logic will be incorporated into the archives by CPack.  If building archives for distribution, using a subversion checkout is recommended.\n")
  ENDIF(GROUND_TRUTH)
ENDIF(SVN_EXEC AND EXISTS @CMAKE_SOURCE_DIR@/.svn)

# If the list of files to ignore is at most 50 items in length, go ahead and update the CPack 
# logic to ignore them
IF(${IGNORE_COUNT} LESS 51)
  UPDATE_CPACK_CONFIGS()
ENDIF(${IGNORE_COUNT} LESS 51)

SET(FINAL_DIST_MESSAGE "--- distcheck succeeded ---")
IF(NOT_DISTCHECK_READY)
  SET(FINAL_DIST_MESSAGE "--- distcheck succeeded ---\n*** WARNING - archive files contain modified sources, NOT suitable for distribution! ***")
ENDIF(NOT_DISTCHECK_READY)
IF(NOT SVN_EXEC OR NOT EXISTS @CMAKE_SOURCE_DIR@/.svn)
  SET(FINAL_DIST_MESSAGE "--- distcheck succeeded ---\n*** WARNING - distcheck run without subversion based checks!  Archive files may not be suitable for distribution. ***")
ENDIF(NOT SVN_EXEC OR NOT EXISTS @CMAKE_SOURCE_DIR@/.svn)
configure_file(@CMAKE_SOURCE_DIR@/misc/CMake/distcheck_message.in @CMAKE_BINARY_DIR@/CMakeTmp/distcheck_message @ONLY) 

# If we got this far, it worked
MESSAGE("Stage 1: Passed")

# Local Variables:
# tab-width: 8
# mode: autoconf
# indent-tabs-mode: t
# End:
# ex: shiftwidth=4 tabstop=8
