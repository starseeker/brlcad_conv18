package BRLCAD_DOC;

# used for common code for BRL-CAD perl doc utilities

# output files
our $genxmlcat     = 'brlcad-xml-catalog-autogen.xml';

# special name for the fop file:
our $genfopxmlcat  = 'CatalogManager.properties';

sub print_autogen_header {
  my $fp     = shift @_;
  my $prog   = shift @_;
  my $xmlhdr = shift @_;
  if (defined $xmlhdr) {
    print $fp "<?xml version='1.0' encoding='ASCII'?>\n";
  }
  print $fp <<"HERE";
<!--
 !   This file is autogenerated by '$prog'.
 !   ALL EDITS WILL BE OVERWRITTEN WITHOUT WARNING!
 -->
HERE
} # print_autogen_header

sub strip_lines {
  # used to customize and insert data into title pages

  # removes all lines from the beginning until '<?brlcad strip-before ?>'
  # removes all lines '<?brlcad strip-after ?>' to the end

  my $aref = shift @_;
  my @arr = ();
  my $strip = 1;
  #print "debug: starting strip\n";
  foreach my $line (@{$aref}) {
    #print $line;
    if ($line =~ m{\A \s* \<\?brlcad \s+ strip\-before\s* \?\>}xms){
      #print "debug: stopping strip\n";
      $strip = 0;
    }
    elsif (!$strip && $line =~ m{\A \s* \<\?brlcad \s+ strip\-after\s* \?\>}xms) {
      #print "debug: starting strip\n";
      push @arr, $line;
      $strip = 1;
    }
    push @arr, $line if !$strip;
    #print "debug: saving: $line" if !$strip;
  }

  # now replace the old array with the new
  @{$aref} = @arr;

} # strip_lines

sub print_um_title {
  my $fp = shift @_;
#  my $top = '6.50in';
#  my $top = '5.90in';
#  my $top = '5.60in'; # with reduced scale BRL-CAD logo group
  my $top = '5.20in'; # with reduced scale BRL-CAD logo group
  print $fp <<HERE;
      <!-- USERS MANUAL ==================================== -->
      <fo:block-container text-align='center'>
         <fo:block-container
            absolute-position="absolute"
            border='$title_border'
            padding-after='-7pt'
            font-family="LinLib"
            font-size="{\$brl-cadsize}"
            font-weight="bold"
            left='1.0in'
            text-align="center"
            top="$top"
            width='6.5in'
          >
           <fo:block>
             USER'S MANUAL
           </fo:block>
         </fo:block-container>
      </fo:block-container>
HERE
} # print_um_title

sub print_draft_overlay {
  my $fp  = shift @_;
#  my $top = '6.20in';
#  my $top = '6.00in';
  my $top = '6.75in';

  # convert inches to fo's millipoints
  my $millipoint = 1.0 * 72 * 1000;
  my $transform = "fox:transform='rotate(-45, $millipoint, 0)'";

  #my $color = 'gray';
  my $color = '#C8C8C8';
  print $fp <<HERE;
      <!-- DRAFT OVERLAY ==================================== -->
      <fo:block-container
         $transform
         absolute-position='absolute'
         font-family='LinLib'
         font-size='3.0in'
         font-weight='light'
         text-align='center'
         color='$color'
         top='$top'
      >
        <fo:block>
          DRAFT
        </fo:block>
      </fo:block-container>
HERE

} # print_draft_overlay

sub strip_xml_element {
  my $aref       = shift @_;
  my $element    = shift @_;
  my $element_id = shift @_;

  my @arr = ();
  my $strip   = 0;
  my $find_el = 1;

  my $debug =0;
  print STDERR "debug: starting stripping of element: '$element', id:'$element_id'\n"
    if $debug;
  foreach my $line (@{$aref}) {
    if ($find_el
	&& $line =~ m{\A \s* \<$element \s+}xms
	&& $line =~ m{$element_id}xms
       ) {
      if ($debug) {
	print STDERR "debug: starting strip\n";
	print STDERR $line;
      }
      $strip = 1;
      $find_el = 0;
      next;
    }
    elsif ($strip
	   && $line =~ m{\A \s* \</$element \s* \>}xms
	  ) {
      if ($debug) {
	print STDERR "debug: stopping strip\n";
	print STDERR $line;
      }
      $strip = 0;
      next;
    }
    push @arr, $line
      if !$strip;
    #print "debug: saving: $line" if !$strip;
  }

  # now replace the old array with the new
  @{$aref} = @arr;
} # strip_xml_element


sub strip_fo_bookmark {
  my $aref           = shift @_;
  my $bookmark_title = shift @_;

  my @arr = ();
  my $strip   = 0;
  my $find_el = 1;

  my $debug =0;
  print STDERR "debug: starting stripping of book mark title: '$bookmark_title'\n"
    if $debug;

  my @tarr = @{$aref};
  my $nl = @tarr;

  for (my $i = 0; $i < $nl; ++$i) {
    my $line = $tarr[$i];
    if ($find_el
	&& $line =~ m{\A \s* \<fo:bookmark \s+}xms
       ) {
      # need the next two lines as a set
      my @xlines = ();
      push @xlines, $line;
      my $found_bookmark = 0;
      for (my $j = 0; $j < 2; ++$j) {
	++$i;
	$line = $tarr[$i];
	if ($line =~ m{$bookmark_title}) {
	  $found_bookmark = 1;
	}
	push @xlines, $line;
      }
      my $nx = @xlines;
      die "\@xlines != 3, it's $nx" if (3 != $nx);
      if ($found_bookmark) {
	$find_el = 0;
      }
      else {
	push @arr, @xlines;
      }
      next;
    }

    push @arr, $line;
  }

  # now replace the old array with the new
  @{$aref} = @arr;
} # strip_fo_bookmark

#======================
1;
