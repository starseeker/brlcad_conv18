<article
  xmlns="http://docbook.org/ns/docbook"
  version="5.0"
>

<title>Application Development with BRL-CAD</title>

<para>Note: This is based on an old Power Point presentation by Lee
A. Butler and John Anderson. It has been extensively reformatted and
is being brought up-to-date, by the BRL-CAD Team, with the current state of the BRL-CAD source the
best practices recommended by the BRL-CAD developers</para>

<para>WARNING: This a code-intensive presentation for Code Warriors only!
Non-programmers will need atropine, caffeine, and electro-shock
therapy (run, do not walk, to the nearest exit).</para>

<section>
<title>Overview</title>

<itemizedlist>
      <listitem>
        <para>Header files</para>
      </listitem>
      <listitem>
        <para>Shooting Rays</para>
      </listitem>
      <listitem>
        <para>Ray-Tracing User Interface Framework (RTUIF)</para>
      </listitem>
      <listitem>
        <para>Geometry Forms</para>
      </listitem>
      <listitem>
        <para>Creating Geometry</para>
      </listitem>
      <listitem>
        <para>Reading Geometry</para>
      </listitem>
      <listitem>
        <para>Modifying Geometry</para>
      </listitem>
    </itemizedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Header Files</title>

        <para>The Big-6</para>

<informaltable frame="none">
      <tgroup cols="2">
        <colspec colname="c1" colwidth="50*"/>
        <colspec colname="c2" colwidth="50*"/>
        <tbody>
          <row>
            <entry><para><orderedlist><listitem>
                    <para>Header</para>
                  </listitem>
</orderedlist></para></entry>
            <entry><para><orderedlist><listitem>
                    <para>Library</para>
                  </listitem>
</orderedlist></para></entry>
          </row>
          <row>
            <entry><para><orderedlist><listitem>
                    <para>bu.h</para>
                  </listitem>
</orderedlist></para></entry>
            <entry><para><orderedlist><listitem>
                    <para>libbu</para>
                  </listitem>
</orderedlist></para></entry>
          </row>
          <row>
            <entry><para><orderedlist><listitem>
                    <para>bn.h</para>
                  </listitem>
</orderedlist></para></entry>
            <entry><para><orderedlist><listitem>
                    <para>libbn</para>
                  </listitem>
</orderedlist></para></entry>
          </row>
          <row>
            <entry><para><orderedlist><listitem>
                    <para>raytrace.h</para>
                  </listitem>
</orderedlist></para></entry>
            <entry><para><orderedlist><listitem>
                    <para>librt</para>
                  </listitem>
</orderedlist></para></entry>
          </row>
          <row>
            <entry><para><orderedlist><listitem>
                    <para>rtgeom.h</para>
                  </listitem>
</orderedlist></para></entry>
            <entry><para><orderedlist><listitem>
                    <para>librt / libwdb</para>
                  </listitem>
</orderedlist></para></entry>
          </row>
          <row>
            <entry><para><orderedlist><listitem>
                    <para>wdb.h</para>
                  </listitem>
</orderedlist></para></entry>
            <entry><para><orderedlist><listitem>
                    <para>libwdb</para>
                  </listitem>
</orderedlist></para></entry>
          </row>
          <row>
            <entry><para><orderedlist><listitem>
                    <para>vmath.h</para>
                  </listitem>
</orderedlist></para></entry>
            <entry><para><orderedlist><listitem>
                    <para>(data types)</para>
                  </listitem>
</orderedlist></para></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

</section>

<section>
  <title>Prototype Application: rtexample.c</title>

<itemizedlist>
      <listitem>
        <para>Opens a database</para>
      </listitem>
      <listitem>
        <para>Retrieves geometry</para>
      </listitem>
      <listitem>
        <para>Prepares geometry for raytrace</para>
      </listitem>
      <listitem>
        <para>Performs raytrace</para>
      </listitem>
      <listitem>
        <para>See source tree: rt/rtexample.c</para>
      </listitem>
    </itemizedlist>

</section>


<!-- Next 'div' was a 'draw:page'. -->
<section>

  <title>Necessary Headers</title>

<programlisting>#include "conf.h"	/* compilation macros */
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include "machine.h"	/* machine specific definitions */
#include "vmath.h"	/* vector math macros */
#include "raytrace.h"	/* librt interface definitions */
</programlisting>

<itemizedlist>
      <listitem>
        <para>The conf.h and machine.h are ubiquitous in almost all BRLCAD apps</para>
      </listitem>
      <listitem>
        <para>The raytrace.h is present for geometry programs</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para><itemizedlist>
            <listitem>
              <para>Includes some additional headers</para>
            </listitem>
            <listitem>
              <para>Contains most ray-tracing data structure definitions</para>
            </listitem>
          </itemizedlist>
</para>
      </listitem>
    </itemizedlist>

</section>


<!--
Next 'div' was a 'draw:page'.
-->
<section>

<title>Opening the Database</title>

<programlisting>static struct rt_i *rtip; /* librt Instance structure */
/* rt_dirbuild() performs many functions for us */
rtip = rt_dirbuild(argv[1], buf, sizeof(buf));
if (rtip == RTI_NULL) {
    fprintf(stderr,"rtexample: rt_dirbuild failure\n");
    exit(2);
}
</programlisting>

<itemizedlist>
      <listitem>
        <para>Opens database file</para>
      </listitem>
      <listitem>
        <para>Builds a directory of objects in the database</para>
      </listitem>
      <listitem>
        <para>Allows us to retrieve individual objects</para>
      </listitem>
    </itemizedlist>

<!-- Next 'div' was a 'draw:page'. -->

<orderedlist><listitem>
        <para> Reading Geometry</para>
      </listitem>
</orderedlist>

<programlisting>if (rt_gettree(rtip, argv[2]) &lt; 0)
    fprintf(stderr,"rt_gettree(%s) FAILED\n", argv[2]);
</programlisting>

<itemizedlist>
      <listitem>
        <para>Retrieves tree top specified by argv[2] into a working set used by librt</para>
      </listitem>
    </itemizedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Preparing Geometry for Raytracing</title>

<programlisting>rt_prep_parallel(rtip,1);
</programlisting>

<itemizedlist>
      <listitem>
        <para>Pre-computes useful terms for each primitive</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para><itemizedlist>
            <listitem>
              <para>E.g.: triangle normals, function roots, trig terms</para>
            </listitem>
          </itemizedlist>
</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para>Builds space partition tree to accelerate ray-trace</para>
      </listitem>
    </itemizedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <para>Application Struct and Shot</para>

<programlisting>struct application ap;
ap.a_rt_i = rtip;
VSET(ap.a_ray.r_pt, 0, 0, 10000);
VSET(ap.a_ray.r_dir, 0, 0, -1);
ap.a_hit = hit;	          /* where to go on a hit */
ap.a_miss = miss;         /* where to go on a miss */

(void)rt_shootray(&amp;); /* do it */
</programlisting>

<itemizedlist>
      <listitem>
        <para>The application struct contains information about the
        ray that is to be computed and what should be done with the
        results.</para>
      </listitem>
    </itemizedlist>

<!-- Next 'div' was a 'draw:page'. -->

<orderedlist><listitem>
        <para>Application Struct</para>
      </listitem>
</orderedlist>

<para>Excerpts of application struct from raytrace.h:</para>

<programlisting>struct application {

    struct xray  a_ray;	/* Actual ray to be shot */
    int          (*a_hit)(struct application *,
                          struct partition *,
                          struct seg *);
    int          (*a_miss) (struct application *);
    int          a_onehit; /* flag to stop on first hit */

    struct rt_i  *a_rt_i;  /* this librt instance */
};
</programlisting>
</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Miss Routine</title>

<itemizedlist>
      <listitem>
        <para>Called when ray does not hit any geometry</para>
      </listitem>
    </itemizedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <para>Hit Routine</para>

<programlisting>int
hit(register struct application *ap, /* see raytrace.h */
    struct partition *PartHeadp)     /* see raytrace.h */
{
    register struct partition *pp;
    register struct hit *hitp;
    point_t pt;
    for (pp = PartHeadp-&gt;pt_forw;
         pp != PartHeadp;
         pp = pp-&gt;pt_forw ) {
        hitp = pp-&gt;pt_inhit;
        VJOIN1( pt, ap-&gt;a_ray.r_pt, hitp-&gt;hit_dist, ap-&gt;a_ray.r_dir);
        VPRINT(Hit Point, pt);
    }
    return 1; /* value returned by rt_shootray();
}
</programlisting>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Hit Routine Breakdown</title>

<itemizedlist>
      <listitem>
        <para>Partition Structure contains information about intervals
        of the ray which pass through geometry</para>
      </listitem>
      <listitem>
        <para>Hit structure contains information about an individual boundary/ray intersection</para>
      </listitem>
    </itemizedlist>
</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Partition Structure</title>

<itemizedlist>
      <listitem>
        <para>From h/raytrace.h</para>
      </listitem>
    </itemizedlist>

</section>

<section>
  <para>Hit Structure</para>

<programlisting>
struct hit {
    long         hit_magic;
    fastf_t      hit_dist;    /* dist from r_pt to hit_point      */
    point_t      hit_point;   /* Intersection point               */
    vect_t       hit_normal;  /* Surface Normal at hit_point      */
    vect_t       hit_vpriv;   /* PRIVATE vector for xxx_*()       */
    void        *hit_private; /* PRIVATE handle for xxx_shot()    */
    int          hit_surfno;  /* solid-specific surface indicator */
    struct xray *hit_rayp;    /* pointer to defining ray          */
};
</programlisting>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Hit Routine (Again)</title>

<programlisting>
int
hit(register struct application *ap, /* see raytrace.h */
    struct partition *PartHeadp)     /* see raytrace.h */
{
    register struct partition *pp;
    register struct hit *hitp;
    point_t pt;
    for (pp = PartHeadp-&gt;pt_forw;
         pp != PartHeadp;
         pp = pp-&gt;pt_forw ) {
        hitp = pp-&gt;pt_inhit;
        VJOIN1(pt, ap-&gt;a_ray.r_pt, hitp-&gt;hit_dist, ap-&gt;a_ray.r_dir);
        VPRINT(Hit Point, pt);
    }
    return 1; /* value returned by rt_shootray();
}
</programlisting>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Using the RTUIF</title>

<itemizedlist>
      <listitem>
        <para>Makes shooting grids of rays easy.</para>
      </listitem>
      <listitem>
        <para>Uses the same command line interface as rt.</para>
      </listitem>
      <listitem>
        <para>Foundation for: rt, rtweight, rthide, and other raytracing based applications.</para>
      </listitem>
      <listitem>
        <para>Simplest example shown in rt/viewdummy.c in source tree</para>
      </listitem>
    </itemizedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>The 5 RTUIF Functions</title>

<itemizedlist>
      <listitem>
        <para>view_init</para>
      </listitem>
      <listitem>
        <para>view_setup</para>
      </listitem>
      <listitem>
        <para>view_2init</para>
      </listitem>
      <listitem>
        <para>view_pixel</para>
      </listitem>
      <listitem>
        <para>view_end</para>
      </listitem>
    </itemizedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>RTUIF Routines1</title>


<orderedlist><listitem>
        <para>int view_init(struct application *ap, char *file,</para>
        <para>char *obj, int minus_o);</para>
        <para>Called by main() at the start of a run. Returns 1 if framebuffer should be opened, else 0.</para>
        <para>void view_setup(struct rt_i *rtip);</para>
      </listitem>
</orderedlist><itemizedlist>
      <listitem>
        <para><orderedlist><listitem>
              <para>Called by do_prep(), just before rt_prep() is
              called, in do.c. This allows the lighting model to get
              set up for this frame, e.g., generate lights, associate
              materials routines, etc.</para>
            </listitem>
</orderedlist></para>
      </listitem>
    </itemizedlist>
<orderedlist><listitem>
        <para>Void view_2init(struct application *ap);</para>
        <para>Called at the beginning of a frame. Called by</para>
        <para>do_frame() just before raytracing starts.</para>
      </listitem>
</orderedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>RTUIF Routines2</title>

<orderedlist><listitem>
        <para> int rayhit(struct application *ap, struct partition *PartHeadp);</para>
        <para>Called via a_hit linkage from rt_shootray() when ray hits.</para>
        <para>int raymiss(struct application *ap);</para>
        <para>Called via a_miss linkage from rt_shootray() when ray misses.</para>
      </listitem>
</orderedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>RTUIF Routines3</title>

<orderedlist><listitem>
        <para> void view_pixel(struct application *ap);</para>
        <para>Called by worker() after the end of proccessing for</para>
        <para>each pixel.</para>
        <para>void view_end(struct application *ap);</para>
        <para>Called in do_frame() at the end of a frame, just after raytracing completes.</para>
      </listitem>
</orderedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>So Much for the Trivialities</title>

        <para>Now we look at actual geometry</para>
</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title> Thinking About Geometry</title>

<itemizedlist>
      <listitem>
        <para>How to create it</para>
      </listitem>
      <listitem>
        <para>How to read it</para>
      </listitem>
      <listitem>
        <para>Doing anything useful with it</para>
      </listitem>
    </itemizedlist>
</section>



<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Geometric Representation</title>

   <para>BRL-CAD geometry has 3 forms:</para>

<itemizedlist>
      <listitem>
        <para><itemizedlist>
            <listitem>
              <para>External (Disk/DB)</para>
              <itemizedlist>
                <listitem>
                  <para>Space efficient</para>
                </listitem>
                <listitem>
                  <para>Network integers (Big-Endian)</para>
                </listitem>
                <listitem>
                  <para>IEEE double-precision floating point (Big-Endian)</para>
                </listitem>
              </itemizedlist>
            </listitem>
            <listitem>
              <para>Internal (Editing)</para>
              <itemizedlist>
                <listitem>
                  <para>Convenient parameter editing</para>
                </listitem>
                <listitem>
                  <para>Host float/int representation</para>
                </listitem>
              </itemizedlist>
            </listitem>
            <listitem>
              <para>Prepped (Raytrace)</para>
              <itemizedlist>
                <listitem>
                  <para>Fast ray/primitive intersections</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
</para>
      </listitem>
    </itemizedlist>

</section>


<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>On-Disk Representation</title>

<itemizedlist>
      <listitem>
        <para>Space Efficient</para>
      </listitem>
      <listitem>
        <para>Machine independent</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para><itemizedlist>
            <listitem>
              <para>Only in new database format</para>
            </listitem>
          </itemizedlist>
</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para>Database access is separate from object retrieval.</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para><itemizedlist>
            <listitem>
              <para>Database layer returns named objects.</para>
              <itemizedlist>
                <listitem>
                  <para>Does not understand content.</para>
                </listitem>
              </itemizedlist>
            </listitem>
            <listitem>
              <para>Primitive objects get Bag-o-Bytes to turn into in-memory representation.</para>
              <itemizedlist>
                <listitem>
                  <para>Have no knowledge of data origins</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
</para>
      </listitem>
    </itemizedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Internal Representation</title>

<itemizedlist>
      <listitem>
        <para>Convenient editing form</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para><itemizedlist>
            <listitem>
              <para>Host format floating point and integers</para>
            </listitem>
          </itemizedlist>
</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para>Must be exported to be written to disk</para>
      </listitem>
      <listitem>
        <para>Primitive shape data structures defined in h/rtgeom.h</para>
      </listitem>
      <listitem>
        <para>Combination (and hence region) structure defined in raytrace.h</para>
      </listitem>
    </itemizedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Prepped Representation</title>

<itemizedlist>
      <listitem>
        <para>The form that is actually raytraced</para>
      </listitem>
      <listitem>
        <para>Created from internal form by rt_prep() call</para>
      </listitem>
      <listitem>
        <para>May not include internal form</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para><itemizedlist>
            <listitem>
              <para>Saves memory</para>
            </listitem>
          </itemizedlist>
</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para>May include additional fields</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para><itemizedlist>
            <listitem>
              <para>Pre-computed values, additional data</para>
            </listitem>
          </itemizedlist>
</para>
      </listitem>
    </itemizedlist>
</section>


<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Simple Database Application</title>

        <para>Necessary headers</para>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Opening The Database</title>

<programlisting>
</programlisting>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Creating Geometry</title>

<itemizedlist>
      <listitem>
        <para>Note: All db units are in mm</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para><itemizedlist>
            <listitem>
              <para>Set mk_conv2mm global for other units</para>
            </listitem>
          </itemizedlist>
</para>
      </listitem>
    </itemizedlist>

</section>


<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Getting Geometry</title>

    <para>To retrieve geometry, we have to get an internal representation</para>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Primitive Methods</title>

  <para>Retrieved geometry has a specific set of defined operations
  and methods available. See <filename>h/raytrace.h</filename> for a
  description of <filename>struct rt_functab</filename>.</para>

  <para>Primitives should implement every method, but some do not. See
  librt/table.c for specifics.</para>

</section>


<!-- Next 'div' was a 'draw:page'. -->
<section>
  <para>Putting Geometry Back</para>

<itemizedlist>
      <listitem>
        <para>Database I/O layer converts from internal to external format.</para>
      </listitem>
    </itemizedlist>

</section>

<section>
  <para>Building Boolean Trees</para>

<itemizedlist>
      <listitem>
        <para>Regions/combinations used to store boolean trees.</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para><itemizedlist>
            <listitem>
              <para>Both are same type of database record</para>
            </listitem>
            <listitem>
              <para>old GIFT form detailed here</para>
            </listitem>
          </itemizedlist>
</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para>Simple boolean tree that contains</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para><itemizedlist>
            <listitem>
              <para>Names of objects</para>
            </listitem>
            <listitem>
              <para>Boolean operations.</para>
            </listitem>
            <listitem>
              <para>Matrix transformations</para>
            </listitem>
          </itemizedlist>
</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para>Database record contains no actual geometry.</para>
      </listitem>
      <listitem>
        <para>Example code taken from</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para><itemizedlist>
            <listitem>
              <para>libwdb/wdb_example.c</para>
            </listitem>
          </itemizedlist>
</para>
      </listitem>
    </itemizedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Constructing Boolean List</title>

<itemizedlist>
      <listitem>
        <para>Build the list of elements first:</para>
      </listitem>
    </itemizedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Regions/Combinations</title>

<itemizedlist>
      <listitem>
        <para>Constructing the actual combination record</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para><itemizedlist>
            <listitem>
              <para>Note: use mk_lcomb/mk_comb for inital creation only!</para>
              <itemizedlist>
                <listitem>
                  <para>caveat: can use to update boolean tree under special conditions</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
</para>
      </listitem>
    </itemizedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Retrieving A Combination</title>

<itemizedlist>
      <listitem>
        <para>Simple retrieval only gets:</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para><itemizedlist>
            <listitem>
              <para>List of elements</para>
            </listitem>
            <listitem>
              <para>Boolean operations</para>
            </listitem>
            <listitem>
              <para>Matrix transformations.</para>
            </listitem>
          </itemizedlist>
</para>
      </listitem>
    </itemizedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Combination Write-Back</title>

<itemizedlist>
      <listitem>
        <para>Modify the boolean tree</para>
      </listitem>
      <listitem>
        <para>Write back out to db</para>
      </listitem>
    </itemizedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Combination Tree Info</title>

<itemizedlist>
      <listitem>
        <para>Need to prep the tree to obtain geometry</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para><itemizedlist>
            <listitem>
              <para>First, create rt instance struct rt_i object</para>
            </listitem>
          </itemizedlist>
</para>
      </listitem>
    </itemizedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Processing combination tree</title>

<itemizedlist>
      <listitem>
        <para>Now to retrieve a treetop and prep:</para>
      </listitem>
      <listitem>
        <para>This could have been any level in the tree, not just a region.</para>
      </listitem>
    </itemizedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Accessing Prepped Regions</title>

<itemizedlist>
      <listitem>
        <para>rtip has list of regions</para>
      </listitem>
      <listitem>
        <para>Access as a linked list</para>
      </listitem>
      <listitem>
        <para>Example: getting bounding box of regions</para>
      </listitem>
    </itemizedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Making Temporary Changes</title>

<itemizedlist>
      <listitem>
        <para>Changes that only last for 1 application run</para>
      </listitem>
      <listitem>
        <para>Changes do not reside in on-disk database</para>
      </listitem>
    </itemizedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Dynamic Geometry</title>

<itemizedlist>
      <listitem>
        <para>Involves special inmem database</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para><itemizedlist>
            <listitem>
              <para>Contains only modifications</para>
            </listitem>
            <listitem>
              <para>Akin to union filesystem of Unix</para>
            </listitem>
          </itemizedlist>
</para>
      </listitem>
    </itemizedlist>
<itemizedlist>
      <listitem>
        <para>Directory structure tracks whether current version of object is on disk or in inmem database</para>
      </listitem>
      <listitem>
        <para>Object retrieval gets most current version</para>
      </listitem>
      <listitem>
        <para>Writes to inmem arranged though special wdb_dbopen() call</para>
      </listitem>
    </itemizedlist>

</section>

<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Accessing inmem database</title>

<itemizedlist>
      <listitem>
        <para>small difference in wdb_dbopen call</para>
      </listitem>
      <listitem>
        <para>all writes to this rt_wdb will go to memory database only</para>
      </listitem>
    </itemizedlist>

</section>


<!-- Next 'div' was a 'draw:page'. -->
<section>
  <title>Closing the Database</title>

<itemizedlist>
      <listitem>
        <para>Important to flush data and purge data structures!</para>
      </listitem>
    </itemizedlist>

</section>

</article>
