Some special characters for DB inline equations:

 LE  &#x2264;   less than or equal to
 GE  &#x2265;   greater than or equal to
 x   &#x00D7;   multiply                   
 div &#x00F7;   divide
 add &#x002B;   add
 pm  &#x00B1;   plus or minus              
 ne  &#x2260;   not equal to
 dot &#x2219;   dot operator (multiply)
 pi  &#x03C0;   small Greek letter pi
 Pi  &#x03A0;   capital Greek letter Pi

Dashes:

  figure dash     &#x2012; 
  en dash         &#x2013;       
  em dash         &#x2014; 
  quotation dash  &#x2015;
  swung dash      &#x2053;

Some unicode characters for spaces (see p. 330 in Bob Stayton's book):

 &#x00A0; &nbsp;    no-break space
 &#x2002; &ensp;    en space, half the width of an em space
 &#x2003; &emsp;    em space, usually equal to the type size of the font
 &#x2004; &emsp13;  1/3 em
 &#x2005; &emsp14;  1/4 em
 &#x2006;           1/6 em
 &#x2007; &numsp;   width of a digit
 &#x2008; &puncsp;  width of narrow punctuation
 &#x2009; &thinsp;  1/5 em
 &#x200A; &hairsp;  thinner than thin space

Other symbols:
 
 &#x00A9;           copyright
 &#x00AE;           registered sign
 &#x00B0;           degree symbol
 &#x2120;           service mark
 &#x2122;           trade mark

Note that the space character should butt against the adjacent
characters.

To include fancier equations, do the following:

Use LibreOffice Math to write the equation.  Save the file as X.mml
where X is a suitable name.

Example mml file:

<?xml version="1.0" encoding="UTF-8"?>

<math xmlns="http://www.w3.org/1998/Math/MathML">
 <semantics>
  <mrow>
   <mrow>
    <msub>
     <mi>P</mi>
     <mi>k</mi>
    </msub>
   </mrow>
  </mrow>
  <annotation encoding="StarMath 5.0">P_{k} = P_{{k}_{MAX}} left lbrace 1 -e^{[-k_{1}(x - x_{0})^{k_{2}}]} right rbrace </annotation>
 </semantics>
</math>

Edit the file to remove the "semantics" element. Ensure you add the
mml file to version control.

Use SVGMath to convert the file to a graphic:

  math2svg -s -o X.svg X.mml

Or you can use the bash script "make-svg.sh" which creates the svg
file in the text subdirectory and uses xmllint to format it ready for
further editing either with Inkscape or by hand.

Use Inkscape to view the svg file and edit it if necessary.  Be sure
to add the new file to version control in the text subdirectory.

Include the svg file in the desired place in DocBook source like this:

<equation id="X">
<title>General closed-form damage function formula</title>
<informalfigure>
<mediaobject>
  <imageobject role='xhtml'>
    <!-- centering title taken care of in css --> 
    <imagedata
       width='3in' scalefit='1'
       fileref="./X.svg"
    />
  </imageobject>
  <imageobject role='fo'>
    <imagedata
       align='center'
       format="SVG"
       fileref="./X.svg"
    />
  </imageobject>
</mediaobject>
</informalfigure>
</equation>

2011-04-13

Note there are font problems for pdf with complex equations--I'm
querying the fop mailing list for ideas.

2011-07-24

Marks for itemized list:

For better looking list markers use the 'override' attribute for the
<listitem>,
e.g.,

  <listitem override='disc'>        <!-- a small black dot    -->
  ...
  <listitem override='smallcircle'> <!-- a small white circle -->

Other list symbols defined in the stylesheets:

  <xsl:choose>
    <xsl:when test="$itemsymbol='none'"></xsl:when>
    <xsl:when test="$itemsymbol='disc'">&#x2022;</xsl:when>
    <xsl:when test="$itemsymbol='bullet'">&#x25CF;</xsl:when>
    <xsl:when test="$itemsymbol='endash'">&#x2013;</xsl:when>
    <xsl:when test="$itemsymbol='emdash'">&#x2014;</xsl:when>
    <!-- Some of these may work in your XSL-FO processor and fonts -->

    <xsl:when test="$itemsymbol='square'">&#x25A0;</xsl:when>
    <xsl:when test="$itemsymbol='box'">&#x25A0;</xsl:when>
    <xsl:when test="$itemsymbol='circle'">&#x25CB;</xsl:when>
    <xsl:when test="$itemsymbol='opencircle'">&#x25CB;</xsl:when>
    <xsl:when test="$itemsymbol='whitesquare'">&#x25A1;</xsl:when>

    <!-- these two are not in Linux Libertine: -->
    <xsl:when test="$itemsymbol='smallwhitesquare'">&#x25AB;</xsl:when>
    <xsl:when test="$itemsymbol='smallblacksquare'">&#x25AA;</xsl:when>

    <xsl:when test="$itemsymbol='round'">&#x25CF;</xsl:when>
    <xsl:when test="$itemsymbol='blackcircle'">&#x25CF;</xsl:when>
    <xsl:when test="$itemsymbol='smallcircle'">&#x25E6;</xsl:when>
    <xsl:when test="$itemsymbol='triangle'">&#x2023;</xsl:when>
    <xsl:when test="$itemsymbol='point'">&#x203A;</xsl:when>
    <!--    
    <xsl:when test="$itemsymbol='hand'"><fo:inline
                         font-family="Wingdings 2">A</fo:inline></xsl:when>
    -->
    <xsl:otherwise>&#x25CF;</xsl:otherwise><!-- bullet -->



