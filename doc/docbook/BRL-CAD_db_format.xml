<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"/usr/share/sgml/docbook/xml-dtd-4.5/docbookx.dtd">
<article class='specification'>
  <articleinfo>
    <title>BRL-CAD Database Format</title>
    <subtitle>Version 5 (DRAFT)</subtitle>
    <authorgroup>
      <author>
        <firstname>Lee</firstname>
        <surname>Butler</surname>
        <othername role='mi'>A</othername>
        <affiliation>
          <shortaffil>U.S. Army Research Laboratory</shortaffil>
          <orgdiv>Survivability/Lethality Analysis Directorate</orgdiv>
          <address>
            Aberdeen Proving Ground
            <state>MD</state> 
            <postcode>21005-5068</postcode>
          </address>
        </affiliation>
      </author>
      <author>
        <firstname>Michael</firstname>
        <surname>Muuss</surname>
        <othername role='mi'>John</othername>
        <affiliation>
          <shortaffil>U.S. Army Research Laboratory</shortaffil>
          <orgdiv>Survivability/Lethality Analysis Directorate</orgdiv>
          <address>
            Aberdeen Proving Ground
            <state>MD</state> 
            <postcode>21005-5068</postcode>
          </address>
        </affiliation>
      </author>
      <author>
        <firstname>Paul</firstname>
        <surname>Tanenbaum</surname>
        <othername role='mi'>J</othername>
        <affiliation>
          <shortaffil>U.S. Army Research Laboratory</shortaffil>
          <orgdiv>Survivability/Lethality Analysis Directorate</orgdiv>
          <address>
            Aberdeen Proving Ground
            <state>MD</state> 
            <postcode>21005-5068</postcode>
          </address>
        </affiliation>
      </author>
      <author>
        <firstname>John</firstname>
        <surname>Anderson</surname>
        <othername role='mi'>R</othername>
        <affiliation>
          <shortaffil>U.S. Army Research Laboratory</shortaffil>
          <orgdiv>Survivability/Lethality Analysis Directorate</orgdiv>
          <address>
            Aberdeen Proving Ground
            <state>MD</state> 
            <postcode>21005-5068</postcode>
          </address>
        </affiliation>
      </author>
      <author>
        <firstname>Robert</firstname>
        <surname>Parker</surname>
        <othername role='mi'>G</othername>
        <affiliation>
          <shortaffil>U.S. Army Research Laboratory</shortaffil>
          <orgdiv>Survivability/Lethality Analysis Directorate</orgdiv>
          <address>
            Aberdeen Proving Ground
            <state>MD</state> 
            <postcode>21005-5068</postcode>
          </address>
        </affiliation>
      </author>
      <author>
        <firstname>Ronald</firstname>
        <surname>Bowers</surname>
        <othername role='mi'>A</othername>
        <affiliation>
          <shortaffil>U.S. Army Research Laboratory</shortaffil>
          <orgdiv>Survivability/Lethality Analysis Directorate</orgdiv>
          <address>
            Aberdeen Proving Ground
            <state>MD</state> 
            <postcode>21005-5068</postcode>
          </address>
        </affiliation>
      </author>
      <author>
        <firstname>Christopher</firstname>
        <surname>Johnson</surname>
        <othername role='mi'>T</othername>
        <affiliation>
          <shortaffil>U.S. Army Research Laboratory</shortaffil>
          <orgdiv>Survivability/Lethality Analysis Directorate</orgdiv>
          <address>
            Aberdeen Proving Ground
            <state>MD</state> 
            <postcode>21005-5068</postcode>
          </address>
        </affiliation>
      </author>
      <author>
        <firstname>Eric</firstname>
        <surname>Edwards</surname>
        <othername role='mi'>W</othername>
        <affiliation>
          <shortaffil>SURVICE Engineering Company</shortaffil>
          <address>
            <street>4695 Millennium Drive</street>
            <city>Belcamp</city>
            <state>MD</state> 
            <postcode>21017-1505</postcode>
          </address>
        </affiliation>
      </author>
    </authorgroup>
  </articleinfo>
  
  <abstract>
    <para>
      BRL-CAD software uses its own binary file format to store the geometric information and
      other properties required to define CAD models. BRL-CAD used its version 4 (v4) binary 
      ".g" database format for over 10 years, but a variety of long standing issues with 
      that format prompted the development of version 5.  Issues addressed by the new format
      include a machine-independent format, expanding the upper limit of numbers to double 
      precision floating point, and lifting a 16 character size limit on object names.
    </para>
  </abstract>

  <section>
    <title>Background and Terminology</title>
    <para>
      BRL-CAD is a constructive solid geometry (CSG) modeling system. Primitive solid shapes 
      are combined using boolean operations to form regions of homogeneous material. 
    </para>
    <para>
      The database is organized as a <emphasis>directed acyclic graph</emphasis> (DAG), which 
      comprises 

      <itemizedlist>
	<listitem>
	  <para>primitive <emphasis>solids</emphasis> - the minimal elements of the DAG.</para>
	</listitem>
	<listitem>
	  <para>
	    <emphasis>combinations</emphasis> - the nonminimal elements of the DAG, 
	    some of which are specially marked as regions. The maximal 
	    elements of the DAG are called tops.
	  </para>
	</listitem>
	<listitem>
	  <para><emphasis>arcs</emphasis> - contain boolean operators and 4x4 homogeneous transformation matrices.</para>
	</listitem>
      </itemizedlist>
    </para>
    <para>
      In a slight abuse of terminology, the DAG is often spoken of as a tree or collection 
      of trees. In this context, the solids are also called <emphasis>leaves</emphasis>. 
    </para>
    <section>
      <title>Format of Data Elements/Database External Format</title>
      <para>
	The external format has several important properties, especially with regard 
	to the <emphasis>Object_Body</emphasis>:
	<itemizedlist>
	  <listitem>
	    <para>
	      Numbers are stored in binary for storage efficiency, for speed of reading 
	      and writing, and for preventing errors from creeping in due to repetitive 
	      conversion between binary and an ASCII string representation. This eliminates 
	      the need to use the old g2asc and asc2g to move databases between machines of 
	      different architectures.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      All data in the object wrapper are stored in a machine-independent format, 
	      as follows:
	      <itemizedlist mark='opencircle'>
		<listitem>
		  <para>
		    All floating point numbers are stored as IEEE double-precision, in 
		    big-endian order, where byte 0 is on the left end of the word.
		  </para>
		</listitem>
		<listitem>
		  <para>
		    All integers are stored as either <emphasis>unsigned</emphasis> or 
		    <emphasis>twos-complement signed</emphasis> binary numbers in either 
		    8, 16, 32, or 64 bits, in big-endian order.
		  </para>
		</listitem>
		<listitem>
		  <para>
		    All character strings are stored in the ASCII 8-bit character set. 
		    A string is stored as an integer followed by an array of 8-bit 
		    characters. The last character in the array is always a null byte. 
		    The integer indicates the number of bytes in the array including the 
		    terminating null.
		  </para>
		</listitem>
	      </itemizedlist>
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
    </section>
  </section>

  <section>
    <title>Definition of a Single, Generic Database Object</title>
    <para>
      The database access library stores <emphasis>objects</emphasis> as a collection 
      of data with a globally unique name and places no interpretation on the content 
      of those data. The <emphasis>object</emphasis> is the smallest granularity of 
      an item in the database; objects must be read from and written to the database 
      in a single atomic operation.
    </para>
    <para>
      In the case of librt, each database object will contain exactly one combination 
      node or leaf (solid) node. 
    </para>
    <section>
      <title>Object Structure</title>
      <para>
	All objects share certain common properties, which are stored in a standardized 
	<emphasis>object wrapper</emphasis> consisting of an Object Header and an Object Footer.
      </para>
      <para>
	The Object Header consists of:
	<itemizedlist>
	  <listitem>
	    <para>
	      An 8-bit Magic1 element that holds a specific magic number value used for 
	      database integrity checking.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      A 16-bit Flags element consisting of three 8-bit fields: HFlags, AFlags, 
	      and BFlags, described later.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      A 16-bit Object_Type element organized into two 8-bit-wide fields: the 
	      Major_Type and the Minor_Type.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      An Object_Length element that indicates the total number of bytes required 
	      for this object, including the magic numbers.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      An Object_Name element that is a string holding a name unique to that object 
	      and drawn from a name space that is global to the database. Like other strings, 
	      it consists of two fields, Length and Data. In the case of the Object_Name 
	      element, these are referred to as Name_Length and Name_Data, respectively. 
	      Note: The Object_Name element is mandatory for all allocated storage in the 
	      database. Database free-space managment objects are the only objects for which 
	      the Object_Name element is optional.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
      <para>
	The Object Footer consists of:
	<itemizedlist>
	  <listitem>
	    <para>
	      Any padding bytes necessary to bring the total size of the object in bytes to an 
	      integral multiple of 8.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      An 8-bit Magic2 element that holds a specific magic number value used for database 
	      integrity checking.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
      <para>
	Objects may store application-specific information in an Object Interior.
	<itemizedlist>
	  <listitem>
	    <para>
	      An object may optionally have an Object_Attributes element consisting of a
	      pair of fields: Attribute_Length and Attribute_Data. From the point of view 
	      of the database interface specification, the names and values of these attributes 
	      are opaque????; a standardized import/export encoding API will be provided.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      An object may optionally have an Object_Body element consisting of a pair of 
	      fields, Body_Length and Body_Data. From the point of view of the database 
	      interface specification, the format of the data is opaque??.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
      <para>
	The on-disk version of each object consists of three distinct parts: Object Header, 
	Object Interior, and Object Footer. This is called the external format of the object.
      </para>
      <table frame='all'>
	<title>On-Disk BRL-CAD Object Structure</title>
	<tgroup cols='3' align='center' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry>Part</entry>
	      <entry>Element</entry>
	      <entry>Comments</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry morerows='4' valign='middle'><para>Object Header:</para><para>(not compressible)</para></entry>
	      <entry>Magic1</entry>
	      <entry morerows='2' valign='middle'>Required</entry>
	    </row>
	    <row>
	      <entry>HFlags, AFlags, BFlags</entry>
	    </row>
	    <row>
	      <entry><para>Object_Type</para><para>(Major_Type, Minor_Type)</para></entry>
	    </row>
	    <row>
	      <entry>Object_Length</entry>
	      <entry>Required</entry>
	    </row>
	    <row>
	      <entry align='center'>
		<para>
		  <informaltable frame='none'>
		    <tgroup cols='2' align='center'>
		      <tbody>
			<row>
			  <entry>Object Name:</entry>
			  <entry>
			    <para>
			      <informaltable frame='all'>
				<tgroup cols='1' align='center'>
				  <tbody>
				    <row><entry>Name_Length</entry></row>
				    <row><entry>Name_Data</entry></row>
				  </tbody>
				</tgroup>
			      </informaltable>
			    </para>
			  </entry>
			</row>
		      </tbody>
		    </tgroup>
		  </informaltable>
		</para>
	      </entry>
	      <entry><para>Conditional on flag bit N,</para><para>Required for Application Data</para></entry>
	    </row>
	    <row>
	      <entry morerows='1' valign='middle'><para>Object Interior:</para><para>(individually compressible)</para></entry>
	      <entry align='center'>
		<para>
		  <informaltable frame='none'>
		    <tgroup cols='2' align='center'>
		      <tbody>
			<row>
			  <entry>Object Attributes:</entry>
			  <entry>
			    <para>
			      <informaltable frame='all'>
				<tgroup cols='1' align='center'>
				  <tbody>
				    <row><entry>Attribute_Length</entry></row>
				    <row><entry>Attribute_Data</entry></row>
				</tbody>
			      </tgroup>
			    </informaltable>
			  </para>
			</entry>
		      </row>
		    </tbody>
		  </tgroup>
		</informaltable>
		</para>
	      </entry>
	      <entry><para>Conditional on flag bit A</para><para>(ZZZ compression)</para></entry>
	    </row>
	    <row>
	      <entry align='center'>
		<para>
		<informaltable frame='none'>
		  <tgroup cols='2' align='center'>
		    <tbody>
		      <row>
			<entry>Object Body:</entry>
			<entry>
			  <para>
			    <informaltable frame='all'>
			      <tgroup cols='1' align='center'>
				<tbody>
				  <row><entry>Body_Length</entry></row>
				  <row><entry>Body_Data</entry></row>
				</tbody>
			      </tgroup>
			    </informaltable>
			  </para>
			</entry>
		      </row>
		    </tbody>
		  </tgroup>
		</informaltable>
		</para>
	      </entry>
	      <entry><para>Conditional on flag bit B</para><para>(ZZZ compression)</para></entry>
	    </row>
	    <row>
	      <entry morerows='1' valign='middle'><para>Object Footer:</para><para>(not compressible)</para></entry>
	      <entry>Padding</entry>
	      <entry><para>As required to maintain 8-byte</para><para>object boundaries</para></entry>
	    </row>
	    <row>
	      <entry>Magic2</entry>
	      <entry>Required</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <para>
	????Need a description that says that an object can now have (1) EITHER an attribute OR a 
	body, (2) BOTH an attribute and a body, or (3) NEITHER an attribute nor a body.
      </para>
      <para>
	The routines db_get_external() and db_put_external() are used to move objects in external 
	format between memory and the database disk file. The routines db_wrap_external() and 
	db_unwrap_external() are used to wrap and unwrap the (??? Object_Body or Object_Interior ???) 
	(already in external form) in a standardized database object's wrapper.
      </para>
    </section>

    <section>
      <title>Flags</title>
      <para>
	The Flags element consists of three 8-bit fields: HFlags, AFlags, and BFlags. The HFlags 
	field is 1 byte containing flag bits that pertain to the noncompressible basic header and 
	the database object as a whole. The AFlags and BFlags fields are each single bytes containing 
	flag bits that pertain to the (potentially compressed) attributes and body, respectively, in 
	the object interior.
      </para>
      <table frame='all'>
	<title>BRL-CAD Flags Structure</title>
	<tgroup cols='26' align='center'>
	  <colspec colname='h1'/>
	  <colspec colname='h2'/>
	  <colspec colname='h3'/>
	  <colspec colname='h4'/>
	  <colspec colname='h5'/>
	  <colspec colname='h6'/>
	  <colspec colname='h7'/>
	  <colspec colname='h8'/>
	  <colspec colname='s1'/>
	  <colspec colname='a1'/>
	  <colspec colname='a2'/>
	  <colspec colname='a3'/>
	  <colspec colname='a4'/>
	  <colspec colname='a5'/>
	  <colspec colname='a6'/>
	  <colspec colname='a7'/>
	  <colspec colname='a8'/>
	  <colspec colname='s2'/>
	  <colspec colname='b1'/>
	  <colspec colname='b2'/>
	  <colspec colname='b3'/>
	  <colspec colname='b4'/>
	  <colspec colname='b5'/>
	  <colspec colname='b6'/>
	  <colspec colname='b7'/>
	  <colspec colname='b8'/>
	  <thead>
	    <row>
	      <entry namest='h1' nameend='h8' align='center'>HFlags</entry>
	      <entry></entry>
	      <entry namest='a1' nameend='a8' align='center'>AFlags</entry>
	      <entry></entry>
	      <entry namest='b1' nameend='b8' align='center'>BFlags</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>7</entry>
	      <entry>6</entry>
	      <entry>5</entry>
	      <entry>4</entry>
	      <entry>3</entry>
	      <entry>2</entry>
	      <entry>1</entry>
	      <entry>0</entry>
	      <entry morerows='1'> </entry>
	      <entry>7</entry>
	      <entry>6</entry>
	      <entry>5</entry>
	      <entry>4</entry>
	      <entry>3</entry>
	      <entry>2</entry>
	      <entry>1</entry>
	      <entry>0</entry>
	      <entry morerows='1'> </entry>
	      <entry>7</entry>
	      <entry>6</entry>
	      <entry>5</entry>
	      <entry>4</entry>
	      <entry>3</entry>
	      <entry>2</entry>
	      <entry>1</entry>
	      <entry>0</entry>
	    </row>
	    <row>
	      <entry namest='h1' nameend='h2'>Wid</entry>
	      <entry>N</entry>
	      <entry namest='h4' nameend='h5'>Wid</entry>
	      <entry>r</entry>
	      <entry namest='h7' nameend='h8'>DLI</entry>
	      <entry namest='a1' nameend='a2'>Wid</entry>
	      <entry>P</entry>
	      <entry>r</entry>
	      <entry>r</entry>
	      <entry namest='a6' nameend='a8'>ZZZ</entry>
	      <entry namest='b1' nameend='b2'>Wid</entry>
	      <entry>P</entry>
	      <entry>r</entry>
	      <entry>r</entry>
	      <entry namest='b6' nameend='b8'>ZZZ</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <section>
	<title>Wid Flags</title>
	<para>
	  The length of an object or subelement in the database is recorded using an 
	  unsigned integer. These are variable-width fields based on the magnitude of the 
	  maximum number needed. The Wid bits specify the size of the unsigned integer 
	  employed in each instance. There are four 2-bit width (Wid) flags: Object_Wid 
	  and Name_Wid (stored in HFlags), Attribute_Wid (stored in AFlags), and Body_Wid 
	  (stored in BFlags). The Wid fields are interpreted in this manner:
	</para>
	
	<table frame='all'>
	  <title>Wid Flag Structure</title>
	  <tgroup cols='2' align='center'>
	    <thead>
	      <row>
		<entry>Wid Bits</entry>
		<entry>Width (in bits) of Associated Length Fields</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>00</entry>
	      <entry>8</entry>
	    </row>
	    <row>
	      <entry>01</entry>
	      <entry>16</entry>
	    </row>
	    <row>
	      <entry>10</entry>
	      <entry>32</entry>
	    </row>
	    <row>
	      <entry>11</entry>
	      <entry>64</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <para>
	The Object_Wid flag, at the high end of HFlags, encodes the width of the Object_Length 
	field. The Name_Wid flag, in bits 3 and 4 of HFlags, encodes the width of the Name_Length 
	field (when the name element is present; see the N bit, shown later.). Attribute_Wid (or 
	Body_Wid, as the case may be) encodes the width of the Attribute_Length field (when the 
	Object_Attributes (or Object_Attributes) element is present.
	http://ftp.arl.mil/~mike/papers/brlcad5.0/newdb.html - bbitSee the P bit, below.)??????????.
      </para>
      <para>
	The rationale for allowing the width of the Object_Length field to be specified independently 
	of the other widths is to save space on objects in which the values in many of the length 
	fields nearly overflow the specified field width, so that their sum requires a wider field. 
	For example, for four 255-byte interior fields, the corresponding length fields need be no 
	more than 8 bits wide, so the choice Interior_Wid=00 suffices, but their combined length of 
	1020 bytes would require Object_Wid=01. Because all of the length fields besides Object_Length 
	must have the same width, the largest of the values stored in these length fields determines 
	the value of Interior_Wid required. Both Object_Wid and Interior_Wid may vary from object to 
	object. It is expected that the routines that write an object to the disk will use the 
	narrowest width possible for each object.
      </para>
      </section>

      <section>
	<title>"r" Bits</title>
	<para>
	  The bits labled as "r" in all three flags are reserved for future design
	  work assigning additional optional fields in the object.
	</para>
      </section>
 
      <section>
	<title>HFlags - the DLI Flag</title>
	<para>
	  The DLI flag is a 2-bit flag that indicates whether the object is an Application 
	  Data Object or a Database Layer Internal Object. The bits are interpreted as follows: 
	</para>
	<table frame='all' pgwide='1'>
	  <title>DLI Flag Structure</title>
	  <tgroup cols='2' align='center'>
	    <thead>
	      <row>
		<entry>DLI Bits</entry>
		<entry>Meaning</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>00</entry>
	      <entry align='left'>
		Application Data Object 
		<para>
		  The object contains application-specific data. N must be 1. A and B are 
		  determined by what the application presents for storage in the object; both 
		  may be 0 (empty Object_Interior).
		</para>
	      </entry>
	    </row>
	    <row>
	      <entry>01</entry>
	      <entry align='left'>
		Database Layer Internal, Header Object
		<para>
		  A Header Object must be the first object encountered in the database. In 
		  order to support direct concatenation of two existing databases into one new 
		  database, additional header objects may appear elsewhere in the database The 
		  header object has no object name, object attributes, or object body (e.g., 
		  N=0, A=0, B=0). Major_Type=RESERVED, Minor_Type=0. 
		</para>
	      </entry>
	    </row>
	    <row>
	      <entry>10</entry>
	      <entry align='left'>
		Database Layer Internal, Free Storage. 
		<para>
		  Unused space in the database is kept using a special Free DB Storage object 
		  that has no object name or object attributes. The object body is null-filled 
		  and of the proper size for the storage to be represented. Like all other objects, 
		  the total length of the object will be a multiple of 8 bytes. N=0, A=0, B=1. 
		  Major_Type=RESERVED, Minor_Type=0. 
		</para>
	      </entry>
	    </row>
	    <row>
	      <entry>11</entry>
	      <entry align='left'>
		Database Layer Internal, Reserved
		<para>
		  This value is reserved for future use.
		</para>
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <para>
	The DLI flag is not available to the higher database access layers.
      </para>
      <note>
	<para>
	  Implementation note: Before writing a new object into the database in a free area, 
	  the library should read the object header from the database and confirm that the space
	  is indeed free. Similarly, additions to the end should be checked by ensuring that the 
	  file hasn't been extended. In case the check fails, the database write should fail, the 
	  user should be notified, and the internal library mode (not the operating system file 
	  access permissions) should be changed over to read-only access so that no further attempts
	  to write will be issued. These checks will provide protection against two or more users 
	  trying to modify the same database simultaneously and accidentally stepping on each 
	  other. In the NFS world, file locking isn't a strong enough assurance.
	</para>
      </note>
      </section>
 
      <section>
	<title>HFlags - the N Bit</title>
	<para>
	  The "N" bit indicates whether the Name element (consisting of Name_Length and Object_Name 
	  fields) is present (1) or absent (0) in the noncompressible basic header immediately following the 
	  Object_Length field. The width of the Name_Length field is specified by the Name_Wid field.
	</para>
      </section>
     
      <section>
	<title>AFlags/BFlags - the P Bit</title>
	<para>
	  The ``P'' bit indicates whether the Attributes (or, alternatively, Body) element consisting
	  of Attribute_Length and Attribute_Data (or Body_Length and Body_Data) fields, is present (1)
	  or absent (0) in the Object_Interior.
	</para>
      </section>

      <section>
	<title>AFlags/BFlags - the ZZZ Flag</title>
	<para>
	  The 3-bit ``ZZZ'' flag indicates the compression, if any, of the object Attributes (or Body):
	</para>
	<table frame='all'>
	  <title>ZZZ Flag Structure</title>
	  <tgroup cols='2' align='center'>
	    <thead>
	      <row>
		<entry>ZZZ Bits</entry>
		<entry>Compression Algorithm</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>000</entry>
	      <entry>None</entry>
	    </row>
	    <row>
	      <entry>001</entry>
	      <entry>GNU GZIP</entry>
	    </row>
	    <row>
	      <entry>010</entry>
	      <entry>Burroughs-Wheeler</entry>
	    </row>
	    <row>
	      <entry>011</entry>
	      <entry>Reserved</entry>
	    </row>
	    <row>
	      <entry>100</entry>
	      <entry>Reserved</entry>
	    </row>
	    <row>
	      <entry>101</entry>
	      <entry>Reserved</entry>
	    </row>
	    <row>
	      <entry>110</entry>
	      <entry>Reserved</entry>
	    </row>
	    <row>
	      <entry>111</entry>
	      <entry>Reserved</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      </section>
    </section>

    <section>
      <title>Object Type</title>
      <para>
	The Object_Type element is always 16 bits wide, organized into two 8-bit-wide 
	fields: the Major_Type and the Minor_Type.
      </para>
      <table frame='all'>
	<title>Object_Type Element Structure</title>
	<tgroup cols='16' align='center'>
	  <colspec colname='0'/>
	  <colspec colname='1'/>
	  <colspec colname='2'/>
	  <colspec colname='3'/>
	  <colspec colname='4'/>
	  <colspec colname='5'/>
	  <colspec colname='6'/>
	  <colspec colname='7'/>
	  <colspec colname='8'/>
	  <colspec colname='9'/>
	  <colspec colname='10'/>
	  <colspec colname='11'/>
	  <colspec colname='12'/>
	  <colspec colname='13'/>
	  <colspec colname='14'/>
	  <colspec colname='15'/>
	  <thead>
	    <row>
	      <entry namest='0' nameend='15' align='center'>Object_Type</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry namest='0' nameend='7' align='center'>Major Type</entry>
	      <entry namest='8' nameend='15' align='center'>Minor Type</entry>
	    </row>
	    <row>
	      <entry>7</entry>
	      <entry>6</entry>
	      <entry>5</entry>
	      <entry>4</entry>
	      <entry>3</entry>
	      <entry>2</entry>
	      <entry>1</entry>
	      <entry>0</entry>
	      <entry>7</entry>
	      <entry>6</entry>
	      <entry>5</entry>
	      <entry>4</entry>
	      <entry>3</entry>
	      <entry>2</entry>
	      <entry>1</entry>
	      <entry>0</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <para>
	Each different Major_Type value is assigned to a different class of database objects. 
	The following values are defined in this specification:
      </para>
      <table frame='all'>
	<title>Major_Type Values and Meanings</title>
	<tgroup cols='2' align='center'>
	  <thead>
	    <row>
	      <entry>Value</entry>
	      <entry>Object Class</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>0</entry>
	      <entry>Reserved</entry>
	    </row>
	    <row>
	      <entry>1</entry>
	      <entry>BRL-CAD Nongeometry Objects</entry>
	    </row>
	    <row>
	      <entry>2</entry>
	      <entry>BRL-CAD Geometry Objects</entry>
	    </row>
	    <row>
	      <entry>3</entry>
	      <entry>Attribute-Only Objects</entry>
	    </row>
	    <row>
	      <entry>8</entry>
	      <entry>Experimental Binary Objects (Unrecorded Structure) (Minor Type Unspecified)</entry>
	    </row>
	    <row>
	      <entry>9</entry>
	      <entry>Uniform Array Binary Objects, (Type Described in Minor Type)</entry>
	    </row>
	    <row>
	      <entry>10</entry>
	      <entry>MIME_Typed Binary Objects (Attribute "mime_type" Describes Format)</entry>
	    </row>
	    <row>
	      <entry>16-31</entry>
	      <entry>Registered-Type Binary Objects</entry>
	    </row>
	    <row>
	      <entry>128</entry>
	      <entry>First Non-ARL Type Begins Here</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <para>
	The remainder are available for extending the types of objects that may be stored in 
	the database, allowing BRL-CAD users to extend the database for their own particular 
	purposes far beyond what the "attribute" method permits.
      </para>

      <section>
	<title>Major_Type = 0: Reserved</title>
	<para>
	  Major Type 0 is illegal.  The rationale is to provide the library an opportunity to 
	  detect incompletely filled in data structures.
	</para>
      </section>
      
      <section>
	<title>Major_Type = 1: BRL-CAD Nongeometry Objects</title>
	<para>
	  This class of objects is private to librt, concerning all nongeometric objects needed by 
	  the library. For this Major_Type, the following Minor_Type values are defined:
	</para>
	<table frame='all'>
	  <title>Major_Type = 1:  Minor_Type Values and Meanings</title>
	  <tgroup cols='2' align='center'>
	    <thead>
	    <row>
	      <entry>Minor_Type Value</entry>
	      <entry>Object Type</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>0</entry>
	      <entry>Reserved for sanity check</entry>
	    </row>
	    <row>
	      <entry>1</entry>
	      <entry>Combination</entry>
	    </row>
	    <row>
	      <entry>2</entry>
	      <entry>Grip (Nongeometric)</entry>
	    </row>
	    <row>
	      <entry>3</entry>
	      <entry>Joint (Nongeometric)</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <para>
	All other values reserved for future expansion.
      </para>
      <para>
	?????Should "Grip" and "Joint" objects be of this type, or Major_Type = 2?
      </para>
      </section>

      <section>
	<title>Major_Type = 2: BRL-CAD Geometry Objects</title>
	<para>
	  This class of objects is private to librt, concerning all geometric objects needed 
	  by the library. Typically, there will be one xxx/xxx.c module in librt for each minor type. 
	  For this Major_Type, the following Minor_Type values are defined:
	</para>
	<table frame='all'>
	  <title>Major_Type = 2:  Minor_Type Values and Meanings</title>
	  <tgroup cols='2' align='center'>
	    <thead>
	    <row>
	      <entry>Minor_Type Value</entry>
	      <entry>Object Type</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>0</entry>
	      <entry>Reserved for sanity check</entry>
	    </row>
	    <row>
	      <entry>1</entry>
	      <entry>Torus (TOR)</entry>
	    </row>
	    <row>
	      <entry>2</entry>
	      <entry>Truncated General Cone (TGC)</entry>
	    </row>
	    <row>
	      <entry>3</entry>
	      <entry>Ellipsoid (ELL)</entry>
	    </row>
	    <row>
	      <entry>4</entry>
	      <entry>Generalized ARB.  V + 7 vectors</entry>
	    </row>
	    <row>
	      <entry>5</entry>
	      <entry>ARS</entry>
	    </row>
	    <row>
	      <entry>6</entry>
	      <entry>Half-Space (HALF)</entry>
	    </row>
	    <row>
	      <entry>7</entry>
	      <entry>Right Elliptical Cylinder (REC) (TGC special case)</entry>
	    </row>
	    <row>
	      <entry>8</entry>
	      <entry>Polygonal facted object (Polysolid)</entry>
	    </row>
	    <row>
	      <entry>9</entry>
	      <entry>B-Spline Solid</entry>
	    </row>
	    <row>
	      <entry>10</entry>
	      <entry>Sphere (ELL Special Case)</entry>
	    </row>
	    <row>
	      <entry>11</entry>
	      <entry>n-Manifold Geometry (NMG) solid</entry>
	    </row>
	    <row>
	      <entry>12</entry>
	      <entry>Extruded bitmap solid</entry>
	    </row>
	    <row>
	      <entry>13</entry>
	      <entry>Volume (VOL)</entry>
	    </row>
	    <row>
	      <entry>14</entry>
	      <entry>ARB with N faces (ARBN)</entry>
	    </row>
	    <row>
	      <entry>15</entry>
	      <entry>Pipe (wire) solid (PIPE)</entry>
	    </row>
	    <row>
	      <entry>16</entry>
	      <entry>Particle system solid (PART)</entry>
	    </row>
	    <row>
	      <entry>17</entry>
	      <entry>Right Parabolic Cylinder (RPC)</entry>
	    </row>
	    <row>
	      <entry>18</entry>
	      <entry>Right Hyperbolic Cylinder (RHC)</entry>
	    </row>
	    <row>
	      <entry>19</entry>
	      <entry>Elliptical Paraboloid (EPA)</entry>
	    </row>
	    <row>
	      <entry>20</entry>
	      <entry>Elliptical Hyperboloid (EHY)</entry>
	    </row>
	    <row>
	      <entry>21</entry>
	      <entry>Elliptical Torus (ETO)</entry>
	    </row>
	    <row>
	      <entry>22</entry>
	      <entry>Grip Nongeometric</entry>
	    </row>
	    <row>
	      <entry>23</entry>
	      <entry>Joint Nongeometric</entry>
	    </row>
	    <row>
	      <entry>24</entry>
	      <entry>Height Field (HF)</entry>
	    </row>
	    <row>
	      <entry>25</entry>
	      <entry>Displacement Map (DSP)</entry>
	    </row>
	    <row>
	      <entry>26</entry>
	      <entry>2D Sketch (SKETCH)</entry>
	    </row>
	    <row>
	      <entry>27</entry>
	      <entry>Solid of extrusion (EXTRUDE)</entry>
	    </row>
	    <row>
	      <entry>28</entry>
	      <entry>Instanced submodel</entry>
	    </row>
	    <row>
	      <entry>29</entry>
	      <entry>FASTGEN4 CLINE solid</entry>
	    </row>
	    <row>
	      <entry>30</entry>
	      <entry>Bag o' triangles (BOT)</entry>
	    </row>
	    <row>
	      <entry>31</entry>
	      <entry>Combination Record</entry>
	    </row>
	    <row>
	      <entry>32</entry>
	      <entry>Experimental binary</entry>
	    </row>
	    <row>
	      <entry>33</entry>
	      <entry>Uniform-array binary</entry>
	    </row>
	    <row>
	      <entry>34</entry>
	      <entry>MIME-typed binary</entry>
	    </row>
	    <row>
	      <entry>35</entry>
	      <entry>Superquadratic ellipsoid</entry>
	    </row>
	    <row>
	      <entry>36</entry>
	      <entry>Metaball</entry>
	    </row>
	    <row>
	      <entry>37</entry>
	      <entry>Brep object</entry>
	    </row>
	    <row>
	      <entry>38</entry>
	      <entry>Hyperboloid of one sheet (HYP)</entry>
	    </row>
	    <row>
	      <entry>39</entry>
	      <entry>Constraint object</entry>
	    </row>
	    <row>
	      <entry>40</entry>
	      <entry>Solid of revolution</entry>
	    </row>
	    <row>
	      <entry>41</entry>
	      <entry>Collection of points (PNTS)</entry>
	    </row>

	  </tbody>
	</tgroup>
      </table>
      </section>

      <section>
	<title></title>
	<para>
	</para>

      </section>
      <section>
	<title></title>
	<para>
	</para>
      </section>
      <section>
	<title></title>
	<para>
	</para>
      </section>
      <section>
	<title></title>
	<para>
	</para>
      </section>
      <section>
	<title></title>
	<para>
	</para>
      </section>
      <section>
	<title></title>
	<para>
	</para>
      </section>
      <section>
	<title></title>
	<para>
	</para>
      </section>
      <section>
	<title></title>
	<para>
	</para>
      </section>

    </section>

    <section>
      <title>Object Length</title>
      <para>
      </para>
    </section>

    <section>
      <title>Object Name</title>
      <para>
      </para>
    </section>

    <section>
      <title>Object Attributes</title>
      <para>
      </para>
    </section>


  </section>




  <itemizedlist>
    <listitem>
      <para>
      </para>
    </listitem>
    <listitem>
      <para>
      </para>
    </listitem>
  </itemizedlist>




  <section>
    <title>How Objects Are Grouped into a Database</title>
    <para>
      
    </para>
  </section>
  <section>
    <title>Details of BRL-CAD-Specific Nongeometric Database Object Types</title>
    <para>
      
    </para>
  </section>
  <section>
    <title>Details of BRL-CAD-Specific Geometric Database Object Types</title>
    <para>
      
    </para>
  </section>
  <section>
    <title>Extensions for Deferred Implementation</title>
    <para>
      
    </para>
  </section>
  <section>
    <title>Community Feedback on the Proposal</title>
    <para>
      
    </para>
  </section>
  <section>
    <title>Database Library Application Programming Interface (API)</title>
    <para>
      
    </para>
  </section>
 
 </article>
