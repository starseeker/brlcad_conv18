<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="comb">

  <refmeta>
    <refentrytitle>COMB</refentrytitle>
    <manvolnum>nged</manvolnum>
    <refmiscinfo class="source">BRL-CAD</refmiscinfo>
    <refmiscinfo class="manual">BRL-CAD User Commands</refmiscinfo>
  </refmeta>

  <refnamediv xml:id="name">
    <refname>comb</refname>
    <refpurpose>Create and manipulate BRL-CAD combination with the name
    <emphasis>combination_name</emphasis>.
    </refpurpose>
  </refnamediv>

  <!-- body begins here -->
  <refsynopsisdiv xml:id="synopsis">
    <cmdsynopsis sepchar=" ">
      <command>comb</command>
      <group choice="opt" rep="norepeat">
        <arg choice="opt" rep="norepeat">-c</arg>
        <arg choice="opt" rep="norepeat">-r</arg>
      </group>
      <group choice="opt" rep="norepeat">
        <arg choice="opt" rep="norepeat">-w</arg>
        <arg choice="opt" rep="norepeat">-f</arg>
      </group>
      <arg choice="req" rep="norepeat"><replaceable>combination_name</replaceable> </arg>
      <arg choice="opt" rep="repeat"><replaceable>&lt;operator object_name&gt;</replaceable> </arg>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsection xml:id="description"><title>DESCRIPTION</title>

    <para>
       The <command>comb</command> command creates and manipulates <emphasis>BRL-CAD</emphasis>
       combination objects.  For combination creation or appending, <emphasis>operator/object_name</emphasis> pairs
       of boolean operators and object names are parsed into comb tree entries.  (TODO - integrate full
       expression evaluation like that in <command>c</command>.)
    </para>

    <para>
       The following options are recognized:
    </para>

    <variablelist remap="TP">

      <varlistentry>
        <term><option>-c</option></term>
        <listitem>
          <para>
            Ensures that the combination does not have the region flag set.
            Conflicts with <option>-r</option>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-r</option></term>
        <listitem>
          <para>
            Ensures that the combination does have the region flag set.
            Conflicts with <option>-c</option>.
          </para>
        </listitem>
      </varlistentry>

     <varlistentry>
        <term><option>-w</option></term>
        <listitem>
          <para>
            Moves the contents of a combination to a new combination
            and makes that combination the sole child of the original combination.  See the "fixing
            nested regions" example below for an illustration of how this option is used.
            Conflicts with <option>-f</option> and <option>-l</option>.
          </para>
        </listitem>
      </varlistentry>

     <varlistentry>
        <term><option>-f</option></term>
        <listitem>
          <para>
            Flattens a combination that contains only unions into a single top level
            combination with all of the solids unioned into it, and remove all
            combinations that were below the input combination that are not used
            elsewhere in the .g file.  (In essence, the latter behavior prevents
            "orphaned" combinations that are no longer used from showing up as new
            top level objects in the database.)  This feature will not work on any
	    combination containing non-union boolean operations.  The following
	    <command>search</command> command can be used to find combs
	    that are candidates for flattening:
	    <literallayout>
		    <computeroutput>
<prompt>mged&gt;</prompt> <userinput>search -type comb ! -below ( -bool + -or -bool - )</userinput>
		    </computeroutput>
	    </literallayout>
          </para>
          <para>
             Conflicts with <option>-w</option> and <option>-l</option>.
          </para>
        </listitem>
      </varlistentry>


     <varlistentry>
        <term><option>-l</option></term>
        <listitem>
          <para>
            "Lift" a region flag to the top comb, and clear all region flags below
            the comb in the tree.  Like the <option>f</option> option this option
            will work to respect the integrity of other geometry in the database, but
            it is more agressive in the steps it will take and it will operate on trees
            that contain non-union booleans.   The decision logic is as follows:

            <orderedlist>
               <listitem>
                  <para>
                     Check if regions below the current comb are used elsewhere in
                     the .g file.  If they are not, they will simply be converted to combs.
                   </para>
               </listitem>
               <listitem>
                  <para>
                     For regions that are used elsewhere in the .g file, determine if
                     their parent comb (if that comb is not the original comb supplied
                     to the command) is also used elsewhere in the .g file.  If not, the
                     <option>w</option> wrapping behavior is used to produce a non-region
                     equalivent comb, and the parent comb is updated to use that new comb
                     instead of the region.  If one or more parent combs <emphasis>are</emphasis> used elsewhere (i.e. the
                     parent comb cannot be altered without altering other geometry) the
                     command will fail - manual intervention is required to resolve the situation.
                   </para>
               </listitem>

            </orderedlist>

            Conflicts with <option>-w</option> and <option>-f</option>.
          </para>
        </listitem>
      </varlistentry>

     </variablelist>
  </refsection>

  <refsection xml:id="examples"><title>EXAMPLES</title>

    <para>
      This example shows how to use the <command>comb</command> command to create a combination
      according to a given formula.
    </para>
    <example><title>Creating a combination.</title>

      <variablelist>
	<varlistentry>
	  <term><prompt>mged&gt;</prompt> <userinput>comb abc u a u b - a + d</userinput></term>
	  <listitem>
	    <para>Creates a combination named <emphasis>abc</emphasis>.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </example>

    <example><title>Fixing a nested region.</title>

      <variablelist>
	<varlistentry>
		<term>
			Nested regions (a region containing another region in its tree) are generally
			viewed as poor modelling practice.  This example shows how to fix an instance of this nesting with minimal disruption to the model.
		</term>

	 <listitem>
	 <para></para>
	 <para>
           Suppose we have a situation where region2.r is unioned into region1.r, and both
           region1.r and region2.r have the region flag set, as seen in the tree below.
	 </para>

	<literallayout>
      <computeroutput>
<prompt>mged&gt;</prompt> <userinput>tree region1.r</userinput>
region1.r/R
        u region2.r/R
	        u sph.s
        u comb.c/
                u arb.s
      </computeroutput>
      </literallayout>

      <para>
      This geometry has an error in that one
      region is not supposed to be combined into another using boolean operations.
      Further, suppose that one or
      more assemblies use region2.r and expect it to be a region - i.e., region2.r needs
      to remain a region with the same contents.

      To fix this problem without disturbing other geometry using region2.r, first
      make a combination below region2.r using the <option>w</option> flag to <command>comb</command>:
      </para>

      <literallayout>
      <computeroutput>
<prompt>mged&gt;</prompt> <userinput>comb -w region2.r</userinput>
<prompt>mged&gt;</prompt> <userinput>tree region2.r</userinput>
region2.r/R
        u region2.r.c/
                  u sph.s
      </computeroutput>
      </literallayout>

      <para>
        The next step is to adjust the region1.r tree definition to reference the
        non-region combination instead of region2.r:
      </para>

      <literallayout>
      <computeroutput>
<prompt>mged&gt;</prompt> <userinput>set glob_compat_mode 0</userinput>
0
<prompt>mged&gt;</prompt> <userinput>get region1.r tree</userinput>
u {l region2.r} {l comb.c}
<prompt>mged&gt;</prompt> <userinput>adjust region1.r tree {u {l region2.r.c} {l comb.c}}</userinput>
<prompt>mged&gt;</prompt> <userinput>tree region1.r</userinput>
region1.r/R
        u region2.r.c/
                u sph.s
        u comb.c/
                u arb.s
      </computeroutput>
      </literallayout>

      <para>
        Because the tree is manipulated as a Tcl list, we need glob compatibility mode to be
        off on the MGED command line.  Once the tree is re-defined, region1.r no longer has
        region2.r below it, but still defines the same physical volume via region2.r.c.
      </para>

      <para>
        Optionally, the name region2.r.c can be changed to the name region2.c with
        the <command>mvall</command> command:
      </para>

      <literallayout>
      <computeroutput>
<prompt>mged&gt;</prompt> <userinput>mvall region2.r.c region2.c</userinput>
<prompt>mged&gt;</prompt> <userinput>tree region1.r</userinput>
region1.r/R
        u region2.c/
                u sph.s
        u comb.c/
                u arb.s
<prompt>mged&gt;</prompt> <userinput>tree region2.r</userinput>
region2.r/R
        u region2.c/
                u sph.s
      </computeroutput>
      </literallayout>
	  </listitem>
	</varlistentry>
      </variablelist>

    </example>

    <example><title>Flattening a Combination.</title>

      <variablelist>
	<varlistentry>
	  <term>
		  When a combination contains only unioned objects, it can be flattened with the <option>f</option> option.
          </term>

	  <listitem>
		  <para></para>
		  <para>First, create an appropriate example to properly illustrate the option's behavior:</para>
		  <literallayout>
			  <computeroutput>
<prompt>mged&gt;</prompt> <userinput>make sph1.s sph</userinput>
<prompt>mged&gt;</prompt> <userinput>make sph2.s sph</userinput>
<prompt>mged&gt;</prompt> <userinput>comb sph1.c u sph1.s</userinput>
<prompt>mged&gt;</prompt> <userinput>comb sph2.c u sph2.s</userinput>
<prompt>mged&gt;</prompt> <userinput>comb spheres.c u sph1.c u sph2.c</userinput>
<prompt>mged&gt;</prompt> <userinput>comb misc.c u sph2.c</userinput>
<prompt>mged&gt;</prompt> <userinput>tree spheres.c</userinput>
spheres.c/
         u sph1.c/
                 u sph1.s
         u sph2.c/
                 u sph2.s

<prompt>mged&gt;</prompt> <userinput>tree misc.c</userinput>
misc.c/
         u sph2.c/
                 u sph2.s

<prompt>mged&gt;</prompt> <userinput>tops</userinput>
misc.c/               spheres.c
      </computeroutput>
      </literallayout>

      <para>
	      Note that sph2.c is used in both spheres.c and misc.c, but sph1.c is only used in spheres.c
	      In the <command>tops</command> command output, misc.c and spheres.c are the only top level objects.  Targeting spheres.c with the <option>f</option> option:
      </para>

      <literallayout>
      <computeroutput>
<prompt>mged&gt;</prompt> <userinput>comb -f spheres.c</userinput>
<prompt>mged&gt;</prompt> <userinput>tree spheres.c</userinput>
spheres.c/
        u sph1.s
        u sph2.s

<prompt>mged&gt;</prompt> <userinput>tree misc.c</userinput>
misc.c/
         u sph2.c/
                 u sph2.s

<prompt>mged&gt;</prompt> <userinput>tops</userinput>
misc.c/               spheres.c
      </computeroutput>
      </literallayout>

      <para>
	      Notice that while spheres.c has indeed been flattened and no longer has the intermediate combinations over its solids,
	      misc.c is still intact.  Notice also that while sph2.c was preserved, since it is used by misc.c, sph1.c was removed
	      and does not show up in the <command>tops</command> command's output since it was no longer used by any object in the
	      database.
      </para>
	  </listitem>
	</varlistentry>
      </variablelist>

    </example>


  </refsection>

  <refsection xml:id="author"><title>AUTHOR</title><para>BRL-CAD Team</para></refsection>

  <refsection xml:id="bug_reports"><title>BUG REPORTS</title>

    <para>
      Reports of bugs or problems should be submitted via electronic
      mail to &lt;devs@brlcad.org&gt;, or via the "cadbug.sh" script.
    </para>
  </refsection>
</refentry>
