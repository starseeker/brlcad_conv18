<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='boolobj3'>

<!-- '\" Copyright (c) 1996\-1997 Sun Microsystems, Inc.
'\" Contributions from Don Porter, NIST, 2005.  (not subject to US copyright) -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>8.5</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_BooleanObj</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>8.5</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_NewBooleanObj</refname>
<refname>Tcl_SetBooleanObj</refname>
<refname>Tcl_GetBooleanFromObj</refname>
<refpurpose>store/retrieve boolean value in a Tcl_Obj</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>Tcl_Obj</function> *Tcl_NewBooleanObj</funcdef>
<paramdef><parameter>boolValue</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_SetBooleanObj</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>boolValue</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_GetBooleanFromObj</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>boolPtr</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tcl_Interp boolValue in/out -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"int"</entry><entry>"boolValue"</entry><entry>"in"</entry>
<entry>
<para>Integer value to be stored as a boolean value in a Tcl_Obj.</para>
</entry>
</row>
<row><entry>Tcl_Obj</entry><entry>*objPtr</entry><entry>in/out</entry>
<entry>
<para>Points to the Tcl_Obj in which to store, or from which to
retrieve a boolean value.</para>
</entry>
</row>
<row><entry>Tcl_Interp</entry><entry>*interp</entry><entry>in/out</entry>
<entry>
<para>If a boolean value cannot be retrieved,
an error message is left in the interpreter's result object
unless <emphasis remap='I'>interp</emphasis> is NULL.</para>
</entry>
</row>
<row><entry>int</entry><entry>*boolPtr</entry><entry>out</entry>
<entry>
<para>Points to place where <function>Tcl_GetBooleanFromObj</function>
stores the boolean value (0 or 1) obtained from <emphasis remap='I'>objPtr</emphasis>.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>These procedures are used to pass boolean values to and from
Tcl as Tcl_Obj's.  When storing a boolean value into a Tcl_Obj,
any non-zero integer value in <emphasis remap='I'>boolValue</emphasis> is taken to be
the boolean value <literal>1</literal>, and the integer value <literal>0</literal> is
taken to be the boolean value <literal>0</literal>.</para>

<para><emphasis remap='B'>Tcl_NewBooleanObj</emphasis> creates a new Tcl_Obj, stores the boolean
value <emphasis remap='I'>boolValue</emphasis> in it, and returns a pointer to the new Tcl_Obj.
The new Tcl_Obj has reference count of zero.</para>

<para><function>Tcl_SetBooleanObj</function> accepts <emphasis remap='I'>objPtr</emphasis>, a pointer to
an existing Tcl_Obj, and stores in the Tcl_Obj <emphasis remap='I'>*objPtr</emphasis> 
the boolean value <emphasis remap='I'>boolValue</emphasis>.  This is a write operation
on <emphasis remap='I'>*objPtr</emphasis>, so <emphasis remap='I'>objPtr</emphasis> must be unshared.  Attempts to
write to a shared Tcl_Obj will panic.  A successful write
of <emphasis remap='I'>boolValue</emphasis> into <emphasis remap='I'>*objPtr</emphasis> implies the freeing of
any former value stored in <emphasis remap='I'>*objPtr</emphasis>.</para>

<para><function>Tcl_GetBooleanFromObj</function> attempts to retrieve a boolean value
from the value stored in <emphasis remap='I'>*objPtr</emphasis>.
If <emphasis remap='I'>objPtr</emphasis> holds a string value recognized by <emphasis remap='B'>Tcl_GetBoolean</emphasis>,
then the recognized boolean value is written at the address given
by <emphasis remap='I'>boolPtr</emphasis>.  
If <emphasis remap='I'>objPtr</emphasis> holds any value recognized as
a number by Tcl, then if that value is zero a 0 is written at
the address given by <emphasis remap='I'>boolPtr</emphasis> and if that
value is non-zero a 1 is written at the address given by <emphasis remap='I'>boolPtr</emphasis>.
In all cases where a value is written at the address given
by <emphasis remap='I'>boolPtr</emphasis>, <function>Tcl_GetBooleanFromObj</function> returns <emphasis remap='B'>TCL_OK</emphasis>.
If the value of <emphasis remap='I'>objPtr</emphasis> does not meet any of the conditions
above, then <emphasis remap='B'>TCL_ERROR</emphasis> is returned and an error message is 
left in the interpreter's result unless <emphasis remap='I'>interp</emphasis> is NULL.
<function>Tcl_GetBooleanFromObj</function> may also make changes to the internal
fields of <emphasis remap='I'>*objPtr</emphasis> so that future calls to 
<function>Tcl_GetBooleanFromObj</function> on the same <emphasis remap='I'>objPtr</emphasis> can be
performed more efficiently.</para>

<para>Note that the routines <function>Tcl_GetBooleanFromObj</function> and
<emphasis remap='B'>Tcl_GetBoolean</emphasis> are not functional equivalents.
The set of values for which <function>Tcl_GetBooleanFromObj</function>
will return <emphasis remap='B'>TCL_OK</emphasis> is strictly larger than
the set of values for which <emphasis remap='B'>Tcl_GetBoolean</emphasis> will do the same.
For example, the value
<quote>5</quote>
passed to <function>Tcl_GetBooleanFromObj</function>
will lead to a <emphasis remap='B'>TCL_OK</emphasis> return (and the boolean value 1),
while the same value passed to <emphasis remap='B'>Tcl_GetBoolean</emphasis> will lead to
a <emphasis remap='B'>TCL_ERROR</emphasis> return.</para>

</refsect1>

<refsect1 xml:id='see_also'><title>SEE ALSO</title>
<para>Tcl_NewObj, Tcl_IsShared, Tcl_GetBoolean</para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>boolean, object</para>
</refsect1>
</refentry>

