<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='getint3'>

<!-- '\" Copyright (c) 1989\-1993 The Regents of the University of California.
'\" Copyright (c) 1994\-1996 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refmeta>
<refentrytitle>Tcl_GetInt</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='manual'>Tcl</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_GetInt</refname>
<refname>Tcl_GetDouble</refname>
<refname>Tcl_GetBoolean</refname>
<refpurpose>convert from string to integer, double, or boolean</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>int <function>Tcl_GetInt</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>src</parameter></paramdef>
<paramdef><parameter>intPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_GetDouble</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>src</parameter></paramdef>
<paramdef><parameter>doublePtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_GetBoolean</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>src</parameter></paramdef>
<paramdef><parameter>boolPtr</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tcl_Interp *doublePtr out -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tcl_Interp"</entry><entry>"*interp"</entry><entry>"in"</entry>
<entry>
<para>Interpreter to use for error reporting.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*src</entry><entry>in</entry>
<entry>
<para>Textual value to be converted.</para>
</entry>
</row>
<row><entry>int</entry><entry>*intPtr</entry><entry>out</entry>
<entry>
<para>Points to place to store integer value converted from <emphasis remap='I'>src</emphasis>.</para>
</entry>
</row>
<row><entry>double</entry><entry>*doublePtr</entry><entry>out</entry>
<entry>
<para>Points to place to store double-precision floating-point
value converted from <emphasis remap='I'>src</emphasis>.</para>
</entry>
</row>
<row><entry>int</entry><entry>*boolPtr</entry><entry>out</entry>
<entry>
<para>Points to place to store boolean value (0 or 1) converted from <emphasis remap='I'>src</emphasis>.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>These procedures convert from strings to integers or double-precision
floating-point values or booleans (represented as 0- or 1-valued
integers).  Each of the procedures takes a <emphasis remap='I'>src</emphasis> argument,
converts it to an internal form of a particular type, and stores
the converted value at the location indicated by the procedure's
third argument.  If all goes well, each of the procedures returns
<emphasis remap='B'>TCL_OK</emphasis>.  If <emphasis remap='I'>src</emphasis> does not have the proper syntax for the
desired type then <emphasis remap='B'>TCL_ERROR</emphasis> is returned, an error message is left
in the interpreter's result, and nothing is stored at *<emphasis remap='I'>intPtr</emphasis>
or *<emphasis remap='I'>doublePtr</emphasis> or *<emphasis remap='I'>boolPtr</emphasis>.</para>

<para><function>Tcl_GetInt</function> expects <emphasis remap='I'>src</emphasis> to consist of a collection
of integer digits, optionally signed and optionally preceded by
white space.  If the first two characters of <emphasis remap='I'>src</emphasis>
after the optional white space and sign are
<quote>0x</quote>
then <emphasis remap='I'>src</emphasis> is expected to be in hexadecimal form;  otherwise,
if the first such character is
<quote>0</quote>
then <emphasis remap='I'>src</emphasis>
is expected to be in octal form;  otherwise, <emphasis remap='I'>src</emphasis> is
expected to be in decimal form.</para>

<para><function>Tcl_GetDouble</function> expects <emphasis remap='I'>src</emphasis> to consist of a floating-point
number, which is:  white space;  a sign; a sequence of digits;  a
decimal point;  a sequence of digits;  the letter
<quote>e</quote>;
a signed decimal exponent;  and more white space.
Any of the fields may be omitted, except that
the digits either before or after the decimal point must be present
and if the
<quote>e</quote>
is present then it must be followed by the exponent number.</para>

<para><function>Tcl_GetBoolean</function> expects <emphasis remap='I'>src</emphasis> to specify a boolean
value.  If <emphasis remap='I'>src</emphasis> is any of <literal>0</literal>, <emphasis remap='B'>false</emphasis>,
<emphasis remap='B'>no</emphasis>, or <emphasis remap='B'>off</emphasis>, then <function>Tcl_GetBoolean</function> stores a zero
value at <emphasis remap='I'>*boolPtr</emphasis>.
If <emphasis remap='I'>src</emphasis> is any of <literal>1</literal>, <emphasis remap='B'>true</emphasis>, <emphasis remap='B'>yes</emphasis>, or <emphasis remap='B'>on</emphasis>,
then 1 is stored at <emphasis remap='I'>*boolPtr</emphasis>.
Any of these values may be abbreviated, and upper-case spellings
are also acceptable.</para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>boolean, conversion, double, floating-point, integer</para>
</refsect1>
</refentry>

