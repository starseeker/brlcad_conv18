<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='pkgrequire3'>

<!-- '\" Copyright (c) 1996 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>7.5</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_PkgRequire</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>7.5</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_PkgRequire</refname>
<refname>Tcl_PkgRequireEx</refname>
<refname>Tcl_PkgRequireProc</refname>
<refname>Tcl_PkgPresent</refname>
<refname>Tcl_PkgPresentEx</refname>
<refname>Tcl_PkgProvide</refname>
<refname>Tcl_PkgProvideEx</refname>
<refpurpose>package version control</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>const char *<function>Tcl_PkgRequire</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>name</parameter></paramdef>
<paramdef><parameter>version</parameter></paramdef>
<paramdef><parameter>exact</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>const char *<function>Tcl_PkgRequireEx</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>name</parameter></paramdef>
<paramdef><parameter>version</parameter></paramdef>
<paramdef><parameter>exact</parameter></paramdef>
<paramdef><parameter>clientDataPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_PkgRequireProc</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>name</parameter></paramdef>
<paramdef><parameter>objc</parameter></paramdef>
<paramdef><parameter>objv</parameter></paramdef>
<paramdef><parameter>clientDataPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>const char *<function>Tcl_PkgPresent</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>name</parameter></paramdef>
<paramdef><parameter>version</parameter></paramdef>
<paramdef><parameter>exact</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>const char *<function>Tcl_PkgPresentEx</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>name</parameter></paramdef>
<paramdef><parameter>version</parameter></paramdef>
<paramdef><parameter>exact</parameter></paramdef>
<paramdef><parameter>clientDataPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_PkgProvide</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>name</parameter></paramdef>
<paramdef><parameter>version</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_PkgProvideEx</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>name</parameter></paramdef>
<paramdef><parameter>version</parameter></paramdef>
<paramdef><parameter>clientData</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS ClientData clientDataPtr out -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tcl_Interp"</entry><entry>"*interp"</entry><entry>"in"</entry>
<entry>
<para>Interpreter where package is needed or available.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*name</entry><entry>in</entry>
<entry>
<para>Name of package.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*version</entry><entry>in</entry>
<entry>
<para>A version string consisting of one or more decimal numbers
separated by dots.</para>
</entry>
</row>
<row><entry>int</entry><entry>exact</entry><entry>in</entry>
<entry>
<para>Non-zero means that only the particular version specified by
<emphasis remap='I'>version</emphasis> is acceptable.
Zero means that newer versions than <emphasis remap='I'>version</emphasis> are also
acceptable as long as they have the same major version number
as <emphasis remap='I'>version</emphasis>.</para>
</entry>
</row>
<row><entry>ClientData</entry><entry>clientData</entry><entry>in</entry>
<entry>
<para>Arbitrary value to be associated with the package.</para>
</entry>
</row>
<row><entry>ClientData</entry><entry>*clientDataPtr</entry><entry>out</entry>
<entry>
<para>Pointer to place to store the value associated with the matching
package. It is only changed if the pointer is not NULL and the
function completed successfully.</para>
</entry>
</row>
<row><entry>int</entry><entry>objc</entry><entry>in</entry>
<entry>
<para>Number of requirements.</para>
</entry>
</row>
<row><entry>Tcl_Obj*</entry><entry>objv[]</entry><entry>in</entry>
<entry>
<para>Array of requirements.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>These procedures provide C-level interfaces to Tcl's package and
version management facilities.</para>

<para><function>Tcl_PkgRequire</function> is equivalent to the <emphasis remap='B'>package require</emphasis>
command, <function>Tcl_PkgPresent</function> is equivalent to the <emphasis remap='B'>package present</emphasis>
command, and <function>Tcl_PkgProvide</function> is equivalent to the
<emphasis remap='B'>package provide</emphasis> command.</para>

<para>See the documentation for the Tcl commands for details on what these
procedures do.</para>

<para>If <function>Tcl_PkgPresent</function> or <function>Tcl_PkgRequire</function> complete successfully
they return a pointer to the version string for the version of the package
that is provided in the interpreter (which may be different than 
<emphasis remap='I'>version</emphasis>); if an error occurs they return NULL and leave an error 
message in the interpreter's result.</para>

<para><function>Tcl_PkgProvide</function> returns <emphasis remap='B'>TCL_OK</emphasis> if it completes successfully;
if an error occurs it returns <emphasis remap='B'>TCL_ERROR</emphasis> and leaves an error message
in the interpreter's result.</para>

<para><function>Tcl_PkgProvideEx</function>, <function>Tcl_PkgPresentEx</function> and <function>Tcl_PkgRequireEx</function>
allow the setting and retrieving of the client data associated with
the package. In all other respects they are equivalent to the matching
functions.</para>

<para><function>Tcl_PkgRequireProc</function> is the form of <emphasis remap='B'>package require</emphasis> handling
multiple requirements. The other forms are present for backward
compatibility and translate their invocations to this form.</para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>package, present, provide, require, version</para>
</refsect1>
</refentry>

