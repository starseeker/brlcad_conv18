<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='bytearrobj3'>

<!-- '\" Copyright (c) 1997 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>8.1</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_ByteArrayObj</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>8.1</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_NewByteArrayObj</refname>
<refname>Tcl_SetByteArrayObj</refname>
<refname>Tcl_GetByteArrayFromObj</refname>
<refname>Tcl_SetByteArrayLength</refname>
<refpurpose>manipulate Tcl objects as a arrays of bytes </refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>Tcl_Obj</function> *Tcl_NewByteArrayObj</funcdef>
<paramdef><parameter>bytes</parameter></paramdef>
<paramdef><parameter>length</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_SetByteArrayObj</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>bytes</parameter></paramdef>
<paramdef><parameter>length</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>unsigned char *<function>Tcl_GetByteArrayFromObj</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>lengthPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>unsigned char *<function>Tcl_SetByteArrayLength</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>length</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS const unsigned char *lengthPtr in/out -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"const unsigned char"</entry><entry>"*bytes"</entry><entry>"in"</entry>
<entry>
<para>The array of bytes used to initialize or set a byte-array object.</para>
</entry>
</row>
<row><entry>int</entry><entry>length</entry><entry>in</entry>
<entry>
<para>The length of the array of bytes.  It must be &gt;= 0.</para>
</entry>
</row>
<row><entry>Tcl_Obj</entry><entry>*objPtr</entry><entry>in/out</entry>
<entry>
<para>For <function>Tcl_SetByteArrayObj</function>, this points to the object to be converted to
byte-array type.  For <function>Tcl_GetByteArrayFromObj</function> and
<function>Tcl_SetByteArrayLength</function>, this points to the object from which to get
the byte-array value; if <emphasis remap='I'>objPtr</emphasis> does not already point to a byte-array
object, it will be converted to one.</para>
</entry>
</row>
<row><entry>int</entry><entry>*lengthPtr</entry><entry>out</entry>
<entry>
<para>If non-NULL, filled with the length of the array of bytes in the object.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>These procedures are used to create, modify, and read Tcl byte-array objects
from C code.  Byte-array objects are typically used to hold the
results of binary IO operations or data structures created with the
<emphasis remap='B'>binary</emphasis> command.  In Tcl, an array of bytes is not equivalent to a
string.  Conceptually, a string is an array of Unicode characters, while a
byte-array is an array of 8-bit quantities with no implicit meaning.
Accessor functions are provided to get the string representation of a
byte-array or to convert an arbitrary object to a byte-array.  Obtaining the
string representation of a byte-array object (by calling
<emphasis remap='B'>Tcl_GetStringFromObj</emphasis>) produces a properly formed UTF-8 sequence with a
one-to-one mapping between the bytes in the internal representation and the
UTF-8 characters in the string representation.</para>  

<para><emphasis remap='B'>Tcl_NewByteArrayObj</emphasis> and <function>Tcl_SetByteArrayObj</function> will
create a new object of byte-array type or modify an existing object to have a
byte-array type.  Both of these procedures set the object's type to be
byte-array and set the object's internal representation to a copy of the
array of bytes given by <emphasis remap='I'>bytes</emphasis>. <emphasis remap='B'>Tcl_NewByteArrayObj</emphasis> returns a
pointer to a newly allocated object with a reference count of zero.
<function>Tcl_SetByteArrayObj</function> invalidates any old string representation and, if
the object is not already a byte-array object, frees any old internal
representation.</para>

<para><function>Tcl_GetByteArrayFromObj</function> converts a Tcl object to byte-array type and
returns a pointer to the object's new internal representation as an array of
bytes.  The length of this array is stored in <emphasis remap='I'>lengthPtr</emphasis> if
<emphasis remap='I'>lengthPtr</emphasis> is non-NULL.  The storage for the array of bytes is owned by
the object and should not be freed.  The contents of the array may be
modified by the caller only if the object is not shared and the caller
invalidates the string representation.</para>  

<para><function>Tcl_SetByteArrayLength</function> converts the Tcl object to byte-array type
and changes the length of the object's internal representation as an
array of bytes.  If <emphasis remap='I'>length</emphasis> is greater than the space currently
allocated for the array, the array is reallocated to the new length; the
newly allocated bytes at the end of the array have arbitrary values.  If
<emphasis remap='I'>length</emphasis> is less than the space currently allocated for the array,
the length of array is reduced to the new length.  The return value is a
pointer to the object's new array of bytes.</para>  

</refsect1>

<refsect1 xml:id='see_also'><title>SEE ALSO</title>
<para>Tcl_GetStringFromObj, Tcl_NewObj, Tcl_IncrRefCount, Tcl_DecrRefCount</para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>object, byte array, utf, unicode, internationalization</para>
</refsect1>
</refentry>

