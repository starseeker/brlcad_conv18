<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='limit3'>

<!-- '\" Copyright (c) 2004 Donal K. Fellows -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>8.5</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_LimitCheck</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>8.5</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_LimitAddHandler</refname>
<refname>Tcl_LimitCheck</refname>
<refname>Tcl_LimitExceeded</refname>
<refname>Tcl_LimitGetCommands</refname>
<refname>Tcl_LimitGetGranularity</refname>
<refname>Tcl_LimitGetTime</refname>
<refname>Tcl_LimitReady</refname>
<refname>Tcl_LimitRemoveHandler</refname>
<refname>Tcl_LimitSetCommands</refname>
<refname>Tcl_LimitSetGranularity</refname>
<refname>Tcl_LimitSetTime</refname>
<refname>Tcl_LimitTypeEnabled</refname>
<refname>Tcl_LimitTypeExceeded</refname>
<refname>Tcl_LimitTypeReset</refname>
<refname>Tcl_LimitTypeSet</refname>
<refpurpose>manage and check resource limits on interpreters</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>int <function>Tcl_LimitCheck</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_LimitReady</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_LimitExceeded</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_LimitTypeExceeded</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>type</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_LimitTypeEnabled</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>type</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_LimitTypeSet</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>type</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_LimitTypeReset</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>type</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_LimitGetCommands</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_LimitSetCommands</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>commandLimit</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_LimitGetTime</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>timeLimitPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_LimitSetTime</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>timeLimitPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_LimitGetGranularity</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>type</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_LimitSetGranularity</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>type</parameter></paramdef>
<paramdef><parameter>granularity</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_LimitAddHandler</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>type</parameter></paramdef>
<paramdef><parameter>handlerProc</parameter></paramdef>
<paramdef><parameter>clientData</parameter></paramdef>
<paramdef><parameter>deleteProc</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_LimitRemoveHandler</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>type</parameter></paramdef>
<paramdef><parameter>handlerProc</parameter></paramdef>
<paramdef><parameter>clientData</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tcl_LimitHandlerDeleteProc commandLimit in/out -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tcl_Interp"</entry><entry>"*interp"</entry><entry>"in"</entry>
<entry>
<para>Interpreter that the limit being managed applies to or that will have
its limits checked.</para>
</entry>
</row>
<row><entry>int</entry><entry>type</entry><entry>in</entry>
<entry>
<para>The type of limit that the operation refers to.  This must be either
<emphasis remap='B'>TCL_LIMIT_COMMANDS</emphasis> or <emphasis remap='B'>TCL_LIMIT_TIME</emphasis>.</para>
</entry>
</row>
<row><entry>int</entry><entry>commandLimit</entry><entry>in</entry>
<entry>
<para>The maximum number of commands (as reported by <emphasis remap='B'>info cmdcount</emphasis>)
that may be executed in the interpreter.</para>
</entry>
</row>
<row><entry>Tcl_Time</entry><entry>*timeLimitPtr</entry><entry>in/out</entry>
<entry>
<para>A pointer to a structure that will either have the new time limit read
from (<function>Tcl_LimitSetTime</function>) or the current time limit written to
(<function>Tcl_LimitGetTime</function>).</para>
</entry>
</row>
<row><entry>int</entry><entry>granularity</entry><entry>in</entry>
<entry>
<para>Divisor that indicates how often a particular limit should really be
checked.  Must be at least 1.</para>
</entry>
</row>
<row><entry>Tcl_LimitHandlerProc</entry><entry>*handlerProc</entry><entry>in</entry>
<entry>
<para>Function to call when a particular limit is exceeded.  If the
<emphasis remap='I'>handlerProc</emphasis> removes or raises the limit during its processing,
the limited interpreter will be permitted to continue to process after
the handler returns.  Many handlers may be attached to the same
interpreter limit; their order of execution is not defined, and they
must be identified by <emphasis remap='I'>handlerProc</emphasis> and <varname role='parameter'>clientData</varname> when they
are deleted.</para>
</entry>
</row>
<row><entry>ClientData</entry><entry>clientData</entry><entry>in</entry>
<entry>
<para>Arbitrary pointer-sized word used to pass some context to the
<emphasis remap='I'>handlerProc</emphasis> function.</para>
</entry>
</row>
<row><entry>Tcl_LimitHandlerDeleteProc</entry><entry>*deleteProc</entry><entry>in</entry>
<entry>
<para>Function to call whenever a handler is deleted.  May be NULL if the
<varname role='parameter'>clientData</varname> requires no deletion.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>Tcl's interpreter resource limit subsystem allows for close control
over how much computation time a script may use, and is useful for
cases where a program is divided into multiple pieces where some parts
are more trusted than others (e.g. web application servers).</para>

<para>Every interpreter may have a limit on the wall-time for execution, and
a limit on the number of commands that the interpreter may execute.
Since checking of these limits is potentially expensive (especially
the time limit), each limit also has a checking granularity, which is
a divisor for an internal count of the number of points in the core
where a check may be performed (which is immediately before executing
a command and at an unspecified frequency between running commands,
which can happen in empty-bodied <emphasis remap='B'>while</emphasis> loops).</para>

<para>The final component of the limit engine is a callback scheme which
allows for notifications of when a limit has been exceeded.  These
callbacks can just provide logging, or may allocate more resources to
the interpreter to permit it to continue processing longer.</para>

<para>When a limit is exceeded (and the callbacks have run; the order of
execution of the callbacks is unspecified) execution in the limited
interpreter is stopped by raising an error and setting a flag that
prevents the <emphasis remap='B'>catch</emphasis> command in that interpreter from trapping
that error.  It is up to the context that started execution in that
interpreter (typically a master interpreter) to handle the error.</para>
</refsect1>

<refsect1 xml:id='limit_checking_api'><title>LIMIT CHECKING API</title>
<para>To check the resource limits for an interpreter, call
<function>Tcl_LimitCheck</function>, which returns <emphasis remap='B'>TCL_OK</emphasis> if the limit was not
exceeded (after processing callbacks) and <emphasis remap='B'>TCL_ERROR</emphasis> if the limit was
exceeded (in which case an error message is also placed in the
interpreter result).  That function should only be called when
<function>Tcl_LimitReady</function> returns non-zero so that granularity policy is
enforced.  This API is designed to be similar in usage to
<emphasis remap='B'>Tcl_AsyncReady</emphasis> and <emphasis remap='B'>Tcl_AsyncInvoke</emphasis>.</para>

<para>When writing code that may behave like <emphasis remap='B'>catch</emphasis> in respect of
errors, you should only trap an error if <function>Tcl_LimitExceeded</function>
returns zero.  If it returns non-zero, the interpreter is in a
limit-exceeded state and errors should be allowed to propagate to the
calling context.  You can also check whether a particular type of
limit has been exceeded using <function>Tcl_LimitTypeExceeded</function>.</para>
</refsect1>

<refsect1 xml:id='limit_configuration'><title>LIMIT CONFIGURATION</title>
<para>To check whether a limit has been set (but not whether it has actually
been exceeded) on an interpreter, call <function>Tcl_LimitTypeEnabled</function> with
the type of limit you want to check.  To enable a particular limit
call <function>Tcl_LimitTypeSet</function>, and to disable a limit call
<function>Tcl_LimitTypeReset</function>.</para>

<para>The level of a command limit may be set using
<function>Tcl_LimitSetCommands</function>, and retrieved using
<function>Tcl_LimitGetCommands</function>.  Similarly for a time limit with
<function>Tcl_LimitSetTime</function> and <function>Tcl_LimitGetTime</function> respectively, but
with that API the time limit is copied from and to the Tcl_Time
structure that the <emphasis remap='I'>timeLimitPtr</emphasis> argument points to.</para>

<para>The checking granularity for a particular limit may be set using
<function>Tcl_LimitSetGranularity</function> and retrieved using
<function>Tcl_LimitGetGranularity</function>.  Note that granularities must always be
positive.</para>

<refsect2 xml:id='limit_callbacks'><title>LIMIT CALLBACKS</title>

<para>To add a handler callback to be invoked when a limit is exceeded, call
<function>Tcl_LimitAddHandler</function>.  The <emphasis remap='I'>handlerProc</emphasis> argument describes
the function that will actually be called; it should have the
following prototype:</para>

<programlisting remap='CS'>
<funcsynopsis>
<funcprototype>
<funcdef>typedef void <function>Tcl_LimitHandlerProc</function></funcdef>
    <paramdef>ClientData <parameter>clientData</parameter></paramdef>
    <paramdef>Tcl_Interp * <parameter>interp</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>The <varname role='parameter'>clientData</varname> argument to the handler will be whatever is
passed to the <varname role='parameter'>clientData</varname> argument to <function>Tcl_LimitAddHandler</function>,
and the <varname role='parameter'>interp</varname> is the interpreter that had its limit exceeded.</para>

<para>The <emphasis remap='I'>deleteProc</emphasis> argument to <function>Tcl_LimitAddHandler</function> is a
function to call to delete the <varname role='parameter'>clientData</varname> value.  It may be
<emphasis remap='B'>TCL_STATIC</emphasis> or NULL if no deletion action is necessary, or
<emphasis remap='B'>TCL_DYNAMIC</emphasis> if all that is necessary is to free the structure with
<emphasis remap='B'>Tcl_Free</emphasis>.  Otherwise, it should refer to a function with the
following prototype:</para>

<programlisting remap='CS'>
<funcsynopsis>
<funcprototype>
<funcdef>typedef void <function>Tcl_LimitHandlerDeleteProc</function></funcdef>
    <paramdef>ClientData <parameter>clientData</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>A limit handler may be deleted using <function>Tcl_LimitRemoveHandler</function>; the
handler removed will be the first one found (out of the handlers added
with <function>Tcl_LimitAddHandler</function>) with exactly matching <emphasis remap='I'>type</emphasis>,
<emphasis remap='I'>handlerProc</emphasis> and <varname role='parameter'>clientData</varname> arguments.  This function
always invokes the <emphasis remap='I'>deleteProc</emphasis> on the <varname role='parameter'>clientData</varname> (unless
the <emphasis remap='I'>deleteProc</emphasis> was NULL or <emphasis remap='B'>TCL_STATIC</emphasis>).</para>

</refsect2>
</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>interpreter, resource, limit, commands, time, callback</para>
</refsect1>
</refentry>

