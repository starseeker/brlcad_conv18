<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='regconfig3'>

<!-- '\" Copyright (c) 2002 Andreas Kupries &lt;andreas_kupries@users.sourceforge.net&gt; -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES. -->

<!-- '\" RCS: @(#) $Id$ -->
<refentryinfo><date>8.4</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_RegisterConfig</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>8.4</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_RegisterConfig</refname>
<refpurpose>procedures to register embedded configuration information</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>void <function>Tcl_RegisterConfig</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>pkgName</parameter></paramdef>
<paramdef><parameter>configuration</parameter></paramdef>
<paramdef><parameter>valEncoding</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tcl_Interp *configuration -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tcl_Interp"</entry><entry>"*interp"</entry><entry>"in"</entry>
<entry>
<para>Refers to the interpreter the embedded configuration information is
registered for. Must not be NULL.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*pkgName</entry><entry>in</entry>
<entry>
<para>Contains the name of the package registering the embedded
configuration as ASCII string. This means that this information is in
UTF-8 too. Must not be NULL.</para>
</entry>
</row>
<row><entry>Tcl_Config</entry><entry>*configuration</entry><entry>in</entry>
<entry>
<para>Refers to an array of Tcl_Config entries containing the information
embedded in the binary library. Must not be NULL. The end of the array
is signaled by either a key identical to NULL, or a key referring to
the empty string.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*valEncoding</entry><entry>in</entry>
<entry>
<para>Contains the name of the encoding used to store the configuration
values as ASCII string. This means that this information is in UTF-8
too. Must not be NULL.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>The function described here has its base in TIP 59 and provides
extensions with support for the embedding of configuration
information into their binary library and the generation of a
Tcl-level interface for querying this information.</para>

<para>To embed configuration information into their binary library an
extension has to define a non-volatile array of Tcl_Config entries in
one if its source files and then call <function>Tcl_RegisterConfig</function> to
register that information.</para>

<para><function>Tcl_RegisterConfig</function> takes four arguments; first, a reference to
the interpreter we are registering the information with, second, the
name of the package registering its configuration information, third,
a pointer to an array of structures, and fourth a string declaring the
encoding used by the configuration values.</para>

<para>The string <emphasis remap='I'>valEncoding</emphasis> contains the name of an encoding known to
Tcl.  All these names are use only characters in the ASCII subset of
UTF-8 and are thus implicitly in the UTF-8 encoding. It is expected
that keys are legible English text and therefore using the ASCII
subset of UTF-8. In other words, they are expected to be in UTF-8
too. The values associated with the keys can be any string
however. For these the contents of <emphasis remap='I'>valEncoding</emphasis> define which
encoding was used to represent the characters of the strings.</para>

<para>Each element of the <emphasis remap='I'>configuration</emphasis> array refers to two strings
containing the key and the value associated with that key. The end of
the array is signaled by either an empty key or a key identical to
NULL. The function makes <emphasis remap='B'>no</emphasis> copy of the <emphasis remap='I'>configuration</emphasis>
array. This means that the caller has to make sure that the memory
holding this array is never released. This is the meaning behind the
word <emphasis remap='B'>non-volatile</emphasis> used earlier. The easiest way to accomplish
this is to define a global static array of Tcl_Config entries. See the file
<quote>generic/tclPkgConfig.c</quote>
in the sources of the Tcl core for an example.</para>

<para>When called <function>Tcl_RegisterConfig</function> will</para>
<variablelist remap='IP'>
  <varlistentry>
  <term>(1)</term>
  <listitem>
<para>create a namespace having the provided <emphasis remap='I'>pkgName</emphasis>, if not yet
existing.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>(2)</term>
  <listitem>
<para>create the file <command>pkgconfig</command> in that namespace and link it to
the provided information so that the keys from _configuration_ and
their associated values can be retrieved through calls to
<emphasis remap='B'>pkgconfig</emphasis>.</para>
  </listitem>
  </varlistentry>
</variablelist>

<para>The file <command>pkgconfig</command> will provide two subcommands, <emphasis remap='B'>list</emphasis>
and <emphasis remap='B'>get</emphasis>:</para>
  <blockquote remap='RS'>
  <variablelist remap='TP'>
    <varlistentry>
    <term>::<emphasis remap='I'>pkgName</emphasis>::<emphasis remap='B'>pkgconfig</emphasis> list</term>
    <listitem>
<para>Returns a list containing the names of all defined keys.</para>
    </listitem>
    </varlistentry>
    <varlistentry>
    <term>::<emphasis remap='I'>pkgName</emphasis>::<emphasis remap='B'>pkgconfig</emphasis> get <emphasis remap='I'>key</emphasis></term>
    <listitem>
<para>Returns the configuration value associated with the specified
<emphasis remap='I'>key</emphasis>.</para>
    </listitem>
    </varlistentry>
  </variablelist>
  </blockquote> <!-- remap='RE' -->
</refsect1>

<refsect1 xml:id='tcl_config'><title>TCL_CONFIG</title>
<para>The <type>Tcl_Config</type> structure contains the following fields:</para>

<programlisting remap='CS'>
typedef struct Tcl_Config {
    const char* key;
    const char* value;
} Tcl_Config;
</programlisting> <!-- remap='CE'
 No cross references yet.
 .SH "SEE ALSO" -->
</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>embedding, configuration, binary library</para>
</refsect1>
</refentry>

