<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='crtfilehdlr3'>

<!-- '\" Copyright (c) 1990\-1994 The Regents of the University of California.
'\" Copyright (c) 1994\-1997 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>8.0</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_CreateFileHandler</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>8.0</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_CreateFileHandler</refname>
<refname>Tcl_DeleteFileHandler</refname>
<refpurpose>associate procedure callbacks with files or devices (Unix only)</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>Tcl_CreateFileHandler</function></funcdef>
<paramdef><parameter>fd</parameter></paramdef>
<paramdef><parameter>mask</parameter></paramdef>
<paramdef><parameter>proc</parameter></paramdef>
<paramdef><parameter>clientData</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_DeleteFileHandler</function></funcdef>
<paramdef><parameter>fd</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tcl_FileProc clientData -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"int"</entry><entry>"fd"</entry><entry>"in"</entry>
<entry>
<para>Unix file descriptor for an open file or device.</para>
</entry>
</row>
<row><entry>int</entry><entry>mask</entry><entry>in</entry>
<entry>
<para>Conditions under which <emphasis remap='I'>proc</emphasis> should be called:
OR-ed combination of <emphasis remap='B'>TCL_READABLE</emphasis>, <emphasis remap='B'>TCL_WRITABLE</emphasis>,
and <emphasis remap='B'>TCL_EXCEPTION</emphasis>.  May be set to 0 to temporarily disable
a handler.</para>
</entry>
</row>
<row><entry>Tcl_FileProc</entry><entry>*proc</entry><entry>in</entry>
<entry>
<para>Procedure to invoke whenever the file or device indicated
by <emphasis remap='I'>file</emphasis> meets the conditions specified by <varname role='parameter'>mask</varname>.</para>
</entry>
</row>
<row><entry>ClientData</entry><entry>clientData</entry><entry>in</entry>
<entry>
<para>Arbitrary one-word value to pass to <emphasis remap='I'>proc</emphasis>.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para><function>Tcl_CreateFileHandler</function> arranges for <emphasis remap='I'>proc</emphasis> to be
invoked in the future whenever I/O becomes possible on a file
or an exceptional condition exists for the file.  The file
is indicated by <emphasis remap='I'>fd</emphasis>, and the conditions of interest
are indicated by <varname role='parameter'>mask</varname>.  For example, if <varname role='parameter'>mask</varname>
is <emphasis remap='B'>TCL_READABLE</emphasis>, <emphasis remap='I'>proc</emphasis> will be called when
the file is readable.
The callback to <emphasis remap='I'>proc</emphasis> is made by <emphasis remap='B'>Tcl_DoOneEvent</emphasis>, so
<function>Tcl_CreateFileHandler</function> is only useful in programs that dispatch
events through <emphasis remap='B'>Tcl_DoOneEvent</emphasis> or through Tcl commands such
as <emphasis remap='B'>vwait</emphasis>.</para>

<para><emphasis remap='I'>Proc</emphasis> should have arguments and result that match the
type <type>Tcl_FileProc</type>:</para>
<programlisting remap='CS'>
<funcsynopsis>
<funcprototype>
<funcdef>typedef void <function>Tcl_FileProc</function></funcdef>
    <paramdef>ClientData <parameter>clientData</parameter></paramdef>
    <paramdef>int <parameter>mask</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>The <varname role='parameter'>clientData</varname> parameter to <emphasis remap='I'>proc</emphasis> is a copy
of the <varname role='parameter'>clientData</varname>
argument given to <function>Tcl_CreateFileHandler</function> when the callback
was created.  Typically, <varname role='parameter'>clientData</varname> points to a data
structure containing application-specific information about
the file.  <emphasis remap='I'>Mask</emphasis> is an integer mask indicating which
of the requested conditions actually exists for the file;  it
will contain a subset of the bits in the <varname role='parameter'>mask</varname> argument
to <function>Tcl_CreateFileHandler</function>.</para>


<para>There may exist only one handler for a given file at a given time.
If <function>Tcl_CreateFileHandler</function> is called when a handler already
exists for <emphasis remap='I'>fd</emphasis>, then the new callback replaces the information
that was previously recorded.</para>

<para><function>Tcl_DeleteFileHandler</function> may be called to delete the
file handler for <emphasis remap='I'>fd</emphasis>;  if no handler exists for the
file given by <emphasis remap='I'>fd</emphasis> then the procedure has no effect.</para>

<para>The purpose of file handlers is to enable an application to respond to
events while waiting for files to become ready for I/O.  For this to work
correctly, the application may need to use non-blocking I/O operations on
the files for which handlers are declared.  Otherwise the application may
block if it reads or writes too much data; while waiting for the I/O to
complete the application will not be able to service other events. Use
<emphasis remap='B'>Tcl_SetChannelOption</emphasis> with <option>-blocking</option> to set the channel into
blocking or nonblocking mode as required.</para>

<para>Note that these interfaces are only supported by the Unix
implementation of the Tcl notifier.</para>   

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>callback, file, handler</para>
</refsect1>
</refentry>

