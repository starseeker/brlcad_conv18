<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='alloc3'>

<!-- '\" Copyright (c) 1995\-1996 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>7.5</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_Alloc</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>7.5</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_Alloc</refname>
<refname>Tcl_Free</refname>
<refname>Tcl_Realloc</refname>
<refname>Tcl_AttemptAlloc</refname>
<refname>Tcl_AttemptRealloc</refname>
<refname>ckalloc</refname>
<refname>ckfree</refname>
<refname>ckrealloc</refname>
<refname>attemptckalloc</refname>
<refname>attemptckrealloc</refname>
<refpurpose>allocate or free heap memory</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>char *<function>Tcl_Alloc</function></funcdef>
<paramdef><parameter>size</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_Free</function></funcdef>
<paramdef><parameter>ptr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>char *<function>Tcl_Realloc</function></funcdef>
<paramdef><parameter>ptr</parameter></paramdef>
<paramdef><parameter>size</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>char *<function>Tcl_AttemptAlloc</function></funcdef>
<paramdef><parameter>size</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>char *<function>Tcl_AttemptRealloc</function></funcdef>
<paramdef><parameter>ptr</parameter></paramdef>
<paramdef><parameter>size</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>char *<function>ckalloc</function></funcdef>
<paramdef><parameter>size</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>ckfree</function></funcdef>
<paramdef><parameter>ptr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>char *<function>ckrealloc</function></funcdef>
<paramdef><parameter>ptr</parameter></paramdef>
<paramdef><parameter>size</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>char *<function>attemptckalloc</function></funcdef>
<paramdef><parameter>size</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>char *<function>attemptckrealloc</function></funcdef>
<paramdef><parameter>ptr</parameter></paramdef>
<paramdef><parameter>size</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS char *size -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"unsigned int"</entry><entry>"size"</entry><entry>"in"</entry>
<entry>
<para>Size in bytes of the memory block to allocate.</para>
</entry>
</row>
<row><entry>char</entry><entry>*ptr</entry><entry>in</entry>
<entry>
<para>Pointer to memory block to free or realloc.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>These procedures provide a platform and compiler independent interface
for memory allocation.  Programs that need to transfer ownership of
memory blocks between Tcl and other modules should use these routines
rather than the native <function>malloc()</function> and <function>free()</function> routines
provided by the C run-time library.</para>

<para><function>Tcl_Alloc</function> returns a pointer to a block of at least <emphasis remap='I'>size</emphasis>
bytes suitably aligned for any use.</para>

<para><function>Tcl_Free</function> makes the space referred to by <emphasis remap='I'>ptr</emphasis> available for
further allocation.</para>

<para><function>Tcl_Realloc</function> changes the size of the block pointed to by
<emphasis remap='I'>ptr</emphasis> to <emphasis remap='I'>size</emphasis> bytes and returns a pointer to the new block.
The contents will be unchanged up to the lesser of the new and old
sizes.  The returned location may be different from <emphasis remap='I'>ptr</emphasis>.  If
<emphasis remap='I'>ptr</emphasis> is NULL, this is equivalent to calling <function>Tcl_Alloc</function> with
just the <emphasis remap='I'>size</emphasis> argument.</para>

<para><function>Tcl_AttemptAlloc</function> and <function>Tcl_AttemptRealloc</function> are identical in
function to <function>Tcl_Alloc</function> and <function>Tcl_Realloc</function>, except that
<function>Tcl_AttemptAlloc</function> and <function>Tcl_AttemptRealloc</function> will not cause the Tcl
interpreter to <emphasis remap='B'>panic</emphasis> if the memory allocation fails.  If the
allocation fails, these functions will return NULL.  Note that on some
platforms, but not all, attempting to allocate a zero-sized block of
memory will also cause these functions to return NULL.</para>

<para>The procedures <function>ckalloc</function>, <function>ckfree</function>, <function>ckrealloc</function>,
<function>attemptckalloc</function>, and <function>attemptckrealloc</function> are implemented
as macros.  Normally, they are synonyms for the corresponding
procedures documented on this page.  When Tcl and all modules
calling Tcl are compiled with <emphasis remap='B'>TCL_MEM_DEBUG</emphasis> defined, however,
these macros are redefined to be special debugging versions
of these procedures.  To support Tcl's memory debugging within a
module, use the macros rather than direct calls to <function>Tcl_Alloc</function>, etc.</para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>alloc, allocation, free, malloc, memory, realloc, TCL_MEM_DEBUG</para>
</refsect1>
</refentry>

