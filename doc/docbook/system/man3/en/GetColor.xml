<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='getcolor3'>

<!-- '\" Copyright (c) 1990\-1991 The Regents of the University of California.
'\" Copyright (c) 1994\-1998 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>8.1</date></refentryinfo>
<refmeta>
<refentrytitle>Tk_AllocColorFromObj</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>8.1</refmiscinfo>
<refmiscinfo class='source'>Tk</refmiscinfo>
<refmiscinfo class='manual'>Tk Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tk_AllocColorFromObj</refname>
<refname>Tk_GetColor</refname>
<refname>Tk_GetColorFromObj</refname>
<refname>Tk_GetColorByValue</refname>
<refname>Tk_NameOfColor</refname>
<refname>Tk_FreeColorFromObj</refname>
<refname>Tk_FreeColor</refname>
<refpurpose>maintain database of colors</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tk.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>XColor</function> *Tk_AllocColorFromObj</funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>objPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>XColor</function> *Tk_GetColor</funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>name</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>XColor</function> *Tk_GetColorFromObj</funcdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>objPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>XColor</function> *Tk_GetColorByValue</funcdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>prefPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>const char *<function>Tk_NameOfColor</function></funcdef>
<paramdef><parameter>colorPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>GC <function>Tk_GCForColor</function></funcdef>
<paramdef><parameter>colorPtr</parameter></paramdef>
<paramdef><parameter>drawable</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tk_FreeColorFromObj</function></funcdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>objPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tk_FreeColor</function></funcdef>
<paramdef><parameter>colorPtr</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tcl_Interp *colorPtr -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tcl_Interp"</entry><entry>"*interp"</entry><entry>"in"</entry>
<entry>
<para>Interpreter to use for error reporting.</para>
</entry>
</row>
<row><entry>Tk_Window</entry><entry>tkwin</entry><entry>in</entry>
<entry>
<para>Token for window in which color will be used.</para>
</entry>
</row>
<row><entry>Tcl_Obj</entry><entry>*objPtr</entry><entry>in/out</entry>
<entry>
<para>String value describes desired color; internal rep will be
modified to cache pointer to corresponding (XColor *).</para>
</entry>
</row>
<row><entry>char</entry><entry>*name</entry><entry>in</entry>
<entry>
<para>Same as <emphasis remap='I'>objPtr</emphasis> except description of color is passed as a string and
resulting (XColor *) is not cached.</para>
</entry>
</row>
<row><entry>XColor</entry><entry>*prefPtr</entry><entry>in</entry>
<entry>
<para>Indicates red, green, and blue intensities of desired
color.</para>
</entry>
</row>
<row><entry>XColor</entry><entry>*colorPtr</entry><entry>in</entry>
<entry>
<para>Pointer to X color information.  Must have been allocated by previous
call to <emphasis remap='B'>Tk_AllocColorFromObj</emphasis>, <emphasis remap='B'>Tk_GetColor</emphasis> or
<emphasis remap='B'>Tk_GetColorByValue</emphasis>, except when passed to <function>Tk_NameOfColor</function>.</para>
</entry>
</row>
<row><entry>Drawable</entry><entry>drawable</entry><entry>in</entry>
<entry>
<para>Drawable in which the result graphics context will be used.  Must have
same screen and depth as the window for which the color was allocated.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>These procedures manage the colors being used by a Tk application.
They allow colors to be shared whenever possible, so that colormap
space is preserved, and they pick closest available colors when
colormap space is exhausted.</para>

<para>Given a textual description of a color, <emphasis remap='B'>Tk_AllocColorFromObj</emphasis>
locates a pixel value that may be used to render the color
in a particular window.  The desired color is specified with an
object whose string value must have one of the following forms:</para>
<variablelist remap='TP'>
  <varlistentry>
  <term><emphasis remap='I'>colorname</emphasis></term>
  <listitem>
<para>Any of the valid textual names for a color defined in the
server's color database file, such as <emphasis remap='B'>red</emphasis> or <emphasis remap='B'>PeachPuff</emphasis>.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>#</emphasis><emphasis remap='I'>RGB</emphasis></term>
  <term><emphasis remap='B'>#</emphasis><emphasis remap='I'>RRGGBB</emphasis></term>
  <term><emphasis remap='B'>#</emphasis><emphasis remap='I'>RRRGGGBBB</emphasis></term>
  <term><emphasis remap='B'>#</emphasis><emphasis remap='I'>RRRRGGGGBBBB</emphasis></term>
  <listitem>
<para>A numeric specification of the red, green, and blue intensities
to use to display the color.  Each <emphasis remap='I'>R</emphasis>, <emphasis remap='I'>G</emphasis>, or <emphasis remap='I'>B</emphasis>
represents a single hexadecimal digit.  The four forms permit
colors to be specified with 4-bit, 8-bit, 12-bit or 16-bit values.
When fewer than 16 bits are provided for each color, they represent
the most significant bits of the color.  For example, #3a7 is the
same as #3000a0007000.</para>
  </listitem>
  </varlistentry>
</variablelist>

<para><emphasis remap='B'>Tk_AllocColorFromObj</emphasis> returns a pointer to
an XColor structure;  the structure indicates the exact intensities of
the allocated color (which may differ slightly from those requested,
depending on the limitations of the screen) and a pixel value
that may be used to draw with the color in <emphasis remap='I'>tkwin</emphasis>.
If an error occurs in <emphasis remap='B'>Tk_AllocColorFromObj</emphasis> (such as an unknown
color name) then NULL is returned and an error message is stored in
<emphasis remap='I'>interp</emphasis>'s result if <emphasis remap='I'>interp</emphasis> is not NULL.
If the colormap for <emphasis remap='I'>tkwin</emphasis> is full, <emphasis remap='B'>Tk_AllocColorFromObj</emphasis>
will use the closest existing color in the colormap.
<emphasis remap='B'>Tk_AllocColorFromObj</emphasis> caches information about
the return value in <emphasis remap='I'>objPtr</emphasis>, which speeds up future calls to procedures
such as <emphasis remap='B'>Tk_AllocColorFromObj</emphasis> and <emphasis remap='B'>Tk_GetColorFromObj</emphasis>.</para>

<para><emphasis remap='B'>Tk_GetColor</emphasis> is identical to <emphasis remap='B'>Tk_AllocColorFromObj</emphasis> except
that the description of the color is specified with a string instead
of an object.  This prevents <emphasis remap='B'>Tk_GetColor</emphasis> from caching the
return value, so <emphasis remap='B'>Tk_GetColor</emphasis> is less efficient than
<emphasis remap='B'>Tk_AllocColorFromObj</emphasis>.</para>

<para><emphasis remap='B'>Tk_GetColorFromObj</emphasis> returns the token for an existing color, given
the window and description used to create the color.
<emphasis remap='B'>Tk_GetColorFromObj</emphasis> does not actually create the color; the color
must already have been created with a previous call to
<emphasis remap='B'>Tk_AllocColorFromObj</emphasis> or <emphasis remap='B'>Tk_GetColor</emphasis>.  The return
value is cached in <emphasis remap='I'>objPtr</emphasis>, which speeds up
future calls to <emphasis remap='B'>Tk_GetColorFromObj</emphasis> with the same <emphasis remap='I'>objPtr</emphasis>
and <emphasis remap='I'>tkwin</emphasis>.</para>

<para><emphasis remap='B'>Tk_GetColorByValue</emphasis> is similar to <emphasis remap='B'>Tk_GetColor</emphasis> except that
the desired color is indicated with the <emphasis remap='I'>red</emphasis>, <emphasis remap='I'>green</emphasis>, and
<emphasis remap='I'>blue</emphasis> fields of the structure pointed to by <emphasis remap='I'>colorPtr</emphasis>.</para>

<para>This package maintains a database
of all the colors currently in use.
If the same color is requested multiple times from
<emphasis remap='B'>Tk_GetColor</emphasis> or <emphasis remap='B'>Tk_AllocColorFromObj</emphasis> (e.g. by different
windows), or if the 
same intensities are requested multiple times from
<emphasis remap='B'>Tk_GetColorByValue</emphasis>, then existing pixel values will
be re-used.  Re-using an existing pixel avoids any interaction
with the window server, which makes the allocation much more
efficient.  These procedures also provide a portable interface that
works across all platforms.  For this reason, you should generally use
<emphasis remap='B'>Tk_AllocColorFromObj</emphasis>, <emphasis remap='B'>Tk_GetColor</emphasis>, or <emphasis remap='B'>Tk_GetColorByValue</emphasis>
instead of lower level procedures like <emphasis remap='B'>XAllocColor</emphasis>.</para>

<para>Since different calls to this package
may return the same shared
pixel value, callers should never change the color of a pixel
returned by the procedures.
If you need to change a color value dynamically, you should use
<emphasis remap='B'>XAllocColorCells</emphasis> to allocate the pixel value for the color.</para>

<para>The procedure <function>Tk_NameOfColor</function> is roughly the inverse of
<emphasis remap='B'>Tk_GetColor</emphasis>.  If its <emphasis remap='I'>colorPtr</emphasis> argument was created
by <emphasis remap='B'>Tk_AllocColorFromObj</emphasis> or <emphasis remap='B'>Tk_GetColor</emphasis> then the return value
is the string that was used to create the
color.  If <emphasis remap='I'>colorPtr</emphasis> was created by a call to <emphasis remap='B'>Tk_GetColorByValue</emphasis>,
or by any other mechanism, then the return value is a string
that could be passed to <emphasis remap='B'>Tk_GetColor</emphasis> to return the same
color.  Note:  the string returned by <function>Tk_NameOfColor</function> is
only guaranteed to persist until the next call to
<function>Tk_NameOfColor</function>.</para>

<para><function>Tk_GCForColor</function> returns a graphics context whose <emphasis remap='B'>foreground</emphasis>
field is the pixel allocated for <emphasis remap='I'>colorPtr</emphasis> and whose other fields
all have default values.
This provides an easy way to do basic drawing with a color.
The graphics context is cached with the color and will exist only as
long as <emphasis remap='I'>colorPtr</emphasis> exists;  it is freed when the last reference
to <emphasis remap='I'>colorPtr</emphasis> is freed by calling <function>Tk_FreeColor</function>.</para>

<para>When a color is no longer needed <function>Tk_FreeColorFromObj</function> or
<function>Tk_FreeColor</function> should be called to release it.
For <function>Tk_FreeColorFromObj</function> the color to release is specified
with the same information used to create it; for
<function>Tk_FreeColor</function> the color to release is specified
with a pointer to its XColor structure.
There should be exactly one call to <function>Tk_FreeColorFromObj</function>
or <function>Tk_FreeColor</function> for each call to <emphasis remap='B'>Tk_AllocColorFromObj</emphasis>,
<emphasis remap='B'>Tk_GetColor</emphasis>, or <emphasis remap='B'>Tk_GetColorByValue</emphasis>.</para>
</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>color, intensity, object, pixel value</para>
</refsect1>
</refentry>

