<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='configwidg3'>

<!-- '\" Copyright (c) 1990\-1994 The Regents of the University of California.
'\" Copyright (c) 1994\-1996 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>4.1</date></refentryinfo>
<refmeta>
<refentrytitle>Tk_ConfigureWidget</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>4.1</refmiscinfo>
<refmiscinfo class='source'>Tk</refmiscinfo>
<refmiscinfo class='manual'>Tk Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tk_ConfigureWidget</refname>
<refname>Tk_ConfigureInfo</refname>
<refname>Tk_ConfigureValue</refname>
<refname>Tk_FreeOptions</refname>
<refpurpose>process configuration options for widgets</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tk.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>int <function>Tk_ConfigureWidget</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>specs</parameter></paramdef>
<paramdef><parameter>argc</parameter></paramdef>
<paramdef><parameter>argv</parameter></paramdef>
<paramdef><parameter>widgRec</parameter></paramdef>
<paramdef><parameter>flags</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tk_ConfigureInfo</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>specs</parameter></paramdef>
<paramdef><parameter>widgRec</parameter></paramdef>
<paramdef><parameter>argvName</parameter></paramdef>
<paramdef><parameter>flags</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tk_ConfigureValue</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>specs</parameter></paramdef>
<paramdef><parameter>widgRec</parameter></paramdef>
<paramdef><parameter>argvName</parameter></paramdef>
<paramdef><parameter>flags</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tk_FreeOptions</function></funcdef>
<paramdef><parameter>specs</parameter></paramdef>
<paramdef><parameter>widgRec</parameter></paramdef>
<paramdef><parameter>display</parameter></paramdef>
<paramdef><parameter>flags</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tk_ConfigSpec *widgRec in/out -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tcl_Interp"</entry><entry>"*interp"</entry><entry>"in"</entry>
<entry>
<para>Interpreter to use for returning error messages.</para>
</entry>
</row>
<row><entry>Tk_Window</entry><entry>tkwin</entry><entry>in</entry>
<entry>
<para>Window used to represent widget (needed to set up X resources).</para>
</entry>
</row>
<row><entry>Tk_ConfigSpec</entry><entry>*specs</entry><entry>in</entry>
<entry>
<para>Pointer to table specifying legal configuration options for this
widget.</para>
</entry>
</row>
<row><entry>int</entry><entry>argc</entry><entry>in</entry>
<entry>
<para>Number of arguments in <emphasis remap='I'>argv</emphasis>.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>**argv</entry><entry>in</entry>
<entry>
<para>Command-line options for configuring widget.</para>
</entry>
</row>
<row><entry>char</entry><entry>*widgRec</entry><entry>in/out</entry>
<entry>
<para>Points to widget record structure.  Fields in this structure get
modified by <function>Tk_ConfigureWidget</function> to hold configuration information.</para>
</entry>
</row>
<row><entry>int</entry><entry>flags</entry><entry>in</entry>
<entry>
<para>If non-zero, then it specifies an OR-ed combination of flags that
control the processing of configuration information.
<emphasis remap='B'>TK_CONFIG_ARGV_ONLY</emphasis> causes the option database and defaults to be
ignored, and flag bits <emphasis remap='B'>TK_CONFIG_USER_BIT</emphasis> and higher are used to
selectively disable entries in <emphasis remap='I'>specs</emphasis>.</para>
</entry>
</row>
<row><entry>"type name"</entry><entry>type</entry><entry>in</entry>
<entry>
<para>The name of the type of a widget record.</para>
</entry>
</row>
<row><entry>"field name"</entry><entry>field</entry><entry>in</entry>
<entry>
<para>The name of a field in records of type <emphasis remap='I'>type</emphasis>.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*argvName</entry><entry>in</entry>
<entry>
<para>The name used on Tcl command lines to refer to a particular option
(e.g. when creating a widget or invoking the <emphasis remap='B'>configure</emphasis> widget
command).  If non-NULL, then information is returned only for this
option.  If NULL, then information is returned for all available
options.</para>
</entry>
</row>
<row><entry>Display</entry><entry>*display</entry><entry>in</entry>
<entry>
<para>Display containing widget whose record is being freed;  needed in
order to free up resources.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>Note: <function>Tk_ConfigureWidget</function> should be replaced with the new
<emphasis remap='B'>Tcl_Obj</emphasis> based API <emphasis remap='B'>Tk_SetOptions</emphasis>.  The old interface is
retained for backward compatibility.</para>

<para><function>Tk_ConfigureWidget</function> is called to configure various aspects of a
widget, such as colors, fonts, border width, etc.
It is intended as a convenience procedure to reduce the amount
of code that must be written in individual widget managers to
handle configuration information.
It is typically
invoked when widgets are created, and again when the <emphasis remap='B'>configure</emphasis>
command is invoked for a widget.
Although intended primarily for widgets, <function>Tk_ConfigureWidget</function>
can be used in other situations where <emphasis remap='I'>argc-argv</emphasis> information
is to be used to fill in a record structure, such as configuring
graphical elements for a canvas widget or entries of a menu.</para>

<para><function>Tk_ConfigureWidget</function> processes
a table specifying the configuration options that are supported
(<emphasis remap='I'>specs</emphasis>) and a collection of command-line arguments (<emphasis remap='I'>argc</emphasis> and
<emphasis remap='I'>argv</emphasis>) to fill in fields of a record (<varname role='parameter'>widgRec</varname>).
It uses the option database and defaults specified in <emphasis remap='I'>specs</emphasis>
to fill in fields of <varname role='parameter'>widgRec</varname> that are not specified in <emphasis remap='I'>argv</emphasis>.
<function>Tk_ConfigureWidget</function> normally returns the value <emphasis remap='B'>TCL_OK</emphasis>; in this
case it does not modify <varname role='parameter'>interp</varname>.
If an error
occurs then <emphasis remap='B'>TCL_ERROR</emphasis> is returned and <function>Tk_ConfigureWidget</function> will
leave an error message in <emphasis remap='I'>interp-&gt;result</emphasis> in the standard Tcl
fashion.
In the event of an error return, some of the fields of <varname role='parameter'>widgRec</varname>
could already have been set, if configuration information for them
was successfully processed before the error occurred.
The other fields will be set to reasonable initial values so that
<function>Tk_FreeOptions</function> can be called for cleanup.</para>

<para>The <emphasis remap='I'>specs</emphasis> array specifies the kinds of configuration options
expected by the widget.  Each of its entries specifies one configuration
option and has the following structure:</para>
<programlisting remap='CS'>
typedef struct {
    int <emphasis remap='I'>type</emphasis>;
    char *<emphasis remap='I'>argvName</emphasis>;
    char *<emphasis remap='I'>dbName</emphasis>;
    char *<emphasis remap='I'>dbClass</emphasis>;
    char *<emphasis remap='I'>defValue</emphasis>;
    int <varname role='parameter'>offset</varname>;
    int <emphasis remap='I'>specFlags</emphasis>;
    Tk_CustomOption *<emphasis remap='I'>customPtr</emphasis>;
} Tk_ConfigSpec;
</programlisting> <!-- remap='CE' -->
<para>The <emphasis remap='I'>type</emphasis> field indicates what type of configuration option this is
(e.g. <emphasis remap='B'>TK_CONFIG_COLOR</emphasis> for a color value, or <emphasis remap='B'>TK_CONFIG_INT</emphasis> for
an integer value).  The <emphasis remap='I'>type</emphasis> field indicates how to use the
value of the option (more on this below).
The <emphasis remap='I'>argvName</emphasis> field is a string such as
<quote>-font</quote>
or
<quote>-bg</quote>,
which is compared with the values in <emphasis remap='I'>argv</emphasis> (if <emphasis remap='I'>argvName</emphasis> is
NULL it means this is a grouped entry;  see <emphasis remap='B'>GROUPED ENTRIES</emphasis> below).  The
<emphasis remap='I'>dbName</emphasis> and <emphasis remap='I'>dbClass</emphasis> fields are used to look up a value
for this option in the option database.  The <emphasis remap='I'>defValue</emphasis> field
specifies a default value for this configuration option if no
value is specified in either <emphasis remap='I'>argv</emphasis> or the option database.
<emphasis remap='I'>Offset</emphasis> indicates where in <varname role='parameter'>widgRec</varname> to store information
about this option, and <emphasis remap='I'>specFlags</emphasis> contains additional information
to control the processing of this configuration option (see FLAGS
below).
The last field, <emphasis remap='I'>customPtr</emphasis>, is only used if <emphasis remap='I'>type</emphasis> is
<emphasis remap='B'>TK_CONFIG_CUSTOM</emphasis>;  see CUSTOM OPTION TYPES below.</para>

<para><function>Tk_ConfigureWidget</function> first processes <emphasis remap='I'>argv</emphasis> to see which
(if any) configuration options are specified there.  <emphasis remap='I'>Argv</emphasis>
must contain an even number of fields;  the first of each pair
of fields must match the <emphasis remap='I'>argvName</emphasis> of some entry in <emphasis remap='I'>specs</emphasis>
(unique abbreviations are acceptable),
and the second field of the pair contains the value for that
configuration option.  If there are entries in <emphasis remap='I'>spec</emphasis> for which
there were no matching entries in <emphasis remap='I'>argv</emphasis>,
<function>Tk_ConfigureWidget</function> uses the <emphasis remap='I'>dbName</emphasis> and <emphasis remap='I'>dbClass</emphasis>
fields of the <emphasis remap='I'>specs</emphasis> entry to probe the option database;  if
a value is found, then it is used as the value for the option.
Finally, if no entry is found in the option database, the
<emphasis remap='I'>defValue</emphasis> field of the <emphasis remap='I'>specs</emphasis> entry is used as the
value for the configuration option.  If the <emphasis remap='I'>defValue</emphasis> is
NULL, or if the <emphasis remap='B'>TK_CONFIG_DONT_SET_DEFAULT</emphasis> bit is set in
<emphasis remap='I'>flags</emphasis>, then there is no default value and this <emphasis remap='I'>specs</emphasis> entry
will be ignored if no value is specified in <emphasis remap='I'>argv</emphasis> or the
option database.</para>

<para>Once a string value has been determined for a configuration option,
<function>Tk_ConfigureWidget</function> translates the string value into a more useful
form, such as a color if <emphasis remap='I'>type</emphasis> is <emphasis remap='B'>TK_CONFIG_COLOR</emphasis> or an integer
if <emphasis remap='I'>type</emphasis> is <emphasis remap='B'>TK_CONFIG_INT</emphasis>.  This value is then stored in the
record pointed to by <varname role='parameter'>widgRec</varname>.  This record is assumed to
contain information relevant to the manager of the widget;  its exact
type is unknown to <function>Tk_ConfigureWidget</function>.  The <varname role='parameter'>offset</varname> field
of each <emphasis remap='I'>specs</emphasis> entry indicates where in <varname role='parameter'>widgRec</varname> to store
the information about this configuration option.  You should use the
<emphasis remap='B'>Tk_Offset</emphasis> macro to generate <varname role='parameter'>offset</varname> values (see below for
a description of <emphasis remap='B'>Tk_Offset</emphasis>).  The location indicated by
<varname role='parameter'>widgRec</varname> and <varname role='parameter'>offset</varname> will be referred to as the
<quote>target</quote>
in the descriptions below.</para>

<para>The <emphasis remap='I'>type</emphasis> field of each entry in <emphasis remap='I'>specs</emphasis> determines what
to do with the string value of that configuration option.  The
legal values for <emphasis remap='I'>type</emphasis>, and the corresponding actions, are:</para>
<variablelist remap='TP'>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_ACTIVE_CURSOR</emphasis></term>
  <listitem>
<para>The value
must be an ASCII string identifying a cursor in a form
suitable for passing to <emphasis remap='B'>Tk_GetCursor</emphasis>. 
The value is converted to a <emphasis remap='B'>Tk_Cursor</emphasis> by calling
<emphasis remap='B'>Tk_GetCursor</emphasis> and the result is stored in the target.
In addition, the resulting cursor is made the active cursor
for <varname role='parameter'>tkwin</varname> by calling <emphasis remap='B'>XDefineCursor</emphasis>.
If <emphasis remap='B'>TK_CONFIG_NULL_OK</emphasis> is specified in <emphasis remap='I'>specFlags</emphasis> then the value
may be an empty string, in which case the target and <varname role='parameter'>tkwin</varname>'s
active cursor will be set to <emphasis remap='B'>None</emphasis>.
If the previous value of the target
was not <emphasis remap='B'>None</emphasis>, then it is freed by passing it to <emphasis remap='B'>Tk_FreeCursor</emphasis>.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_ANCHOR</emphasis></term>
  <listitem>
<para>The value must be an ASCII string identifying an anchor point in one of the ways
accepted by <emphasis remap='B'>Tk_GetAnchor</emphasis>.
The string is converted to a <emphasis remap='B'>Tk_Anchor</emphasis> by calling
<emphasis remap='B'>Tk_GetAnchor</emphasis> and the result is stored in the target.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_BITMAP</emphasis></term>
  <listitem>
<para>The value must be an ASCII string identifying a bitmap in a form
suitable for passing to <emphasis remap='B'>Tk_GetBitmap</emphasis>.  The value is converted
to a <emphasis remap='B'>Pixmap</emphasis> by calling <emphasis remap='B'>Tk_GetBitmap</emphasis> and the result
is stored in the target.
If <emphasis remap='B'>TK_CONFIG_NULL_OK</emphasis> is specified in <emphasis remap='I'>specFlags</emphasis> then the value
may be an empty string, in which case the target is set to <emphasis remap='B'>None</emphasis>.
If the previous value of the target
was not <emphasis remap='B'>None</emphasis>, then it is freed by passing it to <emphasis remap='B'>Tk_FreeBitmap</emphasis>.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_BOOLEAN</emphasis></term>
  <listitem>
<para>The value must be an ASCII string specifying a boolean value.  Any
of the values
<quote>true</quote>,
<quote>yes</quote>,
<quote>on</quote>,
or
<quote>1</quote>,
or an abbreviation of one of these values, means true;
any of the values
<quote>false</quote>,
<quote>no</quote>,
<quote>off</quote>,
or
<quote>0</quote>,
or an abbreviation of one of these values, means false.
The target is expected to be an integer;  for true values it will
be set to 1 and for false values it will be set to 0.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_BORDER</emphasis></term>
  <listitem>
<para>The value must be an ASCII string identifying a border color in a form
suitable for passing to <emphasis remap='B'>Tk_Get3DBorder</emphasis>.  The value is converted
to a (<emphasis remap='B'>Tk_3DBorder *</emphasis>) by calling <emphasis remap='B'>Tk_Get3DBorder</emphasis> and the result
is stored in the target.
If <emphasis remap='B'>TK_CONFIG_NULL_OK</emphasis> is specified in <emphasis remap='I'>specFlags</emphasis> then the value
may be an empty string, in which case the target will be set to NULL.
If the previous value of the target
was not NULL, then it is freed by passing it to <emphasis remap='B'>Tk_Free3DBorder</emphasis>.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_CAP_STYLE</emphasis></term>
  <listitem>
<para>The value must be
an ASCII string identifying a cap style in one of the ways
accepted by <emphasis remap='B'>Tk_GetCapStyle</emphasis>.
The string is converted to an integer value corresponding
to the cap style by calling
<emphasis remap='B'>Tk_GetCapStyle</emphasis> and the result is stored in the target.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_COLOR</emphasis></term>
  <listitem>
<para>The value must be an ASCII string identifying a color in a form
suitable for passing to <emphasis remap='B'>Tk_GetColor</emphasis>.  The value is converted
to an (<emphasis remap='B'>XColor *</emphasis>) by calling <emphasis remap='B'>Tk_GetColor</emphasis> and the result
is stored in the target.
If <emphasis remap='B'>TK_CONFIG_NULL_OK</emphasis> is specified in <emphasis remap='I'>specFlags</emphasis> then the value
may be an empty string, in which case the target will be set to <emphasis remap='B'>None</emphasis>.
If the previous value of the target
was not NULL, then it is freed by passing it to <emphasis remap='B'>Tk_FreeColor</emphasis>.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_CURSOR</emphasis></term>
  <listitem>
<para>This option is identical to <emphasis remap='B'>TK_CONFIG_ACTIVE_CURSOR</emphasis> except
that the new cursor is not made the active one for <varname role='parameter'>tkwin</varname>.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_CUSTOM</emphasis></term>
  <listitem>
<para>This option allows applications to define new option types.
The <emphasis remap='I'>customPtr</emphasis> field of the entry points to a structure
defining the new option type.
See the section <emphasis remap='B'>CUSTOM OPTION TYPES</emphasis> below for details.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_DOUBLE</emphasis></term>
  <listitem>
<para>The value must be an ASCII floating-point number in
the format accepted by <emphasis remap='B'>strtol</emphasis>.  The string is converted
to a <emphasis remap='B'>double</emphasis> value, and the value is stored in the
target.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_END</emphasis></term>
  <listitem>
<para>Marks the end of the table.  The last entry in <emphasis remap='I'>specs</emphasis>
must have this type;  all of its other fields are ignored and it
will never match any arguments.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_FONT</emphasis></term>
  <listitem>
<para>The value must be an ASCII string identifying a font in a form
suitable for passing to <emphasis remap='B'>Tk_GetFont</emphasis>.  The value is converted
to a <emphasis remap='B'>Tk_Font</emphasis> by calling <emphasis remap='B'>Tk_GetFont</emphasis> and the result
is stored in the target.
If <emphasis remap='B'>TK_CONFIG_NULL_OK</emphasis> is specified in <emphasis remap='I'>specFlags</emphasis> then the value
may be an empty string, in which case the target will be set to NULL.
If the previous value of the target
was not NULL, then it is freed by passing it to <emphasis remap='B'>Tk_FreeFont</emphasis>.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_INT</emphasis></term>
  <listitem>
<para>The value must be an ASCII integer string
in the format accepted by <emphasis remap='B'>strtol</emphasis> (e.g.
<quote>0</quote>
and
<quote>0x</quote>
prefixes may be used to specify octal or hexadecimal
numbers, respectively).  The string is converted to an integer
value and the integer is stored in the target.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_JOIN_STYLE</emphasis></term>
  <listitem>
<para>The value must be
an ASCII string identifying a join style in one of the ways
accepted by <emphasis remap='B'>Tk_GetJoinStyle</emphasis>.
The string is converted to an integer value corresponding
to the join style by calling
<emphasis remap='B'>Tk_GetJoinStyle</emphasis> and the result is stored in the target.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_JUSTIFY</emphasis></term>
  <listitem>
<para>The value must be
an ASCII string identifying a justification method in one of the
ways accepted by <emphasis remap='B'>Tk_GetJustify</emphasis>.
The string is converted to a <emphasis remap='B'>Tk_Justify</emphasis> by calling
<emphasis remap='B'>Tk_GetJustify</emphasis> and the result is stored in the target.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_MM</emphasis></term>
  <listitem>
<para>The value must specify a screen distance in one of the forms acceptable
to <emphasis remap='B'>Tk_GetScreenMM</emphasis>.
The string is converted to double-precision floating-point distance
in millimeters and the value is stored in the target.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_PIXELS</emphasis></term>
  <listitem>
<para>The value must specify screen units in one of the forms acceptable
to <emphasis remap='B'>Tk_GetPixels</emphasis>.
The string is converted to an integer distance in pixels and the
value is stored in the target.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_RELIEF</emphasis></term>
  <listitem>
<para>The value must be an ASCII string identifying a relief in a form
suitable for passing to <emphasis remap='B'>Tk_GetRelief</emphasis>.  The value is converted
to an integer relief value by calling <emphasis remap='B'>Tk_GetRelief</emphasis> and the result
is stored in the target.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_STRING</emphasis></term>
  <listitem>
<para>A copy
of the value is made by allocating memory space with
<emphasis remap='B'>Tcl_Alloc</emphasis> and copying the value into the dynamically-allocated
space.  A pointer to the new string is stored in the target.
If <emphasis remap='B'>TK_CONFIG_NULL_OK</emphasis> is specified in <emphasis remap='I'>specFlags</emphasis> then the value
may be an empty string, in which case the target will be set to NULL.
If the previous value of the target was not NULL, then it is
freed by passing it to <emphasis remap='B'>Tcl_Free</emphasis>.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_SYNONYM</emphasis></term>
  <listitem>
<para>This <emphasis remap='I'>type</emphasis> value identifies special entries in <emphasis remap='I'>specs</emphasis> that
are synonyms for other entries.  If an <emphasis remap='I'>argv</emphasis> value matches the
<emphasis remap='I'>argvName</emphasis> of a <emphasis remap='B'>TK_CONFIG_SYNONYM</emphasis> entry, the entry is not used
directly. Instead, <function>Tk_ConfigureWidget</function> searches <emphasis remap='I'>specs</emphasis>
for another entry whose <emphasis remap='I'>argvName</emphasis> is the same as the <emphasis remap='I'>dbName</emphasis>
field in the <emphasis remap='B'>TK_CONFIG_SYNONYM</emphasis> entry;  this new entry is used just
as if its <emphasis remap='I'>argvName</emphasis> had matched the <emphasis remap='I'>argv</emphasis> value.  The
synonym mechanism allows multiple <emphasis remap='I'>argv</emphasis> values to be used for
a single configuration option, such as
<quote>-background</quote>
and
<quote>-bg</quote>.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_UID</emphasis></term>
  <listitem>
<para>The value is translated to a <emphasis remap='B'>Tk_Uid</emphasis>
(by passing it to <emphasis remap='B'>Tk_GetUid</emphasis>).  The resulting value
is stored in the target.
If <emphasis remap='B'>TK_CONFIG_NULL_OK</emphasis> is specified in <emphasis remap='I'>specFlags</emphasis> and the value
is an empty string then the target will be set to NULL.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_WINDOW</emphasis></term>
  <listitem>
<para>The value must be a window path name.  It is translated to a
<type>Tk_Window</type> token and the token is stored in the target.</para>

  </listitem>
  </varlistentry>
</variablelist>
</refsect1>

<refsect1 xml:id='grouped_entries'><title>GROUPED ENTRIES</title>
<para>In some cases it is useful to generate multiple resources from
a single configuration value.  For example, a color name might
be used both to generate the background color for a widget (using
<emphasis remap='B'>TK_CONFIG_COLOR</emphasis>) and to generate a 3-D border to draw around the
widget (using <emphasis remap='B'>TK_CONFIG_BORDER</emphasis>).  In cases like this it is possible
to specify that several consecutive entries in <emphasis remap='I'>specs</emphasis> are to
be treated as a group.  The first entry is used to determine a value
(using its <emphasis remap='I'>argvName</emphasis>, <emphasis remap='I'>dbName</emphasis>,
<emphasis remap='I'>dbClass</emphasis>, and <emphasis remap='I'>defValue</emphasis> fields).  The value will be processed
several times (one for each entry in the group), generating multiple
different resources and modifying multiple targets within <varname role='parameter'>widgRec</varname>.
Each of the entries after the first must have a NULL value in its
<emphasis remap='I'>argvName</emphasis> field;  this indicates that the entry is to be grouped
with the entry that precedes it.  Only the <emphasis remap='I'>type</emphasis> and <varname role='parameter'>offset</varname>
fields are used from these follow-on entries.</para>

</refsect1>

<refsect1 xml:id='flags'><title>FLAGS</title>
<para>The <emphasis remap='I'>flags</emphasis> argument passed to <function>Tk_ConfigureWidget</function> is used
in conjunction with the <emphasis remap='I'>specFlags</emphasis> fields in the entries of <emphasis remap='I'>specs</emphasis>
to provide additional control over the processing of configuration
options.  These values are used in three different ways as
described below.</para>

<para>First, if the <emphasis remap='I'>flags</emphasis> argument to <function>Tk_ConfigureWidget</function> has
the <emphasis remap='B'>TK_CONFIG_ARGV_ONLY</emphasis> bit set (i.e., <emphasis remap='I'>flags</emphasis> | <emphasis remap='B'>TK_CONFIG_ARGV_ONLY</emphasis> != 0),
then the option database and
<emphasis remap='I'>defValue</emphasis> fields are not used.  In this case, if an entry in
<emphasis remap='I'>specs</emphasis> does not match a field in <emphasis remap='I'>argv</emphasis> then nothing happens:
the corresponding target is not modified.  This feature is useful
when the goal is to modify certain configuration options while
leaving others in their current state, such as when a <emphasis remap='B'>configure</emphasis>
widget command is being processed.</para>

<para>Second, the <emphasis remap='I'>specFlags</emphasis> field of an entry in <emphasis remap='I'>specs</emphasis> may be used
to control the processing of that entry.  Each <emphasis remap='I'>specFlags</emphasis>
field may consists of an OR-ed combination of the following values:</para>
<variablelist remap='TP'>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_COLOR_ONLY</emphasis></term>
  <listitem>
<para>If this bit is set then the entry will only be considered if the
display for <varname role='parameter'>tkwin</varname> has more than one bit plane.  If the display
is monochromatic then this <emphasis remap='I'>specs</emphasis> entry will be ignored.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_MONO_ONLY</emphasis></term>
  <listitem>
<para>If this bit is set then the entry will only be considered if the
display for <varname role='parameter'>tkwin</varname> has exactly one bit plane.  If the display
is not monochromatic then this <emphasis remap='I'>specs</emphasis> entry will be ignored.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_NULL_OK</emphasis></term>
  <listitem>
<para>This bit is only relevant for some types of entries (see the
descriptions of the various entry types above).
If this bit is set, it indicates that an empty string value
for the field is acceptable and if it occurs then the
target should be set to NULL or <emphasis remap='B'>None</emphasis>, depending
on the type of the target.
This flag is typically used to allow a
feature to be turned off entirely, e.g. set a cursor value to
<emphasis remap='B'>None</emphasis> so that a window simply inherits its parent's cursor.
If this bit is not set then empty strings are processed as strings,
which generally results in an error.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_DONT_SET_DEFAULT</emphasis></term>
  <listitem>
<para>If this bit is one, it means that the <emphasis remap='I'>defValue</emphasis> field of the
entry should only be used for returning the default value in
<function>Tk_ConfigureInfo</function>.
In calls to <function>Tk_ConfigureWidget</function> no default will be supplied
for entries with this flag set;  it is assumed that the
caller has already supplied a default value in the target location.
This flag provides a performance optimization where it is expensive
to process the default string:  the client can compute the default
once, save the value, and provide it before calling
<function>Tk_ConfigureWidget</function>.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TK_CONFIG_OPTION_SPECIFIED</emphasis></term>
  <listitem>
<para>This bit is
<!-- .VS 8.5 -->
deprecated. It used to be set and cleared by <function>Tk_ConfigureWidget</function>
so that callers could detect what entries were specified in
<emphasis remap='I'>argv</emphasis>, but it was removed because it was inherently
thread-unsafe. Code that wishes to detect what options were specified
should use <emphasis remap='B'>Tk_SetOptions</emphasis> instead.</para>
<!-- .VE 8.5 -->
  </listitem>
  </varlistentry>
</variablelist>

<para>The <emphasis remap='B'>TK_CONFIG_MONO_ONLY</emphasis> and <emphasis remap='B'>TK_CONFIG_COLOR_ONLY</emphasis> flags are typically
used to specify different default values for
monochrome and color displays.  This is done by creating two
entries in <emphasis remap='I'>specs</emphasis> that are identical except for their
<emphasis remap='I'>defValue</emphasis> and <emphasis remap='I'>specFlags</emphasis> fields.  One entry should have
the value <emphasis remap='B'>TK_CONFIG_MONO_ONLY</emphasis> in its <emphasis remap='I'>specFlags</emphasis> and the
default value for monochrome displays in its <emphasis remap='I'>defValue</emphasis>;  the
other entry should have the value <emphasis remap='B'>TK_CONFIG_COLOR_ONLY</emphasis> in
its <emphasis remap='I'>specFlags</emphasis> and the appropriate <emphasis remap='I'>defValue</emphasis> for
color displays.</para>

<para>Third, it is possible to use <emphasis remap='I'>flags</emphasis> and <emphasis remap='I'>specFlags</emphasis>
together to selectively disable some entries.  This feature is
not needed very often.  It is useful in cases where several
similar kinds of widgets are implemented in one place.  It allows
a single <emphasis remap='I'>specs</emphasis> table to be created with all the configuration
options for all the widget types.  When processing a particular
widget type, only entries relevant to that type will be used.  This
effect is achieved by setting the high-order bits (those in positions
equal to or greater than <emphasis remap='B'>TK_CONFIG_USER_BIT</emphasis>) in <emphasis remap='I'>specFlags</emphasis>
values or in <emphasis remap='I'>flags</emphasis>.  In order for a particular entry in
<emphasis remap='I'>specs</emphasis> to be used, its high-order bits must match exactly
the high-order bits of the <emphasis remap='I'>flags</emphasis> value passed to
<function>Tk_ConfigureWidget</function>.  If a <emphasis remap='I'>specs</emphasis> table is being used
for N different widget types, then N of the high-order bits will
be used.  Each <emphasis remap='I'>specs</emphasis> entry will have one of more of those
bits set in its <emphasis remap='I'>specFlags</emphasis> field to indicate the widget types
for which this entry is valid.  When calling <function>Tk_ConfigureWidget</function>,
<emphasis remap='I'>flags</emphasis> will have a single one of these bits set to select the
entries for the desired widget type.  For a working example of
this feature, see the code in tkButton.c.</para>

</refsect1>

<refsect1 xml:id='tk_offset'><title>TK_OFFSET</title>
<para>The <emphasis remap='B'>Tk_Offset</emphasis> macro is provided as a safe way of generating
the <varname role='parameter'>offset</varname> values for entries in Tk_ConfigSpec structures.
It takes two arguments:  the name of a type of record, and the
name of a field in that record.  It returns the byte offset of
the named field in records of the given type.</para>

</refsect1>

<refsect1 xml:id='tk_configureinfo'><title>TK_CONFIGUREINFO</title>
<para>The <function>Tk_ConfigureInfo</function> procedure may be used to obtain
information about one or all of the options for a given widget.
Given a token for a window (<varname role='parameter'>tkwin</varname>), a table describing the
configuration options for a class of widgets (<emphasis remap='I'>specs</emphasis>), a
pointer to a widget record containing the current information for
a widget (<varname role='parameter'>widgRec</varname>), and a NULL <emphasis remap='I'>argvName</emphasis> argument,
<function>Tk_ConfigureInfo</function> generates a string describing all of the
configuration options for the window.  The string is placed
in <emphasis remap='I'>interp-&gt;result</emphasis>.  Under normal circumstances
it returns <emphasis remap='B'>TCL_OK</emphasis>;  if an error occurs then it returns <emphasis remap='B'>TCL_ERROR</emphasis>
and <emphasis remap='I'>interp-&gt;result</emphasis> contains an error message.</para>

<para>If <emphasis remap='I'>argvName</emphasis> is NULL, then the value left in
<emphasis remap='I'>interp-&gt;result</emphasis> by <function>Tk_ConfigureInfo</function>
consists of a list of one or more entries, each of which describes
one configuration option (i.e. one entry in <emphasis remap='I'>specs</emphasis>).  Each
entry in the list will contain either two or five values.  If the
corresponding entry in <emphasis remap='I'>specs</emphasis> has type <emphasis remap='B'>TK_CONFIG_SYNONYM</emphasis>, then
the list will contain two values:  the <emphasis remap='I'>argvName</emphasis> for the entry
and the <emphasis remap='I'>dbName</emphasis> (synonym name).  Otherwise the list will contain
five values:  <emphasis remap='I'>argvName</emphasis>, <emphasis remap='I'>dbName</emphasis>, <emphasis remap='I'>dbClass</emphasis>, <emphasis remap='I'>defValue</emphasis>,
and current value.  The current value is computed from the appropriate
field of <varname role='parameter'>widgRec</varname> by calling procedures like <emphasis remap='B'>Tk_NameOfColor</emphasis>.</para>

<para>If the <emphasis remap='I'>argvName</emphasis> argument to <function>Tk_ConfigureInfo</function> is non-NULL,
then it indicates a single option, and information is returned only
for that option.  The string placed in <emphasis remap='I'>interp-&gt;result</emphasis> will be
a list containing two or five values as described above;  this will
be identical to the corresponding sublist that would have been returned
if <emphasis remap='I'>argvName</emphasis> had been NULL.</para>

<para>The <emphasis remap='I'>flags</emphasis> argument to <function>Tk_ConfigureInfo</function> is used to restrict
the <emphasis remap='I'>specs</emphasis> entries to consider, just as for <function>Tk_ConfigureWidget</function>.</para>

</refsect1>

<refsect1 xml:id='tk_configurevalue'><title>TK_CONFIGUREVALUE</title>
<para><function>Tk_ConfigureValue</function> takes arguments similar to <function>Tk_ConfigureInfo</function>;
instead of returning a list of values, it just returns the current value
of the option given by <emphasis remap='I'>argvName</emphasis> (<emphasis remap='I'>argvName</emphasis> must not be NULL).
The value is returned in <emphasis remap='I'>interp-&gt;result</emphasis> and <emphasis remap='B'>TCL_OK</emphasis> is
normally returned as the procedure's result.
If an error occurs in <function>Tk_ConfigureValue</function> (e.g., <emphasis remap='I'>argvName</emphasis> is
not a valid option name), <emphasis remap='B'>TCL_ERROR</emphasis> is returned and an error message
is left in <emphasis remap='I'>interp-&gt;result</emphasis>.
This procedure is typically called to implement <emphasis remap='B'>cget</emphasis> widget
commands.</para>

</refsect1>

<refsect1 xml:id='tk_freeoptions'><title>TK_FREEOPTIONS</title>
<para>The <function>Tk_FreeOptions</function> procedure may be invoked during widget cleanup
to release all of the resources associated with configuration options.
It scans through <emphasis remap='I'>specs</emphasis> and for each entry corresponding to a
resource that must be explicitly freed (e.g. those with
type <emphasis remap='B'>TK_CONFIG_COLOR</emphasis>), it frees the resource in the widget record.
If the field in the widget record does not refer to a resource (e.g.
it contains a null pointer) then no resource is freed for that
entry.
After freeing a resource, <function>Tk_FreeOptions</function> sets the
corresponding field of the widget record to null.</para>

</refsect1>

<refsect1 xml:id='custom_option_types'><title>CUSTOM OPTION TYPES</title>
<para>Applications can extend the built-in configuration types with additional
configuration types by writing procedures to parse and print options
of the a type and creating a structure pointing to those procedures:</para>
<programlisting remap='CS'>
<funcsynopsis>
<funcsynopsisinfo>
typedef struct Tk_CustomOption { Tk_OptionParseProc *parseProc; Tk_OptionPrintProc *printProc; ClientData clientData; } Tk_CustomOption; </funcsynopsisinfo>
<funcprototype>
<funcdef>typedef int <function>Tk_OptionParseProc</function></funcdef>
    <paramdef>ClientData <parameter>clientData</parameter></paramdef>
    <paramdef>Tcl_Interp * <parameter>interp</parameter></paramdef>
    <paramdef>Tk_Window <parameter>tkwin</parameter></paramdef>
    <paramdef>char * <parameter>value</parameter></paramdef>
    <paramdef>char * <parameter>widgRec</parameter></paramdef>
    <paramdef>int <parameter>offset</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>typedef char *<function>Tk_OptionPrintProc</function></funcdef>
    <paramdef>ClientData <parameter>clientData</parameter></paramdef>
    <paramdef>Tk_Window <parameter>tkwin</parameter></paramdef>
    <paramdef>char * <parameter>widgRec</parameter></paramdef>
    <paramdef>int <parameter>offset</parameter></paramdef>
    <paramdef>Tcl_FreeProc ** <parameter>freeProcPtr</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>The Tk_CustomOption structure contains three fields, which are pointers
to the two procedures and a <varname role='parameter'>clientData</varname> value to be passed to those
procedures when they are invoked.  The <varname role='parameter'>clientData</varname> value typically
points to a structure containing information that is needed by the
procedures when they are parsing and printing options.</para>

<para>The <emphasis remap='I'>parseProc</emphasis> procedure is invoked by
<function>Tk_ConfigureWidget</function> to parse a string and store the resulting
value in the widget record.
The <varname role='parameter'>clientData</varname> argument is a copy of the <varname role='parameter'>clientData</varname>
field in the Tk_CustomOption structure.
The <varname role='parameter'>interp</varname> argument points to a Tcl interpreter used for
error reporting.  <emphasis remap='I'>Tkwin</emphasis> is a copy of the <varname role='parameter'>tkwin</varname> argument
to <function>Tk_ConfigureWidget</function>.  The <varname role='parameter'>value</varname> argument is a string
describing the value for the option;  it could have been specified
explicitly in the call to <function>Tk_ConfigureWidget</function> or it could
come from the option database or a default.
<emphasis remap='I'>Value</emphasis> will never be a null pointer but it may point to
an empty string.
<emphasis remap='I'>RecordPtr</emphasis> is the same as the <varname role='parameter'>widgRec</varname> argument to
<function>Tk_ConfigureWidget</function>;  it points to the start of the widget
record to modify.
The last argument, <varname role='parameter'>offset</varname>, gives the offset in bytes from the start
of the widget record to the location where the option value is to
be placed.  The procedure should translate the string to whatever
form is appropriate for the option and store the value in the widget
record.  It should normally return <emphasis remap='B'>TCL_OK</emphasis>, but if an error occurs
in translating the string to a value then it should return <emphasis remap='B'>TCL_ERROR</emphasis>
and store an error message in <emphasis remap='I'>interp-&gt;result</emphasis>.</para>

<para>The <emphasis remap='I'>printProc</emphasis> procedure is called
by <function>Tk_ConfigureInfo</function> to produce a string value describing an
existing option.
Its <varname role='parameter'>clientData</varname>, <varname role='parameter'>tkwin</varname>, <varname role='parameter'>widgRec</varname>, and <varname role='parameter'>offset</varname>
arguments all have the same meaning as for Tk_OptionParseProc
procedures.
The <emphasis remap='I'>printProc</emphasis> procedure should examine the option whose value
is stored at <varname role='parameter'>offset</varname> in <varname role='parameter'>widgRec</varname>, produce a string describing
that option, and return a pointer to the string.
If the string is stored in dynamically-allocated memory, then
the procedure must set <emphasis remap='I'>*freeProcPtr</emphasis> to the address of
a procedure to call to free the string's memory;  <function>Tk_ConfigureInfo</function>
will call this procedure when it is finished with the string.
If the result string is stored in static memory then <emphasis remap='I'>printProc</emphasis>
need not do anything with the <varname role='parameter'>freeProcPtr</varname> argument.</para>

<para>Once <emphasis remap='I'>parseProc</emphasis> and <emphasis remap='I'>printProc</emphasis> have been defined and a
Tk_CustomOption structure has been created for them, options of this
new type may be manipulated with Tk_ConfigSpec entries whose <emphasis remap='I'>type</emphasis>
fields are <emphasis remap='B'>TK_CONFIG_CUSTOM</emphasis> and whose <emphasis remap='I'>customPtr</emphasis> fields point
to the Tk_CustomOption structure.</para>

</refsect1>

<refsect1 xml:id='examples'><title>EXAMPLES</title>
<para>Although the explanation of <function>Tk_ConfigureWidget</function> is fairly
complicated, its actual use is pretty straightforward.
The easiest way to get started is to copy the code
from an existing widget.
The library implementation of frames
(tkFrame.c) has a simple configuration table, and the library
implementation of buttons (tkButton.c) has a much more complex
table that uses many of the fancy <emphasis remap='I'>specFlags</emphasis> mechanisms.</para>

</refsect1>

<refsect1 xml:id='see_also'><title>SEE ALSO</title>
<para>Tk_SetO<citerefentry><refentrytitle>ptions</refentrytitle><manvolnum>3</manvolnum></citerefentry></para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>anchor, bitmap, boolean, border, cap style, color, configuration options,
cursor, custom, double, font, integer, join style, justify, millimeters,
pixels, relief, synonym, uid</para>
</refsect1>
</refentry>

