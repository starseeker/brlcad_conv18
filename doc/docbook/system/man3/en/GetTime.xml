<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='gettime3'>

<!-- '\" Copyright (c) 2001 by Kevin B. Kenny &lt;kennykb@acm.org&gt;. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>8.4</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_GetTime</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>8.4</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_GetTime</refname>
<refname>Tcl_SetTimeProc</refname>
<refname>Tcl_QueryTimeProc</refname>
<refpurpose>get date and time</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>Tcl_GetTime</function></funcdef>
<paramdef><parameter>timePtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_SetTimeProc</function></funcdef>
<paramdef><parameter>getProc</parameter></paramdef>
<paramdef><parameter>scaleProc</parameter></paramdef>
<paramdef><parameter>clientData</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_QueryTimeProc</function></funcdef>
<paramdef><parameter>getProcPtr</parameter></paramdef>
<paramdef><parameter>scaleProcPtr</parameter></paramdef>
<paramdef><parameter>clientDataPtr</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tcl_Time * timePtr out -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tcl_Time *"</entry><entry>"timePtr"</entry><entry>"out"</entry>
<entry>
<para>Points to memory in which to store the date and time information.</para>
<!-- .AS Tcl_GetTimeProc * getProc in -->
</entry>
</row>
<row><entry>"Tcl_GetTimeProc *"</entry><entry>getProc</entry><entry>in</entry>
<entry>
<para>Pointer to handler function replacing <function>Tcl_GetTime</function>'s access to the OS.</para>
<!-- .AS Tcl_ScaleTimeProc * scaleProc in -->
</entry>
</row>
<row><entry>"Tcl_ScaleTimeProc *"</entry><entry>scaleProc</entry><entry>in</entry>
<entry>
<para>Pointer to handler function for the conversion of time delays in the
virtual domain to real-time.</para>
<!-- .AS ClientData * clientData in -->
</entry>
</row>
<row><entry>"ClientData *"</entry><entry>clientData</entry><entry>in</entry>
<entry>
<para>Value passed through to the two handler functions.</para>
<!-- .AS Tcl_GetTimeProc ** getProcPtr inout -->
</entry>
</row>
<row><entry>"Tcl_GetTimeProc **"</entry><entry>getProcPtr</entry><entry>inout</entry>
<entry>
<para>Pointer to place the currently registered get handler function into.</para>
<!-- .AS Tcl_ScaleTimeProc ** scaleProcPtr inout -->
</entry>
</row>
<row><entry>"Tcl_ScaleTimeProc **"</entry><entry>scaleProcPtr</entry><entry>inout</entry>
<entry>
<para>Pointer to place the currently registered scale handler function into.</para>
<!-- .AS ClientData ** clientDataPtr inout -->
</entry>
</row>
<row><entry>"ClientData **"</entry><entry>clientDataPtr</entry><entry>inout</entry>
<entry>
<para>Pointer to place the currently registered pass-through value into.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>The <function>Tcl_GetTime</function> function retrieves the current time as a
<emphasis remap='I'>Tcl_Time</emphasis> structure in memory the caller provides.  This
structure has the following definition:</para>
<programlisting remap='CS'>
typedef struct Tcl_Time {
    long sec;
    long usec;
} Tcl_Time;
</programlisting> <!-- remap='CE' -->

<para>On return, the <emphasis remap='I'>sec</emphasis> member of the structure is filled in with the
number of seconds that have elapsed since the <emphasis remap='I'>epoch:</emphasis> the epoch
is the point in time of 00:00 UTC, 1 January 1970.  This number does
<emphasis remap='I'>not</emphasis> count leap seconds - an interval of one day advances it by
86400 seconds regardless of whether a leap second has been inserted.</para>

<para>The <emphasis remap='I'>usec</emphasis> member of the structure is filled in with the number of
microseconds that have elapsed since the start of the second
designated by <emphasis remap='I'>sec</emphasis>.  The Tcl library makes every effort to keep
this number as precise as possible, subject to the limitations of the
computer system.  On multiprocessor variants of Windows, this number
may be limited to the 10- or 20-ms granularity of the system clock.
(On single-processor Windows systems, the <emphasis remap='I'>usec</emphasis> field is derived
from a performance counter and is highly precise.)</para>

<para>The <emphasis remap='B'>Tcl_SetTime</emphasis> function registers two related handler functions
with the core. The first handler function is a replacement for
<function>Tcl_GetTime</function>, or rather the OS access made by
<function>Tcl_GetTime</function>. The other handler function is used by the Tcl
notifier to convert wait/block times from the virtual domain into real
time.</para>

<para>The <emphasis remap='B'>Tcl_QueryTime</emphasis> function returns the currently registered
handler functions. If no external handlers were set then this will
return the standard handlers accessing and processing the native time
of the OS. The arguments to the function are allowed to be NULL; and
any argument which is NULL is ignored and not set.</para>

<para>Any handler pair specified has to return data which is consistent
between them. In other words, setting one handler of the pair to
something assuming a 10-times slowdown, and the other handler of the
pair to something assuming a two-times slowdown is wrong and not
allowed.</para>

<para>The set handler functions are allowed to run the delivered time
backwards, however this should be avoided. We have to allow it as the
native time can run backwards as the user can fiddle with the system
time one way or other. Note that the insertion of the hooks will not
change the behaviour of the Tcl core with regard to this situation,
i.e. the existing behaviour is retained.</para>
</refsect1>

<refsect1 xml:id='see_also'><title>SEE ALSO</title>
<para>clock</para>
</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>date, time</para>
</refsect1>
</refentry>

