<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='stringobj3'>

<!-- '\" Copyright (c) 1994\-1997 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>8.1</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_StringObj</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>8.1</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_NewStringObj</refname>
<refname>Tcl_NewUnicodeObj</refname>
<refname>Tcl_SetStringObj</refname>
<refname>Tcl_SetUnicodeObj</refname>
<refname>Tcl_GetStringFromObj</refname>
<refname>Tcl_GetString</refname>
<refname>Tcl_GetUnicodeFromObj</refname>
<refname>Tcl_GetUnicode</refname>
<refname>Tcl_GetUniChar</refname>
<refname>Tcl_GetCharLength</refname>
<refname>Tcl_GetRange</refname>
<refname>Tcl_AppendToObj</refname>
<refname>Tcl_AppendUnicodeToObj</refname>
<refname>Tcl_AppendObjToObj</refname>
<refname>Tcl_AppendStringsToObj</refname>
<refname>Tcl_AppendStringsToObjVA</refname>
<refname>Tcl_AppendLimitedToObj</refname>
<refname>Tcl_Format</refname>
<refname>Tcl_AppendFormatToObj</refname>
<refname>Tcl_ObjPrintf</refname>
<refname>Tcl_AppendPrintfToObj</refname>
<refname>Tcl_SetObjLength</refname>
<refname>Tcl_AttemptSetObjLength</refname>
<refname>Tcl_ConcatObj</refname>
<refpurpose>manipulate Tcl objects as strings</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>Tcl_Obj</function> *Tcl_NewStringObj</funcdef>
<paramdef><parameter>bytes</parameter></paramdef>
<paramdef><parameter>length</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_Obj</function> *Tcl_NewUnicodeObj</funcdef>
<paramdef><parameter>unicode</parameter></paramdef>
<paramdef><parameter>numChars</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_SetStringObj</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>bytes</parameter></paramdef>
<paramdef><parameter>length</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_SetUnicodeObj</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>unicode</parameter></paramdef>
<paramdef><parameter>numChars</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>char *<function>Tcl_GetStringFromObj</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>lengthPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>char *<function>Tcl_GetString</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_UniChar</function> *Tcl_GetUnicodeFromObj</funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>lengthPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_UniChar</function> *Tcl_GetUnicode</funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>Tcl_UniChar <function>Tcl_GetUniChar</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>index</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_GetCharLength</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_Obj</function> *Tcl_GetRange</funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>first</parameter></paramdef>
<paramdef><parameter>last</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_AppendToObj</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>bytes</parameter></paramdef>
<paramdef><parameter>length</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_AppendUnicodeToObj</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>unicode</parameter></paramdef>
<paramdef><parameter>numChars</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_AppendObjToObj</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>appendObjPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_AppendStringsToObj</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>string</parameter></paramdef>
<paramdef><parameter>string</parameter></paramdef>
<paramdef><parameter>... ( char *) NULL</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_AppendStringsToObjVA</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>argList</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_AppendLimitedToObj</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>bytes</parameter></paramdef>
<paramdef><parameter>length</parameter></paramdef>
<paramdef><parameter>limit</parameter></paramdef>
<paramdef><parameter>ellipsis</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_Obj</function> *Tcl_Format</funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>format</parameter></paramdef>
<paramdef><parameter>objc</parameter></paramdef>
<paramdef><parameter>objv</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_AppendFormatToObj</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>format</parameter></paramdef>
<paramdef><parameter>objc</parameter></paramdef>
<paramdef><parameter>objv</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_Obj</function> *Tcl_ObjPrintf</funcdef>
<paramdef><parameter>format</parameter></paramdef>
<paramdef><parameter>...</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_AppendPrintfToObj</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>format</parameter></paramdef>
<paramdef><parameter>...</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_SetObjLength</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>newLength</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_AttemptSetObjLength</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>newLength</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_Obj</function> *Tcl_ConcatObj</funcdef>
<paramdef><parameter>objc</parameter></paramdef>
<paramdef><parameter>objv</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS const Tcl_UniChar *appendObjPtr in/out -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"const char"</entry><entry>"*bytes"</entry><entry>"in"</entry>
<entry>
<para>Points to the first byte of an array of UTF-8-encoded bytes
used to set or append to a string object.
This byte array may contain embedded null characters
unless <emphasis remap='I'>numChars</emphasis> is negative.  (Applications needing null bytes
should represent them as the two-byte sequence <emphasis remap='I'>\700\600</emphasis>, use
<emphasis remap='B'>Tcl_ExternalToUtf</emphasis> to convert, or <emphasis remap='B'>Tcl_NewByteArrayObj</emphasis> if
the string is a collection of uninterpreted bytes.)</para>
</entry>
</row>
<row><entry>int</entry><entry>length</entry><entry>in</entry>
<entry>
<para>The number of bytes to copy from <emphasis remap='I'>bytes</emphasis> when
initializing, setting, or appending to a string object.
If negative, all bytes up to the first null are used.</para>
</entry>
</row>
<row><entry>"const Tcl_UniChar"</entry><entry>*unicode</entry><entry>in</entry>
<entry>
<para>Points to the first byte of an array of Unicode characters
used to set or append to a string object.
This byte array may contain embedded null characters
unless <emphasis remap='I'>numChars</emphasis> is negative.</para>
</entry>
</row>
<row><entry>int</entry><entry>numChars</entry><entry>in</entry>
<entry>
<para>The number of Unicode characters to copy from <emphasis remap='I'>unicode</emphasis> when
initializing, setting, or appending to a string object.
If negative, all characters up to the first null character are used.</para>
</entry>
</row>
<row><entry>int</entry><entry>index</entry><entry>in</entry>
<entry>
<para>The index of the Unicode character to return.</para>
</entry>
</row>
<row><entry>int</entry><entry>first</entry><entry>in</entry>
<entry>
<para>The index of the first Unicode character in the Unicode range to be
returned as a new object.</para>
</entry>
</row>
<row><entry>int</entry><entry>last</entry><entry>in</entry>
<entry>
<para>The index of the last Unicode character in the Unicode range to be
returned as a new object.</para>
</entry>
</row>
<row><entry>Tcl_Obj</entry><entry>*objPtr</entry><entry>in/out</entry>
<entry>
<para>Points to an object to manipulate.</para>
</entry>
</row>
<row><entry>Tcl_Obj</entry><entry>*appendObjPtr</entry><entry>in</entry>
<entry>
<para>The object to append to <emphasis remap='I'>objPtr</emphasis> in <function>Tcl_AppendObjToObj</function>.</para>
</entry>
</row>
<row><entry>int</entry><entry>*lengthPtr</entry><entry>out</entry>
<entry>
<para>If non-NULL, the location where <function>Tcl_GetStringFromObj</function> will store
the length of an object's string representation.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*string</entry><entry>in</entry>
<entry>
<para>Null-terminated string value to append to <emphasis remap='I'>objPtr</emphasis>.</para>
</entry>
</row>
<row><entry>va_list</entry><entry>argList</entry><entry>in</entry>
<entry>
<para>An argument list which must have been initialised using
<emphasis remap='B'>va_start</emphasis>, and cleared using <emphasis remap='B'>va_end</emphasis>.</para>
</entry>
</row>
<row><entry>int</entry><entry>limit</entry><entry>in</entry>
<entry>
<para>Maximum number of bytes to be appended.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*ellipsis</entry><entry>in</entry>
<entry>
<para>Suffix to append when the limit leads to string truncation.
If NULL is passed then the suffix "..." is used.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*format</entry><entry>in</entry>
<entry>
<para>Format control string including % conversion specifiers.</para>
</entry>
</row>
<row><entry>int</entry><entry>objc</entry><entry>in</entry>
<entry>
<para>The number of elements to format or concatenate.</para>
</entry>
</row>
<row><entry>Tcl_Obj</entry><entry>*objv[]</entry><entry>in</entry>
<entry>
<para>The array of objects to format or concatenate.</para>
</entry>
</row>
<row><entry>int</entry><entry>newLength</entry><entry>in</entry>
<entry>
<para>New length for the string value of <emphasis remap='I'>objPtr</emphasis>, not including the
final null character.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>The procedures described in this manual entry allow Tcl objects to
be manipulated as string values.  They use the internal representation
of the object to store additional information to make the string
manipulations more efficient.  In particular, they make a series of
append operations efficient by allocating extra storage space for the
string so that it does not have to be copied for each append.
Also, indexing and length computations are optimized because the
Unicode string representation is calculated and cached as needed.
When using the <emphasis remap='B'>Tcl_Append*</emphasis> family of functions where the
interpreter's result is the object being appended to, it is important
to call Tcl_ResetResult first to ensure you are not unintentionally
appending to existing data in the result object.</para>

<para><function>Tcl_NewStringObj</function> and <function>Tcl_SetStringObj</function> create a new object
or modify an existing object to hold a copy of the string given by
<emphasis remap='I'>bytes</emphasis> and <emphasis remap='I'>length</emphasis>.  <emphasis remap='B'>Tcl_NewUnicodeObj</emphasis> and
<function>Tcl_SetUnicodeObj</function> create a new object or modify an existing
object to hold a copy of the Unicode string given by <emphasis remap='I'>unicode</emphasis> and
<emphasis remap='I'>numChars</emphasis>.  <function>Tcl_NewStringObj</function> and <emphasis remap='B'>Tcl_NewUnicodeObj</emphasis>
return a pointer to a newly created object with reference count zero.
All four procedures set the object to hold a copy of the specified
string.  <function>Tcl_SetStringObj</function> and <function>Tcl_SetUnicodeObj</function> free any
old string representation as well as any old internal representation
of the object.</para>

<para><function>Tcl_GetStringFromObj</function> and <function>Tcl_GetString</function> return an object's
string representation.  This is given by the returned byte pointer and
(for <function>Tcl_GetStringFromObj</function>) length, which is stored in
<emphasis remap='I'>lengthPtr</emphasis> if it is non-NULL.  If the object's UTF string
representation is invalid (its byte pointer is NULL), the string
representation is regenerated from the object's internal
representation.  The storage referenced by the returned byte pointer
is owned by the object manager.  It is passed back as a writable
pointer so that extension author creating their own <emphasis remap='B'>Tcl_ObjType</emphasis>
will be able to modify the string representation within the
<emphasis remap='B'>Tcl_UpdateStringProc</emphasis> of their <emphasis remap='B'>Tcl_ObjType</emphasis>.  Except for that
limited purpose, the pointer returned by <function>Tcl_GetStringFromObj</function>
or <function>Tcl_GetString</function> should be treated as read-only.  It is
recommended that this pointer be assigned to a (const char *) variable.
Even in the limited situations where writing to this pointer is
acceptable, one should take care to respect the copy-on-write
semantics required by <type>Tcl_Obj</type>'s, with appropriate calls
to <emphasis remap='B'>Tcl_IsShared</emphasis> and <emphasis remap='B'>Tcl_DuplicateObj</emphasis> prior to any
in-place modification of the string representation.
The procedure <function>Tcl_GetString</function> is used in the common case
where the caller does not need the length of the string
representation.</para>

<para><emphasis remap='B'>Tcl_GetUnicodeFromObj</emphasis> and <emphasis remap='B'>Tcl_GetUnicode</emphasis> return an object's
value as a Unicode string.  This is given by the returned pointer and
(for <emphasis remap='B'>Tcl_GetUnicodeFromObj</emphasis>) length, which is stored in
<emphasis remap='I'>lengthPtr</emphasis> if it is non-NULL.  The storage referenced by the returned
byte pointer is owned by the object manager and should not be modified by
the caller.  The procedure <emphasis remap='B'>Tcl_GetUnicode</emphasis> is used in the common case
where the caller does not need the length of the unicode string
representation.</para>

<para><function>Tcl_GetUniChar</function> returns the <emphasis remap='I'>index</emphasis>'th character in the
object's Unicode representation.</para>

<para><emphasis remap='B'>Tcl_GetRange</emphasis> returns a newly created object comprised of the
characters between <emphasis remap='I'>first</emphasis> and <emphasis remap='I'>last</emphasis> (inclusive) in the
object's Unicode representation.  If the object's Unicode
representation is invalid, the Unicode representation is regenerated
from the object's string representation.</para>

<para><function>Tcl_GetCharLength</function> returns the number of characters (as opposed
to bytes) in the string object.</para>

<para><function>Tcl_AppendToObj</function> appends the data given by <emphasis remap='I'>bytes</emphasis> and
<emphasis remap='I'>length</emphasis> to the string representation of the object specified by
<emphasis remap='I'>objPtr</emphasis>.  If the object has an invalid string representation,
then an attempt is made to convert <emphasis remap='I'>bytes</emphasis> is to the Unicode
format.  If the conversion is successful, then the converted form of
<emphasis remap='I'>bytes</emphasis> is appended to the object's Unicode representation.
Otherwise, the object's Unicode representation is invalidated and
converted to the UTF format, and <emphasis remap='I'>bytes</emphasis> is appended to the
object's new string representation.</para>

<para><function>Tcl_AppendUnicodeToObj</function> appends the Unicode string given by
<emphasis remap='I'>unicode</emphasis> and <emphasis remap='I'>numChars</emphasis> to the object specified by
<emphasis remap='I'>objPtr</emphasis>.  If the object has an invalid Unicode representation,
then <emphasis remap='I'>unicode</emphasis> is converted to the UTF format and appended to the
object's string representation.  Appends are optimized to handle
repeated appends relatively efficiently (it overallocates the string
or Unicode space to avoid repeated reallocations and copies of
object's string value).</para>

<para><function>Tcl_AppendObjToObj</function> is similar to <function>Tcl_AppendToObj</function>, but it
appends the string or Unicode value (whichever exists and is best
suited to be appended to <emphasis remap='I'>objPtr</emphasis>) of <emphasis remap='I'>appendObjPtr</emphasis> to
<emphasis remap='I'>objPtr</emphasis>.</para>

<para><function>Tcl_AppendStringsToObj</function> is similar to <function>Tcl_AppendToObj</function>
except that it can be passed more than one value to append and
each value must be a null-terminated string (i.e. none of the
values may contain internal null characters).  Any number of
<emphasis remap='I'>string</emphasis> arguments may be provided, but the last argument
must be a NULL pointer to indicate the end of the list.</para>

<para><function>Tcl_AppendStringsToObjVA</function> is the same as <function>Tcl_AppendStringsToObj</function>
except that instead of taking a variable number of arguments it takes an
argument list.</para>

<!-- .VS 8.5 -->
<para><function>Tcl_AppendLimitedToObj</function> is similar to <function>Tcl_AppendToObj</function>
except that it imposes a limit on how many bytes are appended.
This can be handy when the string to be appended might be
very large, but the value being constructed should not be allowed to grow
without bound. A common usage is when constructing an error message, where the
end result should be kept short enough to be read.
Bytes from <emphasis remap='I'>bytes</emphasis> are appended to <emphasis remap='I'>objPtr</emphasis>, but no more
than <emphasis remap='I'>limit</emphasis> bytes total are to be appended. If the limit prevents
all <emphasis remap='I'>length</emphasis> bytes that are available from being appended, then the
appending is done so that the last bytes appended are from the
string <emphasis remap='I'>ellipsis</emphasis>. This allows for an indication of the truncation
to be left in the string.
When <emphasis remap='I'>length</emphasis> is <option>-1</option>, all bytes up to the first zero byte are appended,
subject to the limit. When <emphasis remap='I'>ellipsis</emphasis> is NULL, the default
string <literal>...</literal> is used. When <emphasis remap='I'>ellipsis</emphasis> is non-NULL, it must point
to a zero-byte-terminated string in Tcl's internal UTF encoding.
The number of bytes appended can be less than the lesser
of <emphasis remap='I'>length</emphasis> and <emphasis remap='I'>limit</emphasis> when appending fewer
bytes is necessary to append only whole multi-byte characters.</para>

<para><function>Tcl_Format</function> is the C-level interface to the engine of the <emphasis remap='B'>format</emphasis>
command.  The actual command procedure for <emphasis remap='B'>format</emphasis> is little more
than</para>
<programlisting remap='CS'>
<funcsynopsis>
<funcprototype>
<funcdef><function>Tcl_Format</function></funcdef>
    <paramdef><parameter>interp</parameter></paramdef>
    <paramdef>Tcl_GetString ( objv [ 1 ] ) <parameter></parameter></paramdef>
    <paramdef><parameter>objc-2</parameter></paramdef>
    <paramdef><parameter>objv+2</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>The <emphasis remap='I'>objc</emphasis> Tcl_Obj values in <emphasis remap='I'>objv</emphasis> are formatted into a string
according to the conversion specification in <emphasis remap='I'>format</emphasis> argument, following
the documentation for the <emphasis remap='B'>format</emphasis> command.  The resulting formatted
string is converted to a new Tcl_Obj with refcount of zero and returned.
If some error happens during production of the formatted string, NULL is
returned, and an error message is recorded in <emphasis remap='I'>interp</emphasis>, if <emphasis remap='I'>interp</emphasis>
is non-NULL.</para>

<para><function>Tcl_AppendFormatToObj</function> is an appending alternative form
of <function>Tcl_Format</function> with functionality equivalent to</para>
<programlisting remap='CS'>
Tcl_Obj *newPtr = Tcl_Format(interp, format, objc, objv);
if (newPtr == NULL) return TCL_ERROR;
<funcsynopsis>
<funcprototype>
<funcdef><function>Tcl_AppendObjToObj</function></funcdef>
    <paramdef><parameter>objPtr</parameter></paramdef>
    <paramdef><parameter>newPtr</parameter></paramdef>
</funcprototype>
<funcsynopsisinfo>
return TCL_OK;
</funcsynopsisinfo>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>but with greater convenience and efficiency when the appending
functionality is needed.</para>

<para><emphasis remap='B'>Tcl_ObjPrintf</emphasis> serves as a replacement for the common sequence</para>
<programlisting remap='CS'>
<funcsynopsis>
<funcsynopsisinfo>
char buf[SOME_SUITABLE_LENGTH];
</funcsynopsisinfo>
<funcprototype>
<funcdef><function>sprintf</function></funcdef>
    <paramdef><parameter>buf</parameter></paramdef>
    <paramdef><parameter>format</parameter></paramdef>
    <paramdef><parameter>...</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_NewStringObj</function></funcdef>
    <paramdef><parameter>buf</parameter></paramdef>
    <paramdef><parameter>-1</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>but with greater convenience and no need to 
determine <emphasis remap='B'>SOME_SUITABLE_LENGTH</emphasis>. The formatting is done with the same
core formatting engine used by <function>Tcl_Format</function>.  This means the set of
supported conversion specifiers is that of the <emphasis remap='B'>format</emphasis> command and
not that of the <function>sprintf</function> routine where the two sets differ. When a
conversion specifier passed to <emphasis remap='B'>Tcl_ObjPrintf</emphasis> includes a precision,
the value is taken as a number of bytes, as <function>sprintf</function> does, and not
as a number of characters, as <emphasis remap='B'>format</emphasis> does.  This is done on the
assumption that C code is more likely to know how many bytes it is
passing around than the number of encoded characters those bytes happen
to represent.  The variable number of arguments passed in should be of
the types that would be suitable for passing to <function>sprintf</function>.  Note in
this example usage, <emphasis remap='I'>x</emphasis> is of type <emphasis remap='B'>long</emphasis>.</para>
<programlisting remap='CS'>
<funcsynopsis>
<funcsynopsisinfo>
long x = 5;
</funcsynopsisinfo>
</funcsynopsis>
Tcl_Obj *objPtr = Tcl_ObjPrintf("Value is %d", x);
</programlisting> <!-- remap='CE' -->
<para>If the value of <emphasis remap='I'>format</emphasis> contains internal inconsistencies or invalid
specifier formats, the formatted string result produced by
<emphasis remap='B'>Tcl_ObjPrintf</emphasis> will be an error message describing the error.</para>

<para><function>Tcl_AppendPrintfToObj</function> is an appending alternative form
of <emphasis remap='B'>Tcl_ObjPrintf</emphasis> with functionality equivalent to</para>
<programlisting remap='CS'>
<funcsynopsis>
<funcprototype>
<funcdef><function>Tcl_AppendObjToObj</function></funcdef>
    <paramdef><parameter>objPtr</parameter></paramdef>
    <paramdef>Tcl_ObjPrintf ( format , ... ) <parameter></parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>but with greater convenience and efficiency when the appending
functionality is needed.</para>
<!-- .VE 8.5 -->

<para>The <function>Tcl_SetObjLength</function> procedure changes the length of the
string value of its <emphasis remap='I'>objPtr</emphasis> argument.  If the <emphasis remap='I'>newLength</emphasis>
argument is greater than the space allocated for the object's
string, then the string space is reallocated and the old value
is copied to the new space; the bytes between the old length of
the string and the new length may have arbitrary values.
If the <emphasis remap='I'>newLength</emphasis> argument is less than the current length
of the object's string, with <emphasis remap='I'>objPtr-&gt;length</emphasis> is reduced without
reallocating the string space; the original allocated size for the
string is recorded in the object, so that the string length can be
enlarged in a subsequent call to <function>Tcl_SetObjLength</function> without
reallocating storage.  In all cases <function>Tcl_SetObjLength</function> leaves
a null character at <emphasis remap='I'>objPtr-&gt;bytes[newLength]</emphasis>.</para>

<para><function>Tcl_AttemptSetObjLength</function> is identical in function to
<function>Tcl_SetObjLength</function> except that if sufficient memory to satisfy the
request cannot be allocated, it does not cause the Tcl interpreter to
<emphasis remap='B'>panic</emphasis>.  Thus, if <emphasis remap='I'>newLength</emphasis> is greater than the space
allocated for the object's string, and there is not enough memory
available to satisfy the request, <function>Tcl_AttemptSetObjLength</function> will take
no action and return 0 to indicate failure.  If there is enough memory
to satisfy the request, <function>Tcl_AttemptSetObjLength</function> behaves just like
<function>Tcl_SetObjLength</function> and returns 1 to indicate success.</para>

<para>The <emphasis remap='B'>Tcl_ConcatObj</emphasis> function returns a new string object whose
value is the space-separated concatenation of the string
representations of all of the objects in the <emphasis remap='I'>objv</emphasis>
array. <emphasis remap='B'>Tcl_ConcatObj</emphasis> eliminates leading and trailing white space
as it copies the string representations of the <emphasis remap='I'>objv</emphasis> array to the
result. If an element of the <emphasis remap='I'>objv</emphasis> array consists of nothing but
white space, then that object is ignored entirely. This white-space
removal was added to make the output of the <emphasis remap='B'>concat</emphasis> command
cleaner-looking. <emphasis remap='B'>Tcl_ConcatObj</emphasis> returns a pointer to a
newly-created object whose ref count is zero.</para>

</refsect1>

<refsect1 xml:id='see_also'><title>SEE ALSO</title>
<para>Tcl_NewObj, Tcl_IncrRefCount, Tcl_DecrRefCount, format, sprintf</para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>append, internal representation, object, object type, string object,
string type, string representation, concat, concatenate, unicode</para>
</refsect1>
</refentry>

