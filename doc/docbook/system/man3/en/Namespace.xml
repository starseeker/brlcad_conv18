<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='namespace3'>

<!-- '\" Copyright (c) 2003 Donal K. Fellows -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\" 
'\" Note that some of these functions do not seem to belong, but they
'\" were all introduced with the same TIP (#139)
'\"  -->
<refentryinfo><date>8.5</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_Namespace</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>8.5</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_AppendExportList</refname>
<refname>Tcl_CreateNamespace</refname>
<refname>Tcl_DeleteNamespace</refname>
<refname>Tcl_Export</refname>
<refname>Tcl_FindCommand</refname>
<refname>Tcl_FindNamespace</refname>
<refname>Tcl_ForgetImport</refname>
<refname>Tcl_GetCurrentNamespace</refname>
<refname>Tcl_GetGlobalNamespace</refname>
<refname>Tcl_GetNamespaceUnknownHandler</refname>
<refname>Tcl_Import</refname>
<refname>Tcl_SetNamespaceUnknownHandler</refname>
<refpurpose>manipulate namespaces</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>Tcl_Namespace</function> *Tcl_CreateNamespace</funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>name</parameter></paramdef>
<paramdef><parameter>clientData</parameter></paramdef>
<paramdef><parameter>deleteProc</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_DeleteNamespace</function></funcdef>
<paramdef><parameter>nsPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_AppendExportList</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>nsPtr</parameter></paramdef>
<paramdef><parameter>objPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_Export</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>nsPtr</parameter></paramdef>
<paramdef><parameter>pattern</parameter></paramdef>
<paramdef><parameter>resetListFirst</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_Import</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>nsPtr</parameter></paramdef>
<paramdef><parameter>pattern</parameter></paramdef>
<paramdef><parameter>allowOverwrite</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_ForgetImport</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>nsPtr</parameter></paramdef>
<paramdef><parameter>pattern</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_Namespace</function> *Tcl_GetCurrentNamespace</funcdef>
<paramdef><parameter>interp</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_Namespace</function> *Tcl_GetGlobalNamespace</funcdef>
<paramdef><parameter>interp</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_Namespace</function> *Tcl_FindNamespace</funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>name</parameter></paramdef>
<paramdef><parameter>contextNsPtr</parameter></paramdef>
<paramdef><parameter>flags</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>Tcl_Command <function>Tcl_FindCommand</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>name</parameter></paramdef>
<paramdef><parameter>contextNsPtr</parameter></paramdef>
<paramdef><parameter>flags</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_Obj</function> *Tcl_GetNamespaceUnknownHandler</funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>nsPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_SetNamespaceUnknownHandler</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>nsPtr</parameter></paramdef>
<paramdef><parameter>handlerPtr</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tcl_NamespaceDeleteProc allowOverwrite in/out -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tcl_Interp"</entry><entry>"*interp"</entry><entry>"in/out"</entry>
<entry>
<para>The interpreter in which the namespace exists and where name lookups
are performed. Also where error result messages are written.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*name</entry><entry>in</entry>
<entry>
<para>The name of the namespace or command to be created or accessed.</para>
</entry>
</row>
<row><entry>ClientData</entry><entry>clientData</entry><entry>in</entry>
<entry>
<para>A context pointer by the creator of the namespace.  Not interpreted by
Tcl at all.</para>
</entry>
</row>
<row><entry>Tcl_NamespaceDeleteProc</entry><entry>*deleteProc</entry><entry>in</entry>
<entry>
<para>A pointer to function to call when the namespace is deleted, or NULL
if no such callback is to be performed.</para>
</entry>
</row>
<row><entry>Tcl_Namespace</entry><entry>*nsPtr</entry><entry>in</entry>
<entry>
<para>The namespace to be manipulated, or NULL (for other than
<function>Tcl_DeleteNamespace</function>) to manipulate the current namespace.</para>
</entry>
</row>
<row><entry>Tcl_Obj</entry><entry>*objPtr</entry><entry>out</entry>
<entry>
<para>A reference to an unshared object to which the function output will be
written.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*pattern</entry><entry>in</entry>
<entry>
<para>The glob-style pattern (see <emphasis remap='B'>Tcl_StringMatch</emphasis>) that describes the
commands to be imported or exported.</para>
</entry>
</row>
<row><entry>int</entry><entry>resetListFirst</entry><entry>in</entry>
<entry>
<para>Whether the list of export patterns should be reset before adding the
current pattern to it.</para>
</entry>
</row>
<row><entry>int</entry><entry>allowOverwrite</entry><entry>in</entry>
<entry>
<para>Whether new commands created by this import action can overwrite
existing commands.</para>
</entry>
</row>
<row><entry>Tcl_Namespace</entry><entry>*contextNsPtr</entry><entry>in</entry>
<entry>
<para>The location in the namespace hierarchy where the search for a
namespace or command should be conducted relative to when the search
term is not rooted at the global namespace.  NULL indicates the
current namespace.</para>
</entry>
</row>
<row><entry>int</entry><entry>flags</entry><entry>in</entry>
<entry>
<para>OR-ed combination of bits controlling how the search is to be
performed.  The following flags are supported: <emphasis remap='B'>TCL_GLOBAL_ONLY</emphasis>
(indicates that the search is always to be conducted relative to the
global namespace), <emphasis remap='B'>TCL_NAMESPACE_ONLY</emphasis> (just for <function>Tcl_FindCommand</function>;
indicates that the search is always to be conducted relative to the
context namespace), and <emphasis remap='B'>TCL_LEAVE_ERR_MSG</emphasis> (indicates that an error
message should be left in the interpreter if the search fails.)</para>
</entry>
</row>
<row><entry>Tcl_Obj</entry><entry>*handlerPtr</entry><entry>in</entry>
<entry>
<para>A script fragment to be installed as the unknown command handler for the
namespace, or NULL to reset the handler to its default.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>Namespaces are hierarchic naming contexts that can contain commands
and variables.  They also maintain a list of patterns that describes
what commands are exported, and can import commands that have been
exported by other namespaces.  Namespaces can also be manipulated
through the Tcl file <command>namespace</command>.</para>

<para>The <type>Tcl_Namespace</type> structure encapsulates a namespace, and is
guaranteed to have the following fields in it: <emphasis remap='I'>name</emphasis> (the local
name of the namespace, with no namespace separator characters in it,
with empty denoting the global namespace), <emphasis remap='I'>fullName</emphasis> (the fully
specified name of the namespace), <emphasis remap='I'>clientData</emphasis>, <emphasis remap='I'>deleteProc</emphasis>
(the values specified in the call to <emphasis remap='B'>Tcl_CreateNamespace</emphasis>), and
<emphasis remap='I'>parentPtr</emphasis> (a pointer to the containing namespace, or NULL for
the global namespace.)</para>

<para><emphasis remap='B'>Tcl_CreateNamespace</emphasis> creates a new namespace.  The
<emphasis remap='I'>deleteProc</emphasis> will have the following type signature:</para>
<programlisting remap='CS'>
<funcsynopsis>
<funcsynopsisinfo>
typedef void (Tcl_NamespaceDeleteProc) (ClientData clientData);
</funcsynopsisinfo>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para><function>Tcl_DeleteNamespace</function> deletes a namespace.</para>

<para><function>Tcl_AppendExportList</function> retrieves the export patterns for a
namespace given namespace and appends them (as list items) to
<emphasis remap='I'>objPtr</emphasis>.</para>

<para><function>Tcl_Export</function> sets and appends to the export patterns for a
namespace.  Patterns are appended unless the <emphasis remap='I'>resetListFirst</emphasis> flag
is true.</para>

<para><function>Tcl_Import</function> imports commands matching a pattern into a
namespace.  Note that the pattern must include the name of the
namespace to import from.  This function returns an error if
an attempt to import a command over an existing command is made,
unless the <emphasis remap='I'>allowOverwrite</emphasis> flag has been set.</para>

<para><function>Tcl_ForgetImport</function> removes imports matching a pattern.</para>

<para><emphasis remap='B'>Tcl_GetCurrentNamespace</emphasis> returns the current namespace for an
interpreter.</para>

<para><emphasis remap='B'>Tcl_GetGlobalNamespace</emphasis> returns the global namespace for an
interpreter.</para>

<para><emphasis remap='B'>Tcl_FindNamespace</emphasis> searches for a namespace named <emphasis remap='I'>name</emphasis>
within the context of the namespace <emphasis remap='I'>contextNsPtr</emphasis>.  If the
namespace cannot be found, NULL is returned.</para>

<para><function>Tcl_FindCommand</function> searches for a command named <emphasis remap='I'>name</emphasis> within
the context of the namespace <emphasis remap='I'>contextNsPtr</emphasis>.  If the command
cannot be found, NULL is returned.</para>

<para><emphasis remap='B'>Tcl_GetNamespaceUnknownHandler</emphasis> returns the unknown command handler
for the namespace, or NULL if none is set.</para>

<para><function>Tcl_SetNamespaceUnknownHandler</function> sets the unknown command handler for
the namespace. If <emphasis remap='I'>handlerPtr</emphasis> is NULL, then the handler is reset to
its default.</para>

</refsect1>

<refsect1 xml:id='see_also'><title>SEE ALSO</title>
<para>Tcl_CreateCommand, Tcl_ListObjAppendElements, Tcl_SetVar</para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>namespace, command</para>
</refsect1>
</refentry>

