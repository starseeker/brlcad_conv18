<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='hash3'>

<!-- '\" Copyright (c) 1989\-1993 The Regents of the University of California.
'\" Copyright (c) 1994\-1996 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refmeta>
<refentrytitle>Tcl_Hash</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='manual'>Tcl</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_InitHashTable</refname>
<refname>Tcl_InitCustomHashTable</refname>
<refname>Tcl_InitObjHashTable</refname>
<refname>Tcl_DeleteHashTable</refname>
<refname>Tcl_CreateHashEntry</refname>
<refname>Tcl_DeleteHashEntry</refname>
<refname>Tcl_FindHashEntry</refname>
<refname>Tcl_GetHashValue</refname>
<refname>Tcl_SetHashValue</refname>
<refname>Tcl_GetHashKey</refname>
<refname>Tcl_FirstHashEntry</refname>
<refname>Tcl_NextHashEntry</refname>
<refname>Tcl_HashStats</refname>
<refpurpose>procedures to manage hash tables</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>Tcl_InitHashTable</function></funcdef>
<paramdef><parameter>tablePtr</parameter></paramdef>
<paramdef><parameter>keyType</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_InitCustomHashTable</function></funcdef>
<paramdef><parameter>tablePtr</parameter></paramdef>
<paramdef><parameter>keyType</parameter></paramdef>
<paramdef><parameter>typePtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_InitObjHashTable</function></funcdef>
<paramdef><parameter>tablePtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_DeleteHashTable</function></funcdef>
<paramdef><parameter>tablePtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_HashEntry</function> *Tcl_CreateHashEntry</funcdef>
<paramdef><parameter>tablePtr</parameter></paramdef>
<paramdef><parameter>key</parameter></paramdef>
<paramdef><parameter>newPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_DeleteHashEntry</function></funcdef>
<paramdef><parameter>entryPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_HashEntry</function> *Tcl_FindHashEntry</funcdef>
<paramdef><parameter>tablePtr</parameter></paramdef>
<paramdef><parameter>key</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>ClientData <function>Tcl_GetHashValue</function></funcdef>
<paramdef><parameter>entryPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_SetHashValue</function></funcdef>
<paramdef><parameter>entryPtr</parameter></paramdef>
<paramdef><parameter>value</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>char *<function>Tcl_GetHashKey</function></funcdef>
<paramdef><parameter>tablePtr</parameter></paramdef>
<paramdef><parameter>entryPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_HashEntry</function> *Tcl_FirstHashEntry</funcdef>
<paramdef><parameter>tablePtr</parameter></paramdef>
<paramdef><parameter>searchPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_HashEntry</function> *Tcl_NextHashEntry</funcdef>
<paramdef><parameter>searchPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>char *<function>Tcl_HashStats</function></funcdef>
<paramdef><parameter>tablePtr</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tcl_HashKeyType *searchPtr out -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tcl_HashTable"</entry><entry>"*tablePtr"</entry><entry>"in"</entry>
<entry>
<para>Address of hash table structure (for all procedures but
<function>Tcl_InitHashTable</function>, this must have been initialized by
previous call to <function>Tcl_InitHashTable</function>).</para>
</entry>
</row>
<row><entry>int</entry><entry>keyType</entry><entry>in</entry>
<entry>
<para>Kind of keys to use for new hash table.  Must be either
<emphasis remap='B'>TCL_STRING_KEYS</emphasis>, <emphasis remap='B'>TCL_ONE_WORD_KEYS</emphasis>, <emphasis remap='B'>TCL_CUSTOM_TYPE_KEYS</emphasis>,
<emphasis remap='B'>TCL_CUSTOM_PTR_KEYS</emphasis>, or an integer value greater than 1.</para>
</entry>
</row>
<row><entry>Tcl_HashKeyType</entry><entry>*typePtr</entry><entry>in</entry>
<entry>
<para>Address of structure which defines the behaviour of the hash table.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*key</entry><entry>in</entry>
<entry>
<para>Key to use for probe into table.  Exact form depends on
<emphasis remap='I'>keyType</emphasis> used to create table.</para>
</entry>
</row>
<row><entry>int</entry><entry>*newPtr</entry><entry>out</entry>
<entry>
<para>The word at <emphasis remap='I'>*newPtr</emphasis> is set to 1 if a new entry was created
and 0 if there was already an entry for <emphasis remap='I'>key</emphasis>.</para>
</entry>
</row>
<row><entry>Tcl_HashEntry</entry><entry>*entryPtr</entry><entry>in</entry>
<entry>
<para>Pointer to hash table entry.</para>
</entry>
</row>
<row><entry>ClientData</entry><entry>value</entry><entry>in</entry>
<entry>
<para>New value to assign to hash table entry.  Need not have type
ClientData, but must fit in same space as ClientData.</para>
</entry>
</row>
<row><entry>Tcl_HashSearch</entry><entry>*searchPtr</entry><entry>in</entry>
<entry>
<para>Pointer to record to use to keep track of progress in enumerating
all the entries in a hash table.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>A hash table consists of zero or more entries, each consisting of a
key and a value.  Given the key for an entry, the hashing routines can
very quickly locate the entry, and hence its value. There may be at
most one entry in a hash table with a particular key, but many entries
may have the same value.  Keys can take one of four forms: strings,
one-word values, integer arrays, or custom keys defined by a
Tcl_HashKeyType structure (See section <emphasis remap='B'>THE TCL_HASHKEYTYPE
STRUCTURE</emphasis> below). All of the keys in a given table have the same
form, which is specified when the table is initialized.</para>

<para>The value of a hash table entry can be anything that fits in the same
space as a
<quote>char *</quote>
pointer.  Values for hash table entries are
managed entirely by clients, not by the hash module itself.  Typically
each entry's value is a pointer to a data structure managed by client
code.</para>

<para>Hash tables grow gracefully as the number of entries increases, so
that there are always less than three entries per hash bucket, on
average. This allows for fast lookups regardless of the number of
entries in a table.</para>

<para>The core provides three functions for the initialization of hash
tables, Tcl_InitHashTable, Tcl_InitObjHashTable and
Tcl_InitCustomHashTable.</para>

<para><function>Tcl_InitHashTable</function> initializes a structure that describes a new
hash table.  The space for the structure is provided by the caller,
not by the hash module.  The value of <emphasis remap='I'>keyType</emphasis> indicates what
kinds of keys will be used for all entries in the table. All of the
key types described later are allowed, with the exception of
<emphasis remap='B'>TCL_CUSTOM_TYPE_KEYS</emphasis> and <emphasis remap='B'>TCL_CUSTOM_PTR_KEYS</emphasis>.</para>

<para><function>Tcl_InitObjHashTable</function> is a wrapper around
<function>Tcl_InitCustomHashTable</function> and initializes a hash table whose keys
are Tcl_Obj *.</para>

<para><function>Tcl_InitCustomHashTable</function> initializes a structure that describes a
new hash table. The space for the structure is provided by the
caller, not by the hash module.  The value of <emphasis remap='I'>keyType</emphasis> indicates
what kinds of keys will be used for all entries in the table.
<emphasis remap='I'>KeyType</emphasis> must have one of the following values:</para>
<variablelist remap='IP'>
  <varlistentry>
  <term><emphasis remap='B'>TCL_STRING_KEYS</emphasis></term>
  <listitem>
<para>Keys are null-terminated strings.
They are passed to hashing routines using the address of the
first character of the string.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TCL_ONE_WORD_KEYS</emphasis></term>
  <listitem>
<para>Keys are single-word values;  they are passed to hashing routines
and stored in hash table entries as
<quote>char *</quote>
values.
The pointer value is the key;  it need not (and usually does not)
actually point to a string.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TCL_CUSTOM_TYPE_KEYS</emphasis></term>
  <listitem>
<para>Keys are of arbitrary type, and are stored in the entry. Hashing
and comparison is determined by <emphasis remap='I'>typePtr</emphasis>. The Tcl_HashKeyType 
structure is described in the section 
<emphasis remap='B'>THE TCL_HASHKEYTYPE STRUCTURE</emphasis> below.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TCL_CUSTOM_PTR_KEYS</emphasis></term>
  <listitem>
<para>Keys are pointers to an arbitrary type, and are stored in the entry. Hashing
and comparison is determined by <emphasis remap='I'>typePtr</emphasis>. The Tcl_HashKeyType 
structure is described in the section 
<emphasis remap='B'>THE TCL_HASHKEYTYPE STRUCTURE</emphasis> below.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='I'>other</emphasis></term>
  <listitem>
<para>If <emphasis remap='I'>keyType</emphasis> is not one of the above,
then it must be an integer value greater than 1.
In this case the keys will be arrays of
<quote>int</quote>
values, where
<emphasis remap='I'>keyType</emphasis> gives the number of ints in each key.
This allows structures to be used as keys.
All keys must have the same size.
Array keys are passed into hashing functions using the address
of the first int in the array.</para>
  </listitem>
  </varlistentry>
</variablelist>

<para><function>Tcl_DeleteHashTable</function> deletes all of the entries in a hash
table and frees up the memory associated with the table's
bucket array and entries.
It does not free the actual table structure (pointed to
by <varname role='parameter'>tablePtr</varname>), since that memory is assumed to be managed
by the client.
<function>Tcl_DeleteHashTable</function> also does not free or otherwise
manipulate the values of the hash table entries.
If the entry values point to dynamically-allocated memory, then
it is the client's responsibility to free these structures
before deleting the table.</para>

<para><emphasis remap='B'>Tcl_CreateHashEntry</emphasis> locates the entry corresponding to a
particular key, creating a new entry in the table if there
was not already one with the given key.
If an entry already existed with the given key then <emphasis remap='I'>*newPtr</emphasis>
is set to zero.
If a new entry was created, then <emphasis remap='I'>*newPtr</emphasis> is set to a non-zero
value and the value of the new entry will be set to zero.
The return value from <emphasis remap='B'>Tcl_CreateHashEntry</emphasis> is a pointer to
the entry, which may be used to retrieve and modify the entry's
value or to delete the entry from the table.</para>

<para><function>Tcl_DeleteHashEntry</function> will remove an existing entry from a
table.
The memory associated with the entry itself will be freed, but
the client is responsible for any cleanup associated with the
entry's value, such as freeing a structure that it points to.</para>

<para><emphasis remap='B'>Tcl_FindHashEntry</emphasis> is similar to <emphasis remap='B'>Tcl_CreateHashEntry</emphasis>
except that it does not create a new entry if the key doesn't exist;
instead, it returns NULL as result.</para>

<para><function>Tcl_GetHashValue</function> and <function>Tcl_SetHashValue</function> are used to
read and write an entry's value, respectively.
Values are stored and retrieved as type
<quote>ClientData</quote>,
which is
large enough to hold a pointer value.  On almost all machines this is
large enough to hold an integer value too.</para>

<para><function>Tcl_GetHashKey</function> returns the key for a given hash table entry,
either as a pointer to a string, a one-word
(<quote>char *</quote>)
key, or
as a pointer to the first word of an array of integers, depending
on the <emphasis remap='I'>keyType</emphasis> used to create a hash table.
In all cases <function>Tcl_GetHashKey</function> returns a result with type
<quote>char *</quote>.
When the key is a string or array, the result of <function>Tcl_GetHashKey</function>
points to information in the table entry;  this information will
remain valid until the entry is deleted or its table is deleted.</para>

<para><emphasis remap='B'>Tcl_FirstHashEntry</emphasis> and <emphasis remap='B'>Tcl_NextHashEntry</emphasis> may be used
to scan all of the entries in a hash table.
A structure of type
<quote>Tcl_HashSearch</quote>,
provided by the client,
is used to keep track of progress through the table.
<emphasis remap='B'>Tcl_FirstHashEntry</emphasis> initializes the search record and
returns the first entry in the table (or NULL if the table is
empty).
Each subsequent call to <emphasis remap='B'>Tcl_NextHashEntry</emphasis> returns the
next entry in the table or
NULL if the end of the table has been reached.
A call to <emphasis remap='B'>Tcl_FirstHashEntry</emphasis> followed by calls to
<emphasis remap='B'>Tcl_NextHashEntry</emphasis> will return each of the entries in
the table exactly once, in an arbitrary order.
It is inadvisable to modify the structure of the table, e.g.
by creating or deleting entries, while the search is in progress,
with the exception of deleting the entry returned by
<emphasis remap='B'>Tcl_FirstHashEntry</emphasis> or <emphasis remap='B'>Tcl_NextHashEntry</emphasis>.</para>

<para><function>Tcl_HashStats</function> returns a dynamically-allocated string with
overall information about a hash table, such as the number of
entries it contains, the number of buckets in its hash array,
and the utilization of the buckets.
It is the caller's responsibility to free the result string
by passing it to <emphasis remap='B'>ckfree</emphasis>.</para>

<para>The header file <filename>tcl.h</filename> defines the actual data structures
used to implement hash tables.
This is necessary so that clients can allocate Tcl_HashTable
structures and so that macros can be used to read and write
the values of entries.
However, users of the hashing routines should never refer directly
to any of the fields of any of the hash-related data structures;
use the procedures and macros defined here.</para>
</refsect1>

<refsect1 xml:id='the_tcl_hashkeytype_structure'><title>THE TCL_HASHKEYTYPE STRUCTURE</title>
<para>Extension writers can define new hash key types by defining four procedures,
initializing a <type>Tcl_HashKeyType</type> structure to describe the type, and
calling <function>Tcl_InitCustomHashTable</function>. The <type>Tcl_HashKeyType</type> structure is
defined as follows:</para>
<programlisting remap='CS'>
typedef struct Tcl_HashKeyType {
    int <emphasis remap='I'>version</emphasis>;
    int <emphasis remap='I'>flags</emphasis>;
    Tcl_HashKeyProc *<emphasis remap='I'>hashKeyProc</emphasis>;
    Tcl_CompareHashKeysProc *<emphasis remap='I'>compareKeysProc</emphasis>;
    Tcl_AllocHashEntryProc *<emphasis remap='I'>allocEntryProc</emphasis>;
    Tcl_FreeHashEntryProc *<emphasis remap='I'>freeEntryProc</emphasis>;
} Tcl_HashKeyType;
</programlisting> <!-- remap='CE' -->

<para>The <emphasis remap='I'>version</emphasis> member is the version of the table. If this structure is
extended in future then the version can be used to distinguish between
different structures. It should be set to <emphasis remap='B'>TCL_HASH_KEY_TYPE_VERSION</emphasis>.</para>

<para>The <emphasis remap='I'>flags</emphasis> member is 0 or one or more of the following values OR'ed
together:</para>
<variablelist remap='IP'>
  <varlistentry>
  <term><emphasis remap='B'>TCL_HASH_KEY_RANDOMIZE_HASH</emphasis></term>
  <listitem>
<para>There are some things, pointers for example which do not hash well because
they do not use the lower bits. If this flag is set then the hash table will
attempt to rectify this by randomizing the bits and then using the upper N
bits as the index into the table.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>TCL_HASH_KEY_SYSTEM_HASH</emphasis></term>
  <listitem>
<!-- .VS 8.5 -->
<para>This flag forces Tcl to use the memory allocation procedures provided by the
operating system when allocating and freeing memory used to store the hash
table data structures, and not any of Tcl's own customized memory allocation
routines. This is important if the hash table is to be used in the
implementation of a custom set of allocation routines, or something that a
custom set of allocation routines might depend on, in order to avoid any
circular dependency.</para>
<!-- .VE 8.5 -->
  </listitem>
  </varlistentry>
</variablelist>

<para>The <emphasis remap='I'>hashKeyProc</emphasis> member contains the address of a function called to
calculate a hash value for the key.</para>
<programlisting remap='CS'>
<funcsynopsis>
<funcprototype>
<funcdef>typedef unsigned int ( <function>Tcl_HashKeyProc</function> )</funcdef>
    <paramdef>Tcl_HashTable * <parameter>tablePtr</parameter></paramdef>
    <paramdef>void * <parameter>keyPtr</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>If this is NULL then <varname role='parameter'>keyPtr</varname> is used and
<emphasis remap='B'>TCL_HASH_KEY_RANDOMIZE_HASH</emphasis> is assumed.</para>

<para>The <emphasis remap='I'>compareKeysProc</emphasis> member contains the address of a function called to
compare two keys.</para>
<programlisting remap='CS'>
<funcsynopsis>
<funcprototype>
<funcdef>typedef int ( <function>Tcl_CompareHashKeysProc</function> )</funcdef>
    <paramdef>void * <parameter>keyPtr</parameter></paramdef>
    <paramdef>Tcl_HashEntry * <parameter>hPtr</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>If this is NULL then the <varname role='parameter'>keyPtr</varname> pointers are compared. If the keys do
not match then the function returns 0, otherwise it returns 1.</para>

<para>The <emphasis remap='I'>allocEntryProc</emphasis> member contains the address of a function called to
allocate space for an entry and initialize the key and clientData.</para>
<programlisting remap='CS'>
<funcsynopsis>
<funcprototype>
<funcdef>typedef <function>Tcl_HashEntry</function> *</funcdef>
    <paramdef>( Tcl_HashTable *tablePtr , void *keyPtr ) <parameter></parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>If this is NULL then Tcl_Alloc is used to allocate enough space for a
Tcl_HashEntry, the key pointer is assigned to key.oneWordValue and the
clientData is set to NULL. String keys and array keys use this function to
allocate enough space for the entry and the key in one block, rather than
doing it in two blocks. This saves space for a pointer to the key from the
entry and another memory allocation. Tcl_Obj* keys use this function to
allocate enough space for an entry and increment the reference count on the
object.</para>

<para>The <emphasis remap='I'>freeEntryProc</emphasis> member contains the address of a function called to
free space for an entry.</para>
<programlisting remap='CS'>
<funcsynopsis>
<funcsynopsisinfo>
typedef void (Tcl_FreeHashEntryProc) (Tcl_HashEntry *hPtr);
</funcsynopsisinfo>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>If this is NULL then Tcl_Free is used to free the space for the entry.
Tcl_Obj* keys use this function to decrement the reference count on the
object.</para>
</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>hash table, key, lookup, search, value</para>
</refsect1>
</refentry>

