<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='x3dborder3'>

<!-- '\" Copyright (c) 1990\-1993 The Regents of the University of California.
'\" Copyright (c) 1994\-1998 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>8.1</date></refentryinfo>
<refmeta>
<refentrytitle>Tk_Alloc3DBorderFromObj</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>8.1</refmiscinfo>
<refmiscinfo class='source'>Tk</refmiscinfo>
<refmiscinfo class='manual'>Tk Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tk_Alloc3DBorderFromObj</refname>
<refname>Tk_Get3DBorder</refname>
<refname>Tk_Get3DBorderFromObj</refname>
<refname>Tk_Draw3DRectangle</refname>
<refname>Tk_Fill3DRectangle</refname>
<refname>Tk_Draw3DPolygon</refname>
<refname>Tk_Fill3DPolygon</refname>
<refname>Tk_3DVerticalBevel</refname>
<refname>Tk_3DHorizontalBevel</refname>
<refname>Tk_SetBackgroundFromBorder</refname>
<refname>Tk_NameOf3DBorder</refname>
<refname>Tk_3DBorderColor</refname>
<refname>Tk_3DBorderGC</refname>
<refname>Tk_Free3DBorderFromObj</refname>
<refname>Tk_Free3DBorder</refname>
<refpurpose>draw borders with three-dimensional appearance</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tk.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>Tk_3DBorder <function>Tk_Alloc3DBorderFromObj</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>objPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>Tk_3DBorder <function>Tk_Get3DBorder</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>colorName</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>Tk_3DBorder <function>Tk_Get3DBorderFromObj</function></funcdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>objPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tk_Draw3DRectangle</function></funcdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>drawable</parameter></paramdef>
<paramdef><parameter>border</parameter></paramdef>
<paramdef><parameter>x</parameter></paramdef>
<paramdef><parameter>y</parameter></paramdef>
<paramdef><parameter>width</parameter></paramdef>
<paramdef><parameter>height</parameter></paramdef>
<paramdef><parameter>borderWidth</parameter></paramdef>
<paramdef><parameter>relief</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tk_Fill3DRectangle</function></funcdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>drawable</parameter></paramdef>
<paramdef><parameter>border</parameter></paramdef>
<paramdef><parameter>x</parameter></paramdef>
<paramdef><parameter>y</parameter></paramdef>
<paramdef><parameter>width</parameter></paramdef>
<paramdef><parameter>height</parameter></paramdef>
<paramdef><parameter>borderWidth</parameter></paramdef>
<paramdef><parameter>relief</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tk_Draw3DPolygon</function></funcdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>drawable</parameter></paramdef>
<paramdef><parameter>border</parameter></paramdef>
<paramdef><parameter>pointPtr</parameter></paramdef>
<paramdef><parameter>numPoints</parameter></paramdef>
<paramdef><parameter>polyBorderWidth</parameter></paramdef>
<paramdef><parameter>leftRelief</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tk_Fill3DPolygon</function></funcdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>drawable</parameter></paramdef>
<paramdef><parameter>border</parameter></paramdef>
<paramdef><parameter>pointPtr</parameter></paramdef>
<paramdef><parameter>numPoints</parameter></paramdef>
<paramdef><parameter>polyBorderWidth</parameter></paramdef>
<paramdef><parameter>leftRelief</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tk_3DVerticalBevel</function></funcdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>drawable</parameter></paramdef>
<paramdef><parameter>border</parameter></paramdef>
<paramdef><parameter>x</parameter></paramdef>
<paramdef><parameter>y</parameter></paramdef>
<paramdef><parameter>width</parameter></paramdef>
<paramdef><parameter>height</parameter></paramdef>
<paramdef><parameter>leftBevel</parameter></paramdef>
<paramdef><parameter>relief</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tk_3DHorizontalBevel</function></funcdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>drawable</parameter></paramdef>
<paramdef><parameter>border</parameter></paramdef>
<paramdef><parameter>x</parameter></paramdef>
<paramdef><parameter>y</parameter></paramdef>
<paramdef><parameter>width</parameter></paramdef>
<paramdef><parameter>height</parameter></paramdef>
<paramdef><parameter>leftIn</parameter></paramdef>
<paramdef><parameter>rightIn</parameter></paramdef>
<paramdef><parameter>topBevel</parameter></paramdef>
<paramdef><parameter>relief</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tk_SetBackgroundFromBorder</function></funcdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>border</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>const char *<function>Tk_NameOf3DBorder</function></funcdef>
<paramdef><parameter>border</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>XColor</function> *Tk_3DBorderColor</funcdef>
<paramdef><parameter>border</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>GC</function> *Tk_3DBorderGC</funcdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>border</parameter></paramdef>
<paramdef><parameter>which</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tk_Free3DBorderFromObj</function></funcdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>objPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tk_Free3DBorder</function></funcdef>
<paramdef><parameter>border</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tk_3DBorder borderWidth -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tcl_Interp"</entry><entry>"*interp"</entry><entry>"in"</entry>
<entry>
<para>Interpreter to use for error reporting.</para>
</entry>
</row>
<row><entry>Tk_Window</entry><entry>tkwin</entry><entry>in</entry>
<entry>
<para>Token for window (for all procedures except <function>Tk_Get3DBorder</function>,
must be the window for which the border was allocated).</para>
</entry>
</row>
<row><entry>Tcl_Obj</entry><entry>*objPtr</entry><entry>in</entry>
<entry>
<para>Pointer to object whose value describes color corresponding to
background (flat areas).  Illuminated edges will be brighter than
this and shadowed edges will be darker than this.</para>
</entry>
</row>
<row><entry>char</entry><entry>*colorName</entry><entry>in</entry>
<entry>
<para>Same as <emphasis remap='I'>objPtr</emphasis> except value is supplied as a string rather
than an object.</para>
</entry>
</row>
<row><entry>Drawable</entry><entry>drawable</entry><entry>in</entry>
<entry>
<para>X token for window or pixmap;  indicates where graphics are to be drawn.
Must either be the X window for <emphasis remap='I'>tkwin</emphasis> or a pixmap with the
same screen and depth as <emphasis remap='I'>tkwin</emphasis>.</para>
</entry>
</row>
<row><entry>Tk_3DBorder</entry><entry>border</entry><entry>in</entry>
<entry>
<para>Token for border previously allocated in call to <function>Tk_Get3DBorder</function>.</para>
</entry>
</row>
<row><entry>int</entry><entry>x</entry><entry>in</entry>
<entry>
<para>X-coordinate of upper-left corner of rectangle describing border
or bevel, in pixels.</para>
</entry>
</row>
<row><entry>int</entry><entry>y</entry><entry>in</entry>
<entry>
<para>Y-coordinate of upper-left corner of rectangle describing border or
bevel, in pixels.</para>
</entry>
</row>
<row><entry>int</entry><entry>width</entry><entry>in</entry>
<entry>
<para>Width of rectangle describing border or bevel, in pixels.</para>
</entry>
</row>
<row><entry>int</entry><entry>height</entry><entry>in</entry>
<entry>
<para>Height of rectangle describing border or bevel, in pixels.</para>
</entry>
</row>
<row><entry>int</entry><entry>borderWidth</entry><entry>in</entry>
<entry>
<para>Width of border in pixels. Positive means border is inside rectangle
given by <emphasis remap='I'>x</emphasis>, <emphasis remap='I'>y</emphasis>, <emphasis remap='I'>width</emphasis>, <emphasis remap='I'>height</emphasis>, negative means
border is outside rectangle.</para>
</entry>
</row>
<row><entry>int</entry><entry>relief</entry><entry>in</entry>
<entry>
<para>Indicates 3-D position of interior of object relative to exterior;
should be <emphasis remap='B'>TK_RELIEF_RAISED</emphasis>, <emphasis remap='B'>TK_RELIEF_SUNKEN</emphasis>, <emphasis remap='B'>TK_RELIEF_GROOVE</emphasis>,
<emphasis remap='B'>TK_RELIEF_SOLID</emphasis>, or <emphasis remap='B'>TK_RELIEF_RIDGE</emphasis> (may also be <emphasis remap='B'>TK_RELIEF_FLAT</emphasis>
for <function>Tk_Fill3DRectangle</function>).</para>
</entry>
</row>
<row><entry>XPoint</entry><entry>*pointPtr</entry><entry>in</entry>
<entry>
<para>Pointer to array of points describing the set of vertices in a polygon.
The polygon need not be closed (it will be closed automatically if it
is not).</para>
</entry>
</row>
<row><entry>int</entry><entry>numPoints</entry><entry>in</entry>
<entry>
<para>Number of points at <emphasis remap='I'>*pointPtr</emphasis>.</para>
</entry>
</row>
<row><entry>int</entry><entry>polyBorderWidth</entry><entry>in</entry>
<entry>
<para>Width of border in pixels.  If positive, border is drawn to left of
trajectory given by <emphasis remap='I'>pointPtr</emphasis>;  if negative, border is drawn to
right of trajectory.  If <emphasis remap='I'>leftRelief</emphasis> is <emphasis remap='B'>TK_RELIEF_GROOVE</emphasis> or
<emphasis remap='B'>TK_RELIEF_RIDGE</emphasis> then the border is centered on the trajectory.</para>
</entry>
</row>
<row><entry>int</entry><entry>leftRelief</entry><entry>in</entry>
<entry>
<para>Height of left side of polygon's path relative to right.  <emphasis remap='B'>TK_RELIEF_RAISED</emphasis>
means left side should appear higher and <emphasis remap='B'>TK_RELIEF_SUNKEN</emphasis> means right side
should appear higher;
<emphasis remap='B'>TK_RELIEF_GROOVE</emphasis> and <emphasis remap='B'>TK_RELIEF_RIDGE</emphasis> mean the obvious things.
For <function>Tk_Fill3DPolygon</function>, <emphasis remap='B'>TK_RELIEF_FLAT</emphasis> may also be specified to
indicate no difference in height.</para>
</entry>
</row>
<row><entry>int</entry><entry>leftBevel</entry><entry>in</entry>
<entry>
<para>Non-zero means this bevel forms the left side of the object;  zero means
it forms the right side.</para>
</entry>
</row>
<row><entry>int</entry><entry>leftIn</entry><entry>in</entry>
<entry>
<para>Non-zero means that the left edge of the horizontal bevel angles in,
so that the bottom of the edge is farther to the right than
the top.
Zero means the edge angles out, so that the bottom is farther to the
left than the top.</para>
</entry>
</row>
<row><entry>int</entry><entry>rightIn</entry><entry>in</entry>
<entry>
<para>Non-zero means that the right edge of the horizontal bevel angles in,
so that the bottom of the edge is farther to the left than the top.
Zero means the edge angles out, so that the bottom is farther to the
right than the top.</para>
</entry>
</row>
<row><entry>int</entry><entry>topBevel</entry><entry>in</entry>
<entry>
<para>Non-zero means this bevel forms the top side of the object;  zero means
it forms the bottom side.</para>
</entry>
</row>
<row><entry>int</entry><entry>which</entry><entry>in</entry>
<entry>
<para>Specifies which of the border's graphics contexts is desired.
Must be <emphasis remap='B'>TK_3D_FLAT_GC</emphasis>, <emphasis remap='B'>TK_3D_LIGHT_GC</emphasis>, or <emphasis remap='B'>TK_3D_DARK_GC</emphasis>.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>These procedures provide facilities for drawing window borders in a
way that produces a three-dimensional appearance.
<function>Tk_Alloc3DBorderFromObj</function>
allocates colors and Pixmaps needed to draw a border in the window
given by the <emphasis remap='I'>tkwin</emphasis> argument.  The value of <emphasis remap='I'>objPtr</emphasis>
is a standard Tk color name that determines the border colors.
The color indicated by <emphasis remap='I'>objPtr</emphasis> will not actually be used in
the border;  it indicates the background color for the window
(i.e. a color for flat surfaces).
The illuminated portions of the border will appear brighter than indicated
by <emphasis remap='I'>objPtr</emphasis>, and the shadowed portions of the border will appear
darker than <emphasis remap='I'>objPtr</emphasis>.</para>

<para><function>Tk_Alloc3DBorderFromObj</function> returns a token that may be used in later calls
to <function>Tk_Draw3DRectangle</function>.  If an error occurs in allocating information
for the border (e.g. a bogus color name was given)
then NULL is returned and an error message is left in <emphasis remap='I'>interp-&gt;result</emphasis>.
If it returns successfully, <function>Tk_Alloc3DBorderFromObj</function> caches
information about the return value in <emphasis remap='I'>objPtr</emphasis>, which speeds up
future calls to <function>Tk_Alloc3DBorderFromObj</function> with the same <emphasis remap='I'>objPtr</emphasis>
and <emphasis remap='I'>tkwin</emphasis>.</para>

<para><function>Tk_Get3DBorder</function> is identical to <function>Tk_Alloc3DBorderFromObj</function> except
that the color is specified with a string instead of an object.  This
prevents <function>Tk_Get3DBorder</function> from caching the return value, so
<function>Tk_Get3DBorder</function> is less efficient than <function>Tk_Alloc3DBorderFromObj</function>.</para>

<para><function>Tk_Get3DBorderFromObj</function> returns the token for an existing border, given
the window and color name used to create the border.
<function>Tk_Get3DBorderFromObj</function> does not actually create the border; it must
already have been created with a previous call to
<function>Tk_Alloc3DBorderFromObj</function> or <function>Tk_Get3DBorder</function>.  The return
value is cached in <emphasis remap='I'>objPtr</emphasis>, which speeds up
future calls to <function>Tk_Get3DBorderFromObj</function> with the same <emphasis remap='I'>objPtr</emphasis>
and <emphasis remap='I'>tkwin</emphasis>.</para>

<para>Once a border structure has been created, <function>Tk_Draw3DRectangle</function> may be
invoked to draw the border.
The <emphasis remap='I'>tkwin</emphasis> argument specifies the
window for which the border was allocated, and <emphasis remap='I'>drawable</emphasis>
specifies a window or pixmap in which the border is to be drawn.
<type>Drawable</type> need not refer to the same window as <emphasis remap='I'>tkwin</emphasis>, but it
must refer to a compatible
pixmap or window:  one associated with the same screen and with the
same depth as <emphasis remap='I'>tkwin</emphasis>.
The <emphasis remap='I'>x</emphasis>, <emphasis remap='I'>y</emphasis>, <emphasis remap='I'>width</emphasis>, and
<emphasis remap='I'>height</emphasis> arguments define the bounding box of the border region
within <emphasis remap='I'>drawable</emphasis> (usually <emphasis remap='I'>x</emphasis> and <emphasis remap='I'>y</emphasis> are zero and
<emphasis remap='I'>width</emphasis> and <emphasis remap='I'>height</emphasis> are the dimensions of the window), and
<emphasis remap='I'>borderWidth</emphasis> specifies the number of pixels actually
occupied by the border.  The <emphasis remap='I'>relief</emphasis> argument indicates
which of several three-dimensional effects is desired:
<emphasis remap='B'>TK_RELIEF_RAISED</emphasis> means that the interior of the rectangle should
appear raised relative to the exterior of the rectangle, and
<emphasis remap='B'>TK_RELIEF_SUNKEN</emphasis> means that the interior should appear depressed.
<emphasis remap='B'>TK_RELIEF_GROOVE</emphasis> and <emphasis remap='B'>TK_RELIEF_RIDGE</emphasis> mean that there should appear to be
a groove or ridge around the exterior of the rectangle.</para>

<para><function>Tk_Fill3DRectangle</function> is somewhat like <function>Tk_Draw3DRectangle</function> except
that it first fills the rectangular area with the background color
(one corresponding
to the color used to create <emphasis remap='I'>border</emphasis>).  Then it calls
<function>Tk_Draw3DRectangle</function> to draw a border just inside the outer edge of
the rectangular area.  The argument <emphasis remap='I'>relief</emphasis> indicates the desired
effect (<emphasis remap='B'>TK_RELIEF_FLAT</emphasis> means no border should be drawn; all that
happens is to fill the rectangle with the background color).</para>

<para>The procedure <function>Tk_Draw3DPolygon</function> may be used to draw more complex
shapes with a three-dimensional appearance.  The <emphasis remap='I'>pointPtr</emphasis> and
<emphasis remap='I'>numPoints</emphasis> arguments define a trajectory, <emphasis remap='I'>polyBorderWidth</emphasis>
indicates how wide the border should be (and on which side of the
trajectory to draw it), and <emphasis remap='I'>leftRelief</emphasis> indicates which side
of the trajectory should appear raised.  <function>Tk_Draw3DPolygon</function>
draws a border around the given trajectory using the colors from
<emphasis remap='I'>border</emphasis> to produce a three-dimensional appearance.  If the trajectory is
non-self-intersecting, the appearance will be a raised or sunken
polygon shape.  The trajectory may be self-intersecting, although
it's not clear how useful this is.</para>

<para><function>Tk_Fill3DPolygon</function> is to <function>Tk_Draw3DPolygon</function> what
<function>Tk_Fill3DRectangle</function> is to <function>Tk_Draw3DRectangle</function>:  it fills
the polygonal area with the background color from <emphasis remap='I'>border</emphasis>,
then calls <function>Tk_Draw3DPolygon</function> to draw a border around the
area (unless <emphasis remap='I'>leftRelief</emphasis> is <emphasis remap='B'>TK_RELIEF_FLAT</emphasis>; in this case no
border is drawn).</para>

<para>The procedures <function>Tk_3DVerticalBevel</function> and <function>Tk_3DHorizontalBevel</function>
provide lower-level drawing primitives that are used by
procedures such as <function>Tk_Draw3DRectangle</function>.
These procedures are also useful in their own right for drawing
rectilinear border shapes.
<function>Tk_3DVerticalBevel</function> draws a vertical beveled edge, such as the
left or right side of a rectangle, and <function>Tk_3DHorizontalBevel</function>
draws a horizontal beveled edge, such as the top or bottom of a
rectangle.
Each procedure takes <emphasis remap='I'>x</emphasis>, <emphasis remap='I'>y</emphasis>, <emphasis remap='I'>width</emphasis>, and <emphasis remap='I'>height</emphasis>
arguments that describe the rectangular area of the beveled edge
(e.g., <emphasis remap='I'>width</emphasis> is the border width for <function>Tk_3DVerticalBevel</function>).
The <emphasis remap='I'>leftBorder</emphasis> and <emphasis remap='I'>topBorder</emphasis> arguments indicate the
position of the border relative to the
<quote>inside</quote>
of the object, and
<emphasis remap='I'>relief</emphasis> indicates the relief of the inside of the object relative
to the outside.
<function>Tk_3DVerticalBevel</function> just draws a rectangular region.
<function>Tk_3DHorizontalBevel</function> draws a trapezoidal region to generate
mitered corners;  it should be called after <function>Tk_3DVerticalBevel</function>
(otherwise <function>Tk_3DVerticalBevel</function> will overwrite the mitering in
the corner).
The <emphasis remap='I'>leftIn</emphasis> and <emphasis remap='I'>rightIn</emphasis> arguments to <function>Tk_3DHorizontalBevel</function>
describe the mitering at the corners;  a value of 1 means that the bottom
edge of the trapezoid will be shorter than the top, 0 means it will
be longer.
For example, to draw a rectangular border the top bevel should be
drawn with 1 for both <emphasis remap='I'>leftIn</emphasis> and <emphasis remap='I'>rightIn</emphasis>, and the
bottom bevel should be drawn with 0 for both arguments.</para>

<para>The procedure <function>Tk_SetBackgroundFromBorder</function> will modify the background
pixel and/or pixmap of <emphasis remap='I'>tkwin</emphasis> to produce a result compatible
with <emphasis remap='I'>border</emphasis>.  For color displays, the resulting background will
just be the color specified when <emphasis remap='I'>border</emphasis> was created;  for monochrome
displays, the resulting background
will be a light stipple pattern, in order to distinguish the background from
the illuminated portion of the border.</para>

<para>Given a token for a border, the procedure <function>Tk_NameOf3DBorder</function>
will return the color name that was used to create the border.</para>

<para>The procedure <emphasis remap='B'>Tk_3DBorderColor</emphasis> returns the XColor structure
that will be used for flat surfaces drawn for its <emphasis remap='I'>border</emphasis>
argument by procedures like <function>Tk_Fill3DRectangle</function>.
The return value corresponds to the color name that was used to
create the border.
The XColor, and its associated pixel value, will remain allocated
as long as <emphasis remap='I'>border</emphasis> exists.</para>

<para>The procedure <emphasis remap='B'>Tk_3DBorderGC</emphasis> returns one of the X graphics contexts
that are used to draw the border.
The argument <emphasis remap='I'>which</emphasis> selects which one of the three possible GC's:
<emphasis remap='B'>TK_3D_FLAT_GC</emphasis> returns the context used for flat surfaces,
<emphasis remap='B'>TK_3D_LIGHT_GC</emphasis> returns the context for light shadows,
and <emphasis remap='B'>TK_3D_DARK_GC</emphasis> returns the context for dark shadows.</para>

<para>When a border is no longer needed, <function>Tk_Free3DBorderFromObj</function>
or <function>Tk_Free3DBorder</function> should
be called to release the resources associated with it.
For <function>Tk_Free3DBorderFromObj</function> the border to release is specified
with the window and color name used to create the
border; for <function>Tk_Free3DBorder</function> the border to release is specified
with the Tk_3DBorder token for the border.
There should be exactly one call to <function>Tk_Free3DBorderFromObj</function> or
<function>Tk_Free3DBorder</function> for each call to <function>Tk_Alloc3DBorderFromObj</function>
or <function>Tk_Get3DBorder</function>.</para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>3D, background, border, color, depressed, illumination, object, polygon, raised, shadow, three-dimensional effect</para>
</refsect1>
</refentry>

