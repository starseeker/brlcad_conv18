<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='panic3'>

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>8.4</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_Panic</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>8.4</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_Panic</refname>
<refname>Tcl_PanicVA</refname>
<refname>Tcl_SetPanicProc</refname>
<refpurpose>report fatal error and abort</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>void <function>Tcl_Panic</function></funcdef>
<paramdef><parameter>format</parameter></paramdef>
<paramdef><parameter>arg</parameter></paramdef>
<paramdef><parameter>arg</parameter></paramdef>
<paramdef><parameter>...</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_PanicVA</function></funcdef>
<paramdef><parameter>format</parameter></paramdef>
<paramdef><parameter>argList</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_SetPanicProc</function></funcdef>
<paramdef><parameter>panicProc</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tcl_PanicProc *panicProc -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"const char*"</entry><entry>"format"</entry><entry>"in"</entry>
<entry>
<para>A printf-style format string.</para>
</entry>
</row>
<row><entry>""</entry><entry>arg</entry><entry>in</entry>
<entry>
<para>Arguments matching the format string.</para>
</entry>
</row>
<row><entry>va_list</entry><entry>argList</entry><entry>in</entry>
<entry>
<para>An argument list of arguments matching the format string.
Must have been initialized using <emphasis remap='B'>va_start</emphasis>,
and cleared using <emphasis remap='B'>va_end</emphasis>.</para>
</entry>
</row>
<row><entry>Tcl_PanicProc</entry><entry>*panicProc</entry><entry>in</entry>
<entry>
<para>Procedure to report fatal error message and abort.</para>

<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>When the Tcl library detects that its internal data structures are in an
inconsistent state, or that its C procedures have been called in a
manner inconsistent with their documentation, it calls <function>Tcl_Panic</function>
to display a message describing the error and abort the process.  The
<varname role='parameter'>format</varname> argument is a format string describing how to format the
remaining arguments <emphasis remap='I'>arg</emphasis> into an error message, according to the
same formatting rules used by the <emphasis remap='B'>printf</emphasis> family of functions.  The
same formatting rules are also used by the built-in Tcl command
<varname role='parameter'>format</varname>.</para>

<para>In a freshly loaded Tcl library, <function>Tcl_Panic</function> prints the formatted
error message to the standard error file of the process, and then
calls <emphasis remap='B'>abort</emphasis> to terminate the process.  <function>Tcl_Panic</function> does not
return.</para>

<para><function>Tcl_SetPanicProc</function> may be used to modify the behavior of
<function>Tcl_Panic</function>.  The <emphasis remap='I'>panicProc</emphasis> argument should match the
type <type>Tcl_PanicProc</type>:</para>

<programlisting remap='CS'>
<funcsynopsis>
<funcprototype>
<funcdef>typedef void <function>Tcl_PanicProc</function></funcdef>
    <paramdef>const char * <parameter>format</parameter></paramdef>
    <paramdef><parameter>arg</parameter></paramdef>
    <paramdef><parameter>arg</parameter></paramdef>
    <paramdef><parameter>...</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>After <function>Tcl_SetPanicProc</function> returns, any future calls to
<function>Tcl_Panic</function> will call <emphasis remap='I'>panicProc</emphasis>, passing along the
<varname role='parameter'>format</varname> and <emphasis remap='I'>arg</emphasis> arguments.  To maintain consistency with the
callers of <function>Tcl_Panic</function>, <emphasis remap='I'>panicProc</emphasis> must not return; it must
call <emphasis remap='B'>abort</emphasis>.  <emphasis remap='I'>panicProc</emphasis> should avoid making calls into the
Tcl library, or into other libraries that may call the Tcl library,
since the original call to <function>Tcl_Panic</function> indicates the Tcl library is
not in a state of reliable operation.</para>  

<para>The typical use of <function>Tcl_SetPanicProc</function> arranges for the error message
to be displayed or reported in a manner more suitable for the
application or the platform.  As an example, the Windows implementation
of <emphasis remap='B'>wish</emphasis> calls <function>Tcl_SetPanicProc</function> to force all panic messages
to be displayed in a system dialog box, rather than to be printed to the
standard error file (usually not visible under Windows).</para>

<para>Although the primary callers of <function>Tcl_Panic</function> are the procedures of
the Tcl library, <function>Tcl_Panic</function> is a public function and may be called
by any extension or application that wishes to abort the process and
have a panic message displayed the same way that panic messages from Tcl
will be displayed.</para>

<para><function>Tcl_PanicVA</function> is the same as <function>Tcl_Panic</function> except that instead of
taking a variable number of arguments it takes an argument list.</para>

</refsect1>

<refsect1 xml:id='see_also'><title>SEE ALSO</title>
<para><citerefentry><refentrytitle>abort</refentrytitle><manvolnum>3</manvolnum></citerefentry>, <citerefentry><refentrytitle>printf</refentrytitle><manvolnum>3</manvolnum></citerefentry>, exec(n), format(n)</para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>abort, fatal, error</para>
</refsect1>
</refentry>

