<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='getindex3'>

<!-- '\" Copyright (c) 1997 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>8.1</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_GetIndexFromObj</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>8.1</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_GetIndexFromObj</refname>
<refname>Tcl_GetIndexFromObjStruct</refname>
<refpurpose>lookup string in table of keywords</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>int <function>Tcl_GetIndexFromObj</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>tablePtr</parameter></paramdef>
<paramdef><parameter>msg</parameter></paramdef>
<paramdef><parameter>flags</parameter></paramdef>
<paramdef><parameter>
 indexPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_GetIndexFromObjStruct</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>structTablePtr</parameter></paramdef>
<paramdef><parameter>offset</parameter></paramdef>
<paramdef><parameter>
 msg</parameter></paramdef>
<paramdef><parameter>flags</parameter></paramdef>
<paramdef><parameter>indexPtr</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS const char *structTablePtr in/out -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tcl_Interp"</entry><entry>"*interp"</entry><entry>"in"</entry>
<entry>
<para>Interpreter to use for error reporting; if NULL, then no message is
provided on errors.</para>
</entry>
</row>
<row><entry>Tcl_Obj</entry><entry>*objPtr</entry><entry>in/out</entry>
<entry>
<para>The string value of this object is used to search through <emphasis remap='I'>tablePtr</emphasis>.
The internal representation is modified to hold the index of the matching
table entry.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>**tablePtr</entry><entry>in</entry>
<entry>
<para>An array of null-terminated strings.  The end of the array is marked
by a NULL string pointer.</para>
</entry>
</row>
<row><entry>"const void"</entry><entry>*structTablePtr</entry><entry>in</entry>
<entry>
<para>An array of arbitrary type, typically some <emphasis remap='B'>struct</emphasis> type.
The first member of the structure must be a null-terminated string.
The size of the structure is given by <emphasis remap='I'>offset</emphasis>.</para>
</entry>
</row>
<row><entry>int</entry><entry>offset</entry><entry>in</entry>
<entry>
<para>The offset to add to structTablePtr to get to the next entry.
The end of the array is marked by a NULL string pointer.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*msg</entry><entry>in</entry>
<entry>
<para>Null-terminated string describing what is being looked up, such as
<emphasis remap='B'>option</emphasis>.  This string is included in error messages.</para>
</entry>
</row>
<row><entry>int</entry><entry>flags</entry><entry>in</entry>
<entry>
<para>OR-ed combination of bits providing additional information for
operation.  The only bit that is currently defined is <emphasis remap='B'>TCL_EXACT</emphasis>.</para>
</entry>
</row>
<row><entry>int</entry><entry>*indexPtr</entry><entry>out</entry>
<entry>
<para>The index of the string in <emphasis remap='I'>tablePtr</emphasis> that matches the value of
<emphasis remap='I'>objPtr</emphasis> is returned here.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>This procedure provides an efficient way for looking up keywords,
switch names, option names, and similar things where the value of
an object must be one of a predefined set of values.
<emphasis remap='I'>ObjPtr</emphasis> is compared against each of
the strings in <emphasis remap='I'>tablePtr</emphasis> to find a match.  A match occurs if
<emphasis remap='I'>objPtr</emphasis>'s string value is identical to one of the strings in
<emphasis remap='I'>tablePtr</emphasis>, or if it is a non-empty unique abbreviation
for exactly one of the strings in <emphasis remap='I'>tablePtr</emphasis> and the
<emphasis remap='B'>TCL_EXACT</emphasis> flag was not specified; in either case
the index of the matching entry is stored at <emphasis remap='I'>*indexPtr</emphasis>
and <emphasis remap='B'>TCL_OK</emphasis> is returned.</para>

<para>If there is no matching entry,
<emphasis remap='B'>TCL_ERROR</emphasis> is returned and an error message is left in <emphasis remap='I'>interp</emphasis>'s
result if <emphasis remap='I'>interp</emphasis> is not NULL.  <emphasis remap='I'>Msg</emphasis> is included in the
error message to indicate what was being looked up.  For example,
if <emphasis remap='I'>msg</emphasis> is <emphasis remap='B'>option</emphasis> the error message will have a form like
<quote><emphasis remap='B'>bad option "firt":</emphasis></quote></para>

<para>If <function>Tcl_GetIndexFromObj</function> completes successfully it modifies the
internal representation of <emphasis remap='I'>objPtr</emphasis> to hold the address of
the table and the index of the matching entry.  If <function>Tcl_GetIndexFromObj</function>
is invoked again with the same <emphasis remap='I'>objPtr</emphasis> and <emphasis remap='I'>tablePtr</emphasis>
arguments (e.g. during a reinvocation of a Tcl command), it returns
the matching index immediately without having to redo the lookup
operation.  Note: <function>Tcl_GetIndexFromObj</function> assumes that the entries
in <emphasis remap='I'>tablePtr</emphasis> are static: they must not change between
invocations.  If the value of <emphasis remap='I'>objPtr</emphasis> is the empty string,
<function>Tcl_GetIndexFromObj</function> will treat it as a non-matching value
and return <emphasis remap='B'>TCL_ERROR</emphasis>.</para>

<para><function>Tcl_GetIndexFromObjStruct</function> works just like
<function>Tcl_GetIndexFromObj</function>, except that instead of treating
<emphasis remap='I'>tablePtr</emphasis> as an array of string pointers, it treats it as a
pointer to the first string in a series of strings that have
<emphasis remap='I'>offset</emphasis> bytes between them (i.e. that there is a pointer to the
first array of characters at <emphasis remap='I'>tablePtr</emphasis>, a pointer to the second
array of characters at <emphasis remap='I'>tablePtr</emphasis>+<emphasis remap='I'>offset</emphasis> bytes, etc.)
This is particularly useful when processing things like
<emphasis remap='B'>Tk_ConfigurationSpec</emphasis>, whose string keys are in the same place in
each of several array elements.</para>

</refsect1>

<refsect1 xml:id='see_also'><title>SEE ALSO</title>
<para>Tcl_WrongNumArgs</para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>index, object, table lookup</para>
</refsect1>
</refentry>

