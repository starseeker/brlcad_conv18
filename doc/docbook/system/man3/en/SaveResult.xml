<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='saveresult3'>

<!-- '\" Copyright (c) 1997 by Sun Microsystems, Inc.
'\" Contributions from Don Porter, NIST, 2004. (not subject to US copyright) -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>8.1</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_SaveResult</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>8.1</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_SaveInterpState</refname>
<refname>Tcl_RestoreInterpState</refname>
<refname>Tcl_DiscardInterpState</refname>
<refname>Tcl_SaveResult</refname>
<refname>Tcl_RestoreResult</refname>
<refname>Tcl_DiscardResult</refname>
<refpurpose>save and restore an interpreter's state</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>Tcl_InterpState <function>Tcl_SaveInterpState</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>status</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_RestoreInterpState</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>state</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_DiscardInterpState</function></funcdef>
<paramdef><parameter>state</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_SaveResult</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>savedPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_RestoreResult</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>savedPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_DiscardResult</function></funcdef>
<paramdef><parameter>savedPtr</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tcl_InterpState savedPtr -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tcl_Interp"</entry><entry>"*interp"</entry><entry>"in"</entry>
<entry>
<para>Interpreter for which state should be saved.</para>
</entry>
</row>
<row><entry>int</entry><entry>status</entry><entry>in</entry>
<entry>
<para>Return code value to save as part of interpreter state.</para>
</entry>
</row>
<row><entry>Tcl_InterpState</entry><entry>state</entry><entry>in</entry>
<entry>
<para>Saved state token to be restored or discarded.</para>
</entry>
</row>
<row><entry>Tcl_SavedResult</entry><entry>*savedPtr</entry><entry>in</entry>
<entry>
<para>Pointer to location where interpreter result should be saved or restored.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<!-- .VS 8.5 -->
<para>These routines allows a C procedure to take a snapshot of the current
state of an interpreter so that it can be restored after a call
to <emphasis remap='B'>Tcl_Eval</emphasis> or some other routine that modifies the interpreter
state.  There are two triplets of routines meant to work together.</para>

<para>The first triplet stores the snapshot of interpreter state in
an opaque token returned by <function>Tcl_SaveInterpState</function>.  That token
value may then be passed back to one of <function>Tcl_RestoreInterpState</function>
or <function>Tcl_DiscardInterpState</function>, depending on whether the interp
state is to be restored.  So long as one of the latter two routines
is called, Tcl will take care of memory management.</para>

<para>The second triplet stores the snapshot of only the interpreter
result (not its complete state) in memory allocated by the caller.
These routines are passed a pointer to a <type>Tcl_SavedResult</type> structure
that is used to store enough information to restore the interpreter result.
This structure can be allocated on the stack of the calling
procedure.  These routines do not save the state of any error
information in the interpreter (e.g. the <option>-errorcode</option> or
<option>-errorinfo</option> return options, when an error is in progress).</para>

<para>Because the routines <function>Tcl_SaveInterpState</function>,
<function>Tcl_RestoreInterpState</function>, and <function>Tcl_DiscardInterpState</function> perform
a superset of the functions provided by the other routines,
any new code should only make use of the more powerful routines.
The older, weaker routines <function>Tcl_SaveResult</function>, <function>Tcl_RestoreResult</function>,
and <function>Tcl_DiscardResult</function> continue to exist only for the sake
of existing programs that may already be using them.</para>  

<para><function>Tcl_SaveInterpState</function> takes a snapshot of those portions of
interpreter state that make up the full result of script evaluation.
This include the interpreter result, the return code (passed in
as the <emphasis remap='I'>status</emphasis> argument, and any return options, including
<option>-errorinfo</option> and <option>-errorcode</option> when an error is in progress.
This snapshot is returned as an opaque token of type <type>Tcl_InterpState</type>.
The call to <function>Tcl_SaveInterpState</function> does not itself change the
state of the interpreter.  Unlike <function>Tcl_SaveResult</function>, it does
not reset the interpreter.</para>

<para><function>Tcl_RestoreInterpState</function> accepts a <type>Tcl_InterpState</type> token
previously returned by <function>Tcl_SaveInterpState</function> and restores the
state of the interp to the state held in that snapshot.  The return
value of <function>Tcl_RestoreInterpState</function> is the status value originally
passed to <function>Tcl_SaveInterpState</function> when the snapshot token was
created.</para>

<para><function>Tcl_DiscardInterpState</function> is called to release a <type>Tcl_InterpState</type>
token previously returned by <function>Tcl_SaveInterpState</function> when that
snapshot is not to be restored to an interp.</para>

<para>The <type>Tcl_InterpState</type> token returned by <function>Tcl_SaveInterpState</function>
must eventually be passed to either <function>Tcl_RestoreInterpState</function>
or <function>Tcl_DiscardInterpState</function> to avoid a memory leak.  Once
the <type>Tcl_InterpState</type> token is passed to one of them, the
token is no longer valid and should not be used anymore.</para>
<!-- .VE 8.5 -->

<para><function>Tcl_SaveResult</function> moves the string and object results
of <emphasis remap='I'>interp</emphasis> into the location specified by <emphasis remap='I'>statePtr</emphasis>.
<function>Tcl_SaveResult</function> clears the result for <emphasis remap='I'>interp</emphasis> and
leaves the result in its normal empty initialized state.</para>

<para><function>Tcl_RestoreResult</function> moves the string and object results from
<emphasis remap='I'>statePtr</emphasis> back into <emphasis remap='I'>interp</emphasis>.  Any result or error that was
already in the interpreter will be cleared.  The <emphasis remap='I'>statePtr</emphasis> is left
in an uninitialized state and cannot be used until another call to
<function>Tcl_SaveResult</function>.</para>

<para><function>Tcl_DiscardResult</function> releases the saved interpreter state
stored at <emphasis remap='B'>statePtr</emphasis>.  The state structure is left in an
uninitialized state and cannot be used until another call to
<function>Tcl_SaveResult</function>.</para>

<para>Once <function>Tcl_SaveResult</function> is called to save the interpreter
result, either <function>Tcl_RestoreResult</function> or
<function>Tcl_DiscardResult</function> must be called to properly clean up the
memory associated with the saved state.</para>  

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>result, state, interp</para>
</refsect1>
</refentry>

