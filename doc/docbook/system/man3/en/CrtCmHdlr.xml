<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='crtcmhdlr3'>

<!-- '\" Copyright (c) 2000 Ajuba Solutions. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>8.4</date></refentryinfo>
<refmeta>
<refentrytitle>Tk_CreateClientMessageHandler</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>8.4</refmiscinfo>
<refmiscinfo class='source'>Tk</refmiscinfo>
<refmiscinfo class='manual'>Tk Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tk_CreateClientMessageHandler</refname>
<refname>Tk_DeleteClientMessageHandler</refname>
<refpurpose>associate procedure callback with ClientMessage type X events</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tk.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>Tk_CreateClientMessageHandler</function></funcdef>
<paramdef><parameter>proc</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tk_DeleteClientMessageHandler</function></funcdef>
<paramdef><parameter>proc</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<para>Procedure to invoke whenever a ClientMessage X event occurs on any display.</para>
<!-- .BE -->

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para><function>Tk_CreateClientMessageHandler</function> arranges for <emphasis remap='I'>proc</emphasis> to be invoked
in the future whenever a ClientMessage X event occurs that is not handled by
<emphasis remap='B'>WM_PROTOCOL</emphasis>.  <function>Tk_CreateClientMessageHandler</function> is intended for use
by applications which need to watch X ClientMessage events, such as drag and
drop applications.</para>

<para>The callback to <emphasis remap='I'>proc</emphasis> will be made by <emphasis remap='B'>Tk_HandleEvent</emphasis>;
this mechanism only works in programs that dispatch events
through <emphasis remap='B'>Tk_HandleEvent</emphasis> (or through other Tk procedures that
call <emphasis remap='B'>Tk_HandleEvent</emphasis>, such as <emphasis remap='B'>Tk_DoOneEvent</emphasis> or
<emphasis remap='B'>Tk_MainLoop</emphasis>).</para>

<para><emphasis remap='I'>Proc</emphasis> should have arguments and result that match the
type <function>Tk_ClientMessageProc</function>:</para>
<programlisting remap='CS'>
<funcsynopsis>
<funcprototype>
<funcdef>typedef int <function>Tk_ClientMessageProc</function></funcdef>
    <paramdef>Tk_Window <parameter>tkwin</parameter></paramdef>
    <paramdef>XEvent * <parameter>eventPtr</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>The <varname role='parameter'>tkwin</varname> parameter to <emphasis remap='I'>proc</emphasis> is the Tk window which is
associated with this event.  <emphasis remap='I'>EventPtr</emphasis> is a pointer to the X event.</para>

<para>Whenever an X ClientMessage event is processed by <emphasis remap='B'>Tk_HandleEvent</emphasis>,
the <emphasis remap='I'>proc</emphasis> is called if it was not handled as a <emphasis remap='B'>WM_PROTOCOL</emphasis>.
The return value from <emphasis remap='I'>proc</emphasis> is normally 0.
A non-zero return value indicates that the event is not to be handled
further; that is, <emphasis remap='I'>proc</emphasis> has done all processing that is to be
allowed for the event.</para>

<para>If there are multiple ClientMessage event handlers, each one is called
for each event, in the order in which they were established.</para>

<para><function>Tk_DeleteClientMessageHandler</function> may be called to delete a
previously-created ClientMessage event handler: it deletes each handler it
finds that matches the <emphasis remap='I'>proc</emphasis> argument.  If no such handler exists,
then <function>Tk_DeleteClientMessageHandler</function> returns without doing anything.
Although Tk supports it, it's probably a bad idea to have more than one
callback with the same <emphasis remap='I'>proc</emphasis> argument.</para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>bind, callback, event, handler</para>
</refsect1>
</refentry>

