<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='crtwindow3'>

<!-- '\" Copyright (c) 1990 The Regents of the University of California.
'\" Copyright (c) 1994\-1996 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>4.2</date></refentryinfo>
<refmeta>
<refentrytitle>Tk_CreateWindow</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>4.2</refmiscinfo>
<refmiscinfo class='source'>Tk</refmiscinfo>
<refmiscinfo class='manual'>Tk Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tk_CreateWindow</refname>
<refname>Tk_CreateWindowFromPath</refname>
<refname>Tk_DestroyWindow</refname>
<refname>Tk_MakeWindowExist</refname>
<refpurpose>create or delete window</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tk.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>Tk_Window <function>Tk_CreateWindow</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>parent</parameter></paramdef>
<paramdef><parameter>name</parameter></paramdef>
<paramdef><parameter>topLevScreen</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>Tk_Window <function>Tk_CreateAnonymousWindow</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>parent</parameter></paramdef>
<paramdef><parameter>topLevScreen</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>Tk_Window <function>Tk_CreateWindowFromPath</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>pathName</parameter></paramdef>
<paramdef><parameter>topLevScreen</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tk_DestroyWindow</function></funcdef>
<paramdef><parameter>tkwin</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tk_MakeWindowExist</function></funcdef>
<paramdef><parameter>tkwin</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tcl_Interp *topLevScreen -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tcl_Interp"</entry><entry>"*interp"</entry><entry>"out"</entry>
<entry>
<para>Tcl interpreter to use for error reporting.  If no error occurs,
then <emphasis remap='I'>*interp</emphasis> is not modified.</para>
</entry>
</row>
<row><entry>Tk_Window</entry><entry>parent</entry><entry>in</entry>
<entry>
<para>Token for the window that is to serve as the logical parent of
the new window.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*name</entry><entry>in</entry>
<entry>
<para>Name to use for this window.  Must be unique among all children of
the same <emphasis remap='I'>parent</emphasis>.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*topLevScreen</entry><entry>in</entry>
<entry>
<para>Has same format as <emphasis remap='I'>screenName</emphasis>.  If NULL, then new window is
created as an internal window.  If non-NULL, new window is created as
a top-level window on screen <emphasis remap='I'>topLevScreen</emphasis>.  If <emphasis remap='I'>topLevScreen</emphasis>
is an empty string
(<quote></quote>)
then new window is created as top-level window of <emphasis remap='I'>parent</emphasis>'s screen.</para>
</entry>
</row>
<row><entry>Tk_Window</entry><entry>tkwin</entry><entry>in</entry>
<entry>
<para>Token for window.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*pathName</entry><entry>in</entry>
<entry>
<para>Name of new window, specified as path name within application
(e.g. <markup>.a.b.c</markup>).</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>The procedures <function>Tk_CreateWindow</function>, 
<function>Tk_CreateAnonymousWindow</function>, and <function>Tk_CreateWindowFromPath</function>
are used to create new windows for
use in Tk-based applications.  Each of the procedures returns a token
that can be used to manipulate the window in other calls to the Tk
library.  If the window could not be created successfully, then NULL
is returned and <emphasis remap='I'>interp-&gt;result</emphasis> is modified to hold an error
message.</para>

<para>Tk supports two different kinds of windows:  internal
windows and top-level windows.
An internal window is an interior window of a Tk application, such as a
scrollbar or menu bar or button.  A top-level window is one that is
created as a child of a screen's root window, rather than as an
interior window, but which is logically part of some existing main
window.  Examples of top-level windows are pop-up menus and dialog boxes.</para>

<para>New windows may be created by calling
<function>Tk_CreateWindow</function>.  If the <emphasis remap='I'>topLevScreen</emphasis> argument is
NULL, then the new window will be an internal window.  If
<emphasis remap='I'>topLevScreen</emphasis> is non-NULL, then the new window will be a
top-level window: <emphasis remap='I'>topLevScreen</emphasis> indicates the name of
a screen and the new window will be created as a child of the
root window of <emphasis remap='I'>topLevScreen</emphasis>.  In either case Tk will
consider the new window to be the logical child of <emphasis remap='I'>parent</emphasis>:
the new window's path name will reflect this fact, options may
be specified for the new window under this assumption, and so on.
The only difference is that new X window for a top-level window
will not be a child of <emphasis remap='I'>parent</emphasis>'s X window.  For example, a pull-down
menu's <emphasis remap='I'>parent</emphasis> would be the button-like window used to invoke it,
which would in turn be a child of the menu bar window.  A dialog box might
have the application's main window as its parent.</para>

<para><function>Tk_CreateAnonymousWindow</function> differs from <function>Tk_CreateWindow</function> in
that it creates an unnamed window.  This window will be manipulable
only using C interfaces, and will not be visible to Tcl scripts.  Both
interior windows and top-level windows may be created with
<function>Tk_CreateAnonymousWindow</function>.</para>

<para><function>Tk_CreateWindowFromPath</function> offers an alternate way of specifying
new windows.  In <function>Tk_CreateWindowFromPath</function> the new
window is specified with a token for any window in the target
application (<emphasis remap='I'>tkwin</emphasis>), plus a path name for the new window.
It produces the same effect as <function>Tk_CreateWindow</function> and allows
both top-level and internal windows to be created, depending on
the value of <emphasis remap='I'>topLevScreen</emphasis>.  In calls to <function>Tk_CreateWindowFromPath</function>,
as in calls to <function>Tk_CreateWindow</function>, the parent of the new window
must exist at the time of the call, but the new window must not
already exist.</para>

<para>The window creation procedures do not
actually issue the command to X to create a window.
Instead, they create a local data structure associated with
the window and defer the creation of the X window.
The window will actually be created by the first call to
<emphasis remap='B'>Tk_MapWindow</emphasis>.  Deferred window creation allows various
aspects of the window (such as its size, background color,
etc.) to be modified after its creation without incurring
any overhead in the X server.  When the window is finally
mapped all of the window attributes can be set while creating
the window.</para>

<para>The value returned by a window-creation procedure is not the
X token for the window (it cannot be, since X has not been
asked to create the window yet).  Instead, it is a token
for Tk's local data structure for the window.  Most
of the Tk library procedures take Tk_Window tokens, rather
than X identifiers.  The actual
X window identifier can be retrieved from the local
data structure using the <emphasis remap='B'>Tk_WindowId</emphasis> macro;  see
the manual entry for <emphasis remap='B'>Tk_WindowId</emphasis> for details.</para>

<para><function>Tk_DestroyWindow</function> deletes a window and all the data
structures associated with it, including any event handlers
created with <emphasis remap='B'>Tk_CreateEventHandler</emphasis>.  In addition,
<function>Tk_DestroyWindow</function> will delete any children of <emphasis remap='I'>tkwin</emphasis>
recursively (where children are defined in the Tk sense, consisting
of all windows that were created with the given window as <emphasis remap='I'>parent</emphasis>).
If <emphasis remap='I'>tkwin</emphasis> is an internal window, then event
handlers interested in destroy events
are invoked immediately.  If <emphasis remap='I'>tkwin</emphasis> is a top-level or main window,
then the event handlers will be invoked later, after X has seen
the request and returned an event for it.</para>

<para>If a window has been created
but has not been mapped, so no X window exists, it is
possible to force the creation of the X window by
calling <function>Tk_MakeWindowExist</function>.  This procedure issues
the X commands to instantiate the window given by <emphasis remap='I'>tkwin</emphasis>.</para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>create, deferred creation, destroy, display, internal window,
screen, top-level window, window</para>
</refsect1>
</refentry>

