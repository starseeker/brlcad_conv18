<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='assocdata3'>

<!-- '\" Copyright (c) 1995\-1996 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" 
'\" RCS: @(#) $Id$ -->
<refentryinfo><date>7.5</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_SetAssocData</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>7.5</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_GetAssocData</refname>
<refname>Tcl_SetAssocData</refname>
<refname>Tcl_DeleteAssocData</refname>
<refpurpose>manage associations of string keys and user specified data with Tcl interpreters</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>ClientData <function>Tcl_GetAssocData</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>key</parameter></paramdef>
<paramdef><parameter>delProcPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_SetAssocData</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>key</parameter></paramdef>
<paramdef><parameter>delProc</parameter></paramdef>
<paramdef><parameter>clientData</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_DeleteAssocData</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>key</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tcl_InterpDeleteProc **delProcPtr -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tcl_Interp"</entry><entry>"*interp"</entry><entry>"in"</entry>
<entry>
<para>Interpreter in which to execute the specified command.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*key</entry><entry>in</entry>
<entry>
<para>Key for association with which to store data or from which to delete or
retrieve data.  Typically the module prefix for a package.</para>
</entry>
</row>
<row><entry>Tcl_InterpDeleteProc</entry><entry>*delProc</entry><entry>in</entry>
<entry>
<para>Procedure to call when <varname role='parameter'>interp</varname> is deleted.</para>
</entry>
</row>
<row><entry>Tcl_InterpDeleteProc</entry><entry>**delProcPtr</entry><entry>in</entry>
<entry>
<para>Pointer to location in which to store address of current deletion procedure
for association.  Ignored if NULL.</para>
</entry>
</row>
<row><entry>ClientData</entry><entry>clientData</entry><entry>in</entry>
<entry>
<para>Arbitrary one-word value associated with the given key in this
interpreter.  This data is owned by the caller.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>These procedures allow extensions to associate their own data with
a Tcl interpreter.
An association consists of a string key, typically the name of
the extension, and a one-word value, which is typically a pointer
to a data structure holding data specific to the extension.
Tcl makes no interpretation of either the key or the value for
an association.</para>

<para>Storage management is facilitated by storing with each association a
procedure to call when the interpreter is deleted. This
procedure can dispose of the storage occupied by the client's data in any
way it sees fit.</para>

<para><function>Tcl_SetAssocData</function> creates an association between a string
key and a user specified datum in the given interpreter.
If there is already an association with the given <emphasis remap='I'>key</emphasis>,
<function>Tcl_SetAssocData</function> overwrites it with the new information.
It is up to callers to organize their use of names to avoid conflicts,
for example, by using package names as the keys.
If the <emphasis remap='I'>deleteProc</emphasis> argument is non-NULL it specifies the address of a
procedure to invoke if the interpreter is deleted before the association
is deleted.  <emphasis remap='I'>DeleteProc</emphasis> should have arguments and result that match
the type <type>Tcl_InterpDeleteProc</type>:</para>
<programlisting remap='CS'>
<funcsynopsis>
<funcprototype>
<funcdef>typedef void <function>Tcl_InterpDeleteProc</function></funcdef>
    <paramdef>ClientData <parameter>clientData</parameter></paramdef>
    <paramdef>Tcl_Interp * <parameter>interp</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>When <emphasis remap='I'>deleteProc</emphasis> is invoked the <varname role='parameter'>clientData</varname> and <varname role='parameter'>interp</varname>
arguments will be the same as the corresponding arguments passed to
<function>Tcl_SetAssocData</function>.
The deletion procedure will <emphasis remap='I'>not</emphasis> be invoked if the association
is deleted before the interpreter is deleted.</para>

<para><function>Tcl_GetAssocData</function> returns the datum stored in the association with the
specified key in the given interpreter, and if the <emphasis remap='I'>delProcPtr</emphasis> field
is non-<emphasis remap='B'>NULL</emphasis>, the address indicated by it gets the address of the
delete procedure stored with this association. If no association with the
specified key exists in the given interpreter <function>Tcl_GetAssocData</function>
returns <emphasis remap='B'>NULL</emphasis>.</para>

<para><function>Tcl_DeleteAssocData</function> deletes an association with a specified key in
the given interpreter.  Then it calls the deletion procedure.</para>
</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>association, data, deletion procedure, interpreter, key</para>
</refsect1>
</refentry>

