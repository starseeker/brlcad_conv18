<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='setclassprocs3'>

<!-- '\" Copyright (c) 2000 Ajuba Solutions. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>8.4</date></refentryinfo>
<refmeta>
<refentrytitle>Tk_SetClassProcs</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>8.4</refmiscinfo>
<refmiscinfo class='source'>Tk</refmiscinfo>
<refmiscinfo class='manual'>Tk Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tk_SetClassProcs</refname>
<refpurpose>register widget specific procedures</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tk.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>Tk_SetClassProcs</function></funcdef>
<paramdef><parameter>tkwin</parameter></paramdef>
<paramdef><parameter>procs</parameter></paramdef>
<paramdef><parameter>instanceData</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tk_ClassProc instanceData -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tk_Window"</entry><entry>"tkwin"</entry><entry>"in"</entry>
<entry>
<para>Token for window to modify.</para>
</entry>
</row>
<row><entry>Tk_ClassProcs</entry><entry>*procs</entry><entry>in</entry>
<entry>
<para>Pointer to data structure containing widget specific procedures.
The data structure pointed to by <emphasis remap='I'>procs</emphasis> must be static:
Tk keeps a reference to it as long as the window exists.</para>
</entry>
</row>
<row><entry>ClientData</entry><entry>instanceData</entry><entry>in</entry>
<entry>
<para>Arbitrary one-word value to pass to widget callbacks.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para><function>Tk_SetClassProcs</function> is called to register a set of procedures that
are used as callbacks in different places.</para>

<para>The structure pointed to by <emphasis remap='I'>procs</emphasis> contains the following:</para>
<programlisting remap='CS'>
typedef struct Tk_ClassProcs {
    unsigned int <emphasis remap='I'>size</emphasis>;
    Tk_ClassWorldChangedProc *<emphasis remap='I'>worldChangedProc</emphasis>;
    Tk_ClassCreateProc *<emphasis remap='I'>createProc</emphasis>;
    Tk_ClassModalProc *<emphasis remap='I'>modalProc</emphasis>;
} Tk_ClassProcs;
</programlisting> <!-- remap='CE' -->
<para>The <emphasis remap='I'>size</emphasis> field is used to simplify future expansion of the
structure. It should always be set to (literally) <emphasis remap='B'>sizeof(Tk_ClassProcs)</emphasis>.</para>

<para><emphasis remap='I'>worldChangedProc</emphasis> is invoked when the system has altered
in some way that requires some reaction from the widget.  For example,
when a font alias (see the <emphasis remap='B'>font</emphasis> manual entry) is reconfigured,
widgets configured to use that font alias must update their display
accordingly.  <emphasis remap='I'>worldChangedProc</emphasis> should have arguments and results
that match the type <function>Tk_ClassWorldChangedProc</function>:</para>
<programlisting remap='CS'>
<funcsynopsis>
<funcprototype>
<funcdef>typedef void <function>Tk_ClassWorldChangedProc</function></funcdef>
    <paramdef>ClientData <parameter>instanceData</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>The <varname role='parameter'>instanceData</varname> parameter passed to the <emphasis remap='I'>worldChangedProc</emphasis>
will be identical to the <varname role='parameter'>instanceData</varname> parameter passed to
<function>Tk_SetClassProcs</function>.</para>

<para><emphasis remap='I'>createProc</emphasis> is used to create platform-dependant windows.  It is
invoked by <emphasis remap='B'>Tk_MakeWindowExist</emphasis>.  <emphasis remap='I'>createProc</emphasis> should have
arguments and results that match the type <function>Tk_ClassCreateProc</function>:</para>
<programlisting remap='CS'>
<funcsynopsis>
<funcprototype>
<funcdef>typedef Window <function>Tk_ClassCreateProc</function></funcdef>
    <paramdef>Tk_Window <parameter>tkwin</parameter></paramdef>
    <paramdef>Window <parameter>parent</parameter></paramdef>
    <paramdef>ClientData <parameter>instanceData</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>The <varname role='parameter'>tkwin</varname> and <varname role='parameter'>instanceData</varname> parameters will be identical to
the <varname role='parameter'>tkwin</varname> and <varname role='parameter'>instanceData</varname> parameters passed to
<function>Tk_SetClassProcs</function>.  The <varname role='parameter'>parent</varname> parameter will be the parent
of the window to be created.  The <emphasis remap='I'>createProc</emphasis> should return the
created window.</para>

<para><emphasis remap='I'>modalProc</emphasis> is invoked after all bindings on a widget have been
triggered in order to handle a modal loop.  <emphasis remap='I'>modalProc</emphasis> should
have arguments and results that match the type <function>Tk_ClassModalProc</function>:</para>
<programlisting remap='CS'>
<funcsynopsis>
<funcprototype>
<funcdef>typedef void <function>Tk_ClassModalProc</function></funcdef>
    <paramdef>Tk_Window <parameter>tkwin</parameter></paramdef>
    <paramdef>XEvent * <parameter>eventPtr</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>The <varname role='parameter'>tkwin</varname> parameter to <emphasis remap='I'>modalProc</emphasis> will be identical to the
<varname role='parameter'>tkwin</varname> parameter passed to <function>Tk_SetClassProcs</function>.  The
<varname role='parameter'>eventPtr</varname> parameter will be a pointer to an XEvent structure
describing the event being processed.</para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>callback, class</para>
</refsect1>
</refentry>

