<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='name3'>

<!-- '\" Copyright (c) 1990 The Regents of the University of California.
'\" Copyright (c) 1994\-1997 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refmeta>
<refentrytitle>Tk_Name</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='manual'>Tk</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tk_Name</refname>
<refname>Tk_PathName</refname>
<refname>Tk_NameToWindow</refname>
<refpurpose>convert between names and window tokens</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tk.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>Tk_Uid <function>Tk_Name</function></funcdef>
<paramdef><parameter>tkwin</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>char *<function>Tk_PathName</function></funcdef>
<paramdef><parameter>tkwin</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>Tk_Window <function>Tk_NameToWindow</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>pathName</parameter></paramdef>
<paramdef><parameter>tkwin</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tcl_Interp *pathName -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tk_Window"</entry><entry>"tkwin"</entry><entry>"in"</entry>
<entry>
<para>Token for window.</para>
</entry>
</row>
<row><entry>Tcl_Interp</entry><entry>*interp</entry><entry>out</entry>
<entry>
<para>Interpreter to use for error reporting.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*pathName</entry><entry>in</entry>
<entry>
<para>Character string containing path name of window.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>Each window managed by Tk has two names, a short name that identifies
a window among children of the same parent, and a path name that
identifies the window uniquely among all the windows belonging to the
same main window.  The path name is used more often in Tk than the
short name;  many commands, like <emphasis remap='B'>bind</emphasis>, expect path names as
arguments.</para>

<para>The <function>Tk_Name</function> macro returns a window's
short name, which is the same as the <emphasis remap='I'>name</emphasis> argument
passed to <emphasis remap='B'>Tk_CreateWindow</emphasis> when
the window was created.  The value is returned
as a Tk_Uid, which may be used just like a string pointer but also has
the properties of a unique identifier (see the manual entry for
<emphasis remap='B'>Tk_GetUid</emphasis> for details).</para>

<para>The <function>Tk_PathName</function> macro returns a
hierarchical name for <emphasis remap='I'>tkwin</emphasis>.
Path names have a structure similar to file names in Unix but with
dots between elements instead of slashes:  the main window for
an application has the path name
<quote>.</quote>;
its children have names like
<quote>.a</quote>
and
<quote>.b</quote>;
their children have names like
<quote>.a.aa</quote>
and
<quote>.b.bb</quote>;
and so on.  A window is considered to be a child of
another window for naming purposes if the second window was named
as the first window's <emphasis remap='I'>parent</emphasis> when the first window was created.
This is not always the same as the X window hierarchy.  For
example, a pop-up
is created as a child of the root window, but its logical parent will
usually be a window within the application.</para>

<para>The procedure <function>Tk_NameToWindow</function> returns the token for a window
given its path name (the <emphasis remap='I'>pathName</emphasis> argument) and another window
belonging to the same main window (<emphasis remap='I'>tkwin</emphasis>).  It normally
returns a token for the named window, but if no such window exists
<function>Tk_NameToWindow</function> leaves an error message in <emphasis remap='I'>interp-&gt;result</emphasis>
and returns NULL.  The <emphasis remap='I'>tkwin</emphasis> argument to <function>Tk_NameToWindow</function>
is needed because path names are only unique within a single
application hierarchy.  If, for example, a single process has opened
two main windows, each will have a separate naming hierarchy and the
same path name might appear in each of the hierarchies.  Normally
<emphasis remap='I'>tkwin</emphasis> is the main window of the desired hierarchy, but this
need not be the case:  any window in the desired hierarchy may be used.</para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>name, path name, token, window</para>
</refsect1>
</refentry>

