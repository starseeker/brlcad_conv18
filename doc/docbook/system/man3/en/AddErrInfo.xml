<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='adderrinfo3'>

<!-- '\" Copyright (c) 1989\-1993 The Regents of the University of California.
'\" Copyright (c) 1994\-1997 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>8.5</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_AddErrorInfo</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>8.5</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_GetReturnOptions</refname>
<refname>Tcl_SetReturnOptions</refname>
<refname>Tcl_AddErrorInfo</refname>
<refname>Tcl_AppendObjToErrorInfo</refname>
<refname>Tcl_AddObjErrorInfo</refname>
<refname>Tcl_SetObjErrorCode</refname>
<refname>Tcl_SetErrorCode</refname>
<refname>Tcl_SetErrorCodeVA</refname>
<refname>Tcl_PosixError</refname>
<refname>Tcl_LogCommandInfo</refname>
<refpurpose>retrieve or record information about errors and other return options</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>Tcl_Obj</function> *Tcl_GetReturnOptions</funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>code</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_SetReturnOptions</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>options</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_AddErrorInfo</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>message</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_AppendObjToErrorInfo</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>objPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_AddObjErrorInfo</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>message</parameter></paramdef>
<paramdef><parameter>length</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_SetObjErrorCode</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>errorObjPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_SetErrorCode</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>element</parameter></paramdef>
<paramdef><parameter>element</parameter></paramdef>
<paramdef><parameter>... ( char *) NULL</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_SetErrorCodeVA</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>argList</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>const char *<function>Tcl_PosixError</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>Tcl_LogCommandInfo</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>script</parameter></paramdef>
<paramdef><parameter>command</parameter></paramdef>
<paramdef><parameter>commandLength</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tcl_Interp commandLength -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tcl_Interp"</entry><entry>"*interp"</entry><entry>"in"</entry>
<entry>
<para>Interpreter in which to record information.</para>
</entry>
</row>
<row><entry>int</entry><entry>code</entry><entry></entry>
<entry>
<para>The code returned from script evaluation.</para>
</entry>
</row>
<row><entry>Tcl_Obj</entry><entry>*options</entry><entry></entry>
<entry>
<para>A dictionary of return options.</para>
</entry>
</row>
<row><entry>char</entry><entry>*message</entry><entry>in</entry>
<entry>
<para>For <function>Tcl_AddErrorInfo</function>,
this is a conventional C string to append to the <option>-errorinfo</option> return option.
For <function>Tcl_AddObjErrorInfo</function>,
this points to the first byte of an array of <emphasis remap='I'>length</emphasis> bytes
containing a string to append to the <option>-errorinfo</option> return option.
This byte array may contain embedded null bytes
unless <emphasis remap='I'>length</emphasis> is negative.</para>
<!-- .VS 8.5 -->
</entry>
</row>
<row><entry>Tcl_Obj</entry><entry>*objPtr</entry><entry>in</entry>
<entry>
<para>A message to be appended to the <option>-errorinfo</option> return option
in the form of a Tcl_Obj value.</para>
<!-- .VE 8.5 -->
</entry>
</row>
<row><entry>int</entry><entry>length</entry><entry>in</entry>
<entry>
<para>The number of bytes to copy from <emphasis remap='I'>message</emphasis> when
appending to the <option>-errorinfo</option> return option.
If negative, all bytes up to the first null byte are used.</para>
</entry>
</row>
<row><entry>Tcl_Obj</entry><entry>*errorObjPtr</entry><entry>in</entry>
<entry>
<para>The <option>-errorcode</option> return option will be set to this value.</para>
</entry>
</row>
<row><entry>char</entry><entry>*element</entry><entry>in</entry>
<entry>
<para>String to record as one element of the <option>-errorcode</option> return option.
Last <emphasis remap='I'>element</emphasis> argument must be NULL.</para>
</entry>
</row>
<row><entry>va_list</entry><entry>argList</entry><entry>in</entry>
<entry>
<para>An argument list which must have been initialized using
<emphasis remap='B'>va_start</emphasis>, and cleared using <emphasis remap='B'>va_end</emphasis>.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*script</entry><entry>in</entry>
<entry>
<para>Pointer to first character in script containing command (must be &lt;= command)</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*command</entry><entry>in</entry>
<entry>
<para>Pointer to first character in command that generated the error</para>
</entry>
</row>
<row><entry>int</entry><entry>commandLength</entry><entry>in</entry>
<entry>
<para>Number of bytes in command; -1 means use all bytes up to first null byte</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<!-- .VS 8.5 -->
<para>The <function>Tcl_SetReturnOptions</function> and <emphasis remap='B'>Tcl_GetReturnOptions</emphasis>
routines expose the same capabilities as the <type>return</type> and
<emphasis remap='B'>catch</emphasis> commands, respectively, in the form of a C interface.</para>

<para><emphasis remap='B'>Tcl_GetReturnOptions</emphasis> retrieves the dictionary of return options
from an interpreter following a script evaluation.
Routines such as <emphasis remap='B'>Tcl_Eval</emphasis> are called to evaluate a
script in an interpreter.  These routines return an integer
completion code.  These routines also leave in the interpreter
both a result and a dictionary of return options generated
by script evaluation.  Just as <emphasis remap='B'>Tcl_GetObjResult</emphasis> retrieves
the result, <emphasis remap='B'>Tcl_GetReturnOptions</emphasis> retrieves the dictionary
of return options.  The integer completion code should be
passed as the <emphasis remap='I'>code</emphasis> argument to <emphasis remap='B'>Tcl_GetReturnOptions</emphasis>
so that all required options will be present in the dictionary.
Specifically, a <emphasis remap='I'>code</emphasis> value of <varname role='parameter'>TCL_ERROR</varname> will
ensure that entries for the keys <option>-errorinfo</option>,
<option>-errorcode</option>, and <option>-errorline</option> will appear in the
dictionary.  Also, the entries for the keys <option>-code</option>
and <option>-level</option> will be adjusted if necessary to agree
with the value of <emphasis remap='I'>code</emphasis>.  The <emphasis remap='B'>(Tcl_Obj *)</emphasis> returned
by <emphasis remap='B'>Tcl_GetReturnOptions</emphasis> points to an unshared
<type>Tcl_Obj</type> with reference count of zero.  The dictionary
may be written to, either adding, removing, or overwriting
any entries in it, with the need to check for a shared object.</para>

<para>A typical usage for <emphasis remap='B'>Tcl_GetReturnOptions</emphasis> is to
retrieve the stack trace when script evaluation returns
<varname role='parameter'>TCL_ERROR</varname>, like so:</para>
<programlisting remap='CS'>
int code = Tcl_Eval(interp, script);
if (code == TCL_ERROR) {
    Tcl_Obj *options = Tcl_GetReturnOptions(interp, code);  
    Tcl_Obj *key = Tcl_NewStringObj("-errorinfo", -1);
<funcsynopsis>
<funcsynopsisinfo>
    Tcl_Obj *stackTrace;
</funcsynopsisinfo>
<funcprototype>
<funcdef><function>Tcl_IncrRefCount</function></funcdef>
    <paramdef><parameter>key</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_DictObjGet</function></funcdef>
    <paramdef><parameter>NULL</parameter></paramdef>
    <paramdef><parameter>options</parameter></paramdef>
    <paramdef><parameter>key</parameter></paramdef>
    <paramdef><parameter>&amp;stackTrace</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_DecrRefCount</function></funcdef>
    <paramdef><parameter>key</parameter></paramdef>
</funcprototype>
<funcsynopsisinfo>
/* Do something with stackTrace */ </funcsynopsisinfo>
</funcsynopsis>
}

</programlisting> <!-- remap='CE' -->
<para><function>Tcl_SetReturnOptions</function> sets the return options
of <emphasis remap='I'>interp</emphasis> to be <emphasis remap='I'>options</emphasis>.  If <emphasis remap='I'>options</emphasis>
contains any invalid value for any key, TCL_ERROR will
be returned, and the interp result will be set to an
appropriate error message.  Otherwise, a completion code
in agreement with the <option>-code</option> and <option>-level</option>
keys in <emphasis remap='I'>options</emphasis> will be returned.</para>

<para>As an example, Tcl's <type>return</type> command itself could
be implemented in terms of <function>Tcl_SetReturnOptions</function>
like so:</para>
<programlisting remap='CS'>
if ((objc % 2) == 0) { /* explicit result argument */
<funcsynopsis>
<funcsynopsisinfo>
    objc--;
</funcsynopsisinfo>
<funcprototype>
<funcdef><function>Tcl_SetObjResult</function></funcdef>
    <paramdef><parameter>interp</parameter></paramdef>
    <paramdef>objv [ <parameter>objc</parameter>]</paramdef>
</funcprototype>
</funcsynopsis>
}
<funcsynopsis>
<funcprototype>
<funcdef>return <function>Tcl_SetReturnOptions</function></funcdef>
    <paramdef><parameter>interp</parameter></paramdef>
    <paramdef>Tcl_NewListObj ( objc-1 , objv+1 ) <parameter></parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>(It is not really implemented that way.  Internal access
privileges allow for a more efficient alternative that meshes
better with the bytecode compiler.)</para>

<para>Note that a newly created <type>Tcl_Obj</type> may be passed
in as the <emphasis remap='I'>options</emphasis> argument without the need to tend
to any reference counting.  This is analogous to
<function>Tcl_SetObjResult</function>.</para>

<para>While <function>Tcl_SetReturnOptions</function> provides a general interface
to set any collection of return options, there are a handful
of return options that are very frequently used.  Most 
notably the <option>-errorinfo</option> and <option>-errorcode</option> return
options should be set properly when the command procedure
of a command returns <varname role='parameter'>TCL_ERROR</varname>.  Tcl provides several
simpler interfaces to more directly set these return options.</para>
<!-- .VE 8.5 -->

<para>The <option>-errorinfo</option> option holds a stack trace of the
operations that were in progress when an error occurred,
and is intended to be human-readable.
The <option>-errorcode</option> option holds a list of items that
are intended to be machine-readable.
The first item in the <option>-errorcode</option> value identifies the class of
error that occurred
(e.g. POSIX means an error occurred in a POSIX system call)
and additional elements hold additional pieces
of information that depend on the class.
See the tclvars manual entry for details on the various
formats for the <option>-errorcode</option> option used by
Tcl's built-in commands.</para>

<para>The <option>-errorinfo</option> option value is gradually built up as an
error unwinds through the nested operations.
Each time an error code is returned to <emphasis remap='B'>Tcl_Eval</emphasis>, or
any of the routines that performs script evaluation,
the procedure <function>Tcl_AddErrorInfo</function> is called to add
additional text to the <option>-errorinfo</option> value describing the
command that was being executed when the error occurred.
By the time the error has been passed all the way back
to the application, it will contain a complete trace
of the activity in progress when the error occurred.</para>

<para>It is sometimes useful to add additional information to
the <option>-errorinfo</option> value beyond what can be supplied automatically
by the script evaluation routines.
<function>Tcl_AddErrorInfo</function> may be used for this purpose:
its <emphasis remap='I'>message</emphasis> argument is an additional
string to be appended to the <option>-errorinfo</option> option.
For example, when an error arises during the <emphasis remap='B'>source</emphasis> command,
the procedure <function>Tcl_AddErrorInfo</function> is called to
record the name of the file being processed and the
line number on which the error occurred.
Likewise, when an error arises during evaluation of a
Tcl procedures, the procedure name and line number
within the procedure are recorded, and so on.
The best time to call <function>Tcl_AddErrorInfo</function> is just after
a script evaluation routine has returned <varname role='parameter'>TCL_ERROR</varname>.
The value of the <option>-errorline</option> return option (retrieved
via a call to <emphasis remap='B'>Tcl_GetReturnOptions</emphasis>) often makes up
a useful part of the <emphasis remap='I'>message</emphasis> passed to <function>Tcl_AddErrorInfo</function>.</para>

<!-- .VS 8.5 -->
<para><function>Tcl_AppendObjToErrorInfo</function> is an alternative interface to the
same functionality as <function>Tcl_AddErrorInfo</function>.  <function>Tcl_AppendObjToErrorInfo</function>
is called when the string value to be appended to the <option>-errorinfo</option> option
is available as a <type>Tcl_Obj</type> instead of as a <emphasis remap='B'>char</emphasis> array.</para>
<!-- .VE 8.5 -->

<para><function>Tcl_AddObjErrorInfo</function> is nearly identical
to <function>Tcl_AddErrorInfo</function>, except that it has an additional <emphasis remap='I'>length</emphasis>
argument.  This allows the <emphasis remap='I'>message</emphasis> string to contain 
embedded null bytes.  This is essentially never a good idea.
If the <emphasis remap='I'>message</emphasis> needs to contain the null character <emphasis remap='B'>U+0000</emphasis>,
Tcl's usual internal encoding rules should be used to avoid
the need for a null byte.  If the <function>Tcl_AddObjErrorInfo</function>
interface is used at all, it should be with a negative <emphasis remap='I'>length</emphasis> value.</para>

<para>The procedure <function>Tcl_SetObjErrorCode</function> is used to set the
<option>-errorcode</option> return option to the list object <emphasis remap='I'>errorObjPtr</emphasis> 
built up by the caller. 
<function>Tcl_SetObjErrorCode</function> is typically invoked just 
before returning an error. If an error is
returned without calling <function>Tcl_SetObjErrorCode</function> or
<function>Tcl_SetErrorCode</function> the Tcl interpreter automatically sets
the <option>-errorcode</option> return option to <emphasis remap='B'>NONE</emphasis>.</para>

<para>The procedure <function>Tcl_SetErrorCode</function> is also used to set the
<option>-errorcode</option> return option. However, it takes one or more strings to
record instead of an object. Otherwise, it is similar to
<function>Tcl_SetObjErrorCode</function> in behavior.</para>

<para><function>Tcl_SetErrorCodeVA</function> is the same as <function>Tcl_SetErrorCode</function> except that
instead of taking a variable number of arguments it takes an argument list.</para>

<para><function>Tcl_PosixError</function>
sets the <option>-errorcode</option> variable after an error in a POSIX kernel call.
It reads the value of the <varname>errno</varname> C variable and calls
<function>Tcl_SetErrorCode</function> to set the <option>-errorcode</option> return
option in the <emphasis remap='B'>POSIX</emphasis> format.
The caller must previously have called <emphasis remap='B'>Tcl_SetErrno</emphasis> to set
<varname>errno</varname>; this is necessary on some platforms (e.g. Windows) where Tcl
is linked into an application as a shared library, or when the error
occurs in a dynamically loaded extension. See the manual entry for
<emphasis remap='B'>Tcl_SetErrno</emphasis> for more information.</para>

<para><function>Tcl_PosixError</function> returns a human-readable diagnostic message
for the error
(this is the same value that will appear as the third element
in the <option>-errorcode</option> value).
It may be convenient to include this string as part of the
error message returned to the application in
the interpreter's result.</para>

<para><function>Tcl_LogCommandInfo</function> is invoked after an error occurs in an
interpreter.  It adds information about the command that was being
executed when the error occurred to the <option>-errorinfo</option> value, and
the line number stored internally in the interpreter is set.</para>  

<para>In older releases of Tcl, there was no <emphasis remap='B'>Tcl_GetReturnOptions</emphasis>
routine.  In its place, the global Tcl variables <emphasis remap='B'>errorInfo</emphasis>
and <emphasis remap='B'>errorCode</emphasis> were the only place to retrieve the error
information.  Much existing code written for older Tcl releases
still access this information via those global variables.</para>

<para>It is important to realize that while reading from those
global variables remains a supported way to access these
return option values, it is important not to assume that
writing to those global variables will properly set the
corresponding return options.  It has long been emphasized
in this manual page that it is important to 
call the procedures described here rather than
setting <emphasis remap='B'>errorInfo</emphasis> or <emphasis remap='B'>errorCode</emphasis> directly with
<emphasis remap='B'>Tcl_ObjSetVar2</emphasis>.</para>

<para>If the procedure <emphasis remap='B'>Tcl_ResetResult</emphasis> is called,
it clears all of the state of the interpreter associated with
script evaluation, including the entire return options dictionary.
In particular, the <option>-errorinfo</option> and <option>-errorcode</option> options
are reset.  
If an error had occurred, the <emphasis remap='B'>Tcl_ResetResult</emphasis> call will
clear the error state to make it appear as if no error had
occurred after all.
The global variables <emphasis remap='B'>errorInfo</emphasis> and
<emphasis remap='B'>errorCode</emphasis> are not modified by <emphasis remap='B'>Tcl_ResetResult</emphasis>
so they continue to hold a record of information about the
most recent error seen in an interpreter.</para>

</refsect1>

<refsect1 xml:id='see_also'><title>SEE ALSO</title>
<para>Tcl_DecrRefCount, Tcl_IncrRefCount, Tcl_Interp, Tcl_ResetResult, Tcl_SetErrno</para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>error, object, object result, stack, trace, variable</para>
</refsect1>
</refentry>

