<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='crtmathfnc3'>

<!-- '\" Copyright (c) 1989\-1993 The Regents of the University of California.
'\" Copyright (c) 1994\-1996 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>8.4</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_CreateMathFunc</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>8.4</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_CreateMathFunc</refname>
<refname>Tcl_GetMathFuncInfo</refname>
<refname>Tcl_ListMathFuncs</refname>
<refpurpose>Define, query and enumerate math functions for expressions</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>void <function>Tcl_CreateMathFunc</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>name</parameter></paramdef>
<paramdef><parameter>numArgs</parameter></paramdef>
<paramdef><parameter>argTypes</parameter></paramdef>
<paramdef><parameter>proc</parameter></paramdef>
<paramdef><parameter>clientData</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_GetMathFuncInfo</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>name</parameter></paramdef>
<paramdef><parameter>numArgsPtr</parameter></paramdef>
<paramdef><parameter>argTypesPtr</parameter></paramdef>
<paramdef><parameter>procPtr</parameter></paramdef>
<paramdef><parameter>
 clientDataPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_Obj</function> *Tcl_ListMathFuncs</funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>pattern</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tcl_ValueType *clientDataPtr out -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tcl_Interp"</entry><entry>"*interp"</entry><entry>"in"</entry>
<entry>
<para>Interpreter in which new function will be defined.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*name</entry><entry>in</entry>
<entry>
<para>Name for new function.</para>
</entry>
</row>
<row><entry>int</entry><entry>numArgs</entry><entry>in</entry>
<entry>
<para>Number of arguments to new function;  also gives size of <emphasis remap='I'>argTypes</emphasis> array.</para>
</entry>
</row>
<row><entry>Tcl_ValueType</entry><entry>*argTypes</entry><entry>in</entry>
<entry>
<para>Points to an array giving the permissible types for each argument to
function.</para>
</entry>
</row>
<row><entry>Tcl_MathProc</entry><entry>*proc</entry><entry>in</entry>
<entry>
<para>Procedure that implements the function.</para>
</entry>
</row>
<row><entry>ClientData</entry><entry>clientData</entry><entry>in</entry>
<entry>
<para>Arbitrary one-word value to pass to <emphasis remap='I'>proc</emphasis> when it is invoked.</para>
</entry>
</row>
<row><entry>int</entry><entry>*numArgsPtr</entry><entry>out</entry>
<entry>
<para>Points to a variable that will be set to contain the number of
arguments to the function.</para>
</entry>
</row>
<row><entry>Tcl_ValueType</entry><entry>**argTypesPtr</entry><entry>out</entry>
<entry>
<para>Points to a variable that will be set to contain a pointer to an array
giving the permissible types for each argument to the function which
will need to be freed up using <emphasis remap='I'>Tcl_Free</emphasis>.</para>
</entry>
</row>
<row><entry>Tcl_MathProc</entry><entry>**procPtr</entry><entry>out</entry>
<entry>
<para>Points to a variable that will be set to contain a pointer to the
implementation code for the function (or NULL if the function is
implemented directly in bytecode).</para>
</entry>
</row>
<row><entry>ClientData</entry><entry>*clientDataPtr</entry><entry>out</entry>
<entry>
<para>Points to a variable that will be set to contain the clientData
argument passed to <function>Tcl_CreateMathFunc</function> when the function was
created if the function is not implemented directly in bytecode.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*pattern</entry><entry>in</entry>
<entry>
<para>Pattern to match against function names so as to filter them (by
passing to <emphasis remap='I'>Tcl_StringMatch</emphasis>), or NULL to not apply any filter.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>Tcl allows a number of mathematical functions to be used in
expressions, such as <emphasis remap='B'>sin</emphasis>, <emphasis remap='B'>cos</emphasis>, and <emphasis remap='B'>hypot</emphasis>.
These functions are represented by commands in the namespace,
<emphasis remap='B'>tcl::mathfunc</emphasis>.  The <function>Tcl_CreateMathFunc</function> function is
an obsolete way for applications to add additional functions
to those already provided by Tcl or to replace existing functions.
It should not be used by new applications, which should create
math functions using <emphasis remap='B'>Tcl_CreateObjCommand</emphasis> to create a command
in the <emphasis remap='B'>tcl::mathfunc</emphasis> namespace.</para>

<para>In the <function>Tcl_CreateMathFunc</function> interface,
<emphasis remap='I'>Name</emphasis> is the name of the function as it will appear in expressions.
If <emphasis remap='I'>name</emphasis> does not already exist in the <emphasis remap='B'>::tcl::mathfunc</emphasis>
namespace, then a new command is created in that namespace.
If <emphasis remap='I'>name</emphasis> does exist, then the existing function is replaced.
<emphasis remap='I'>NumArgs</emphasis> and <emphasis remap='I'>argTypes</emphasis> describe the arguments to the function.
Each entry in the <emphasis remap='I'>argTypes</emphasis> array must be
one of <emphasis remap='B'>TCL_INT</emphasis>, <emphasis remap='B'>TCL_DOUBLE</emphasis>, <emphasis remap='B'>TCL_WIDE_INT</emphasis>,
or <emphasis remap='B'>TCL_EITHER</emphasis> to indicate whether the corresponding argument must be an
integer, a double-precision floating value, a wide (64-bit) integer,
or any, respectively.</para>

<para>Whenever the function is invoked in an expression Tcl will invoke
<emphasis remap='I'>proc</emphasis>.  <emphasis remap='I'>Proc</emphasis> should have arguments and result that match
the type <type>Tcl_MathProc</type>:</para>
<programlisting remap='CS'>
<funcsynopsis>
<funcprototype>
<funcdef>typedef int <function>Tcl_MathProc</function></funcdef>
    <paramdef>ClientData <parameter>clientData</parameter></paramdef>
    <paramdef>Tcl_Interp * <parameter>interp</parameter></paramdef>
    <paramdef>Tcl_Value * <parameter>args</parameter></paramdef>
    <paramdef>Tcl_Value * <parameter>resultPtr</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>When <emphasis remap='I'>proc</emphasis> is invoked the <varname role='parameter'>clientData</varname> and <varname role='parameter'>interp</varname>
arguments will be the same as those passed to <function>Tcl_CreateMathFunc</function>.
<emphasis remap='I'>Args</emphasis> will point to an array of <emphasis remap='I'>numArgs</emphasis> Tcl_Value structures,
which describe the actual arguments to the function:</para>
<programlisting remap='CS'>
typedef struct Tcl_Value {
        Tcl_ValueType <emphasis remap='I'>type</emphasis>;
        long <emphasis remap='I'>intValue</emphasis>;
        double <emphasis remap='I'>doubleValue</emphasis>;
        Tcl_WideInt <emphasis remap='I'>wideValue</emphasis>;
} Tcl_Value;
</programlisting> <!-- remap='CE' -->

<para>The <emphasis remap='I'>type</emphasis> field indicates the type of the argument and is
one of <emphasis remap='B'>TCL_INT</emphasis>, <emphasis remap='B'>TCL_DOUBLE</emphasis> or <emphasis remap='B'>TCL_WIDE_INT</emphasis>.
It will match the <emphasis remap='I'>argTypes</emphasis> value specified for the function unless
the <emphasis remap='I'>argTypes</emphasis> value was <emphasis remap='B'>TCL_EITHER</emphasis>. Tcl converts
the argument supplied in the expression to the type requested in
<emphasis remap='I'>argTypes</emphasis>, if that is necessary.
Depending on the value of the <emphasis remap='I'>type</emphasis> field, the <emphasis remap='I'>intValue</emphasis>,
<emphasis remap='I'>doubleValue</emphasis> or <emphasis remap='I'>wideValue</emphasis>
field will contain the actual value of the argument.</para>

<para><emphasis remap='I'>Proc</emphasis> should compute its result and store it either as an integer
in <emphasis remap='I'>resultPtr-&gt;intValue</emphasis> or as a floating value in
<emphasis remap='I'>resultPtr-&gt;doubleValue</emphasis>.
It should set also <emphasis remap='I'>resultPtr-&gt;type</emphasis> to one of
<emphasis remap='B'>TCL_INT</emphasis>, <emphasis remap='B'>TCL_DOUBLE</emphasis> or <emphasis remap='B'>TCL_WIDE_INT</emphasis>
to indicate which value was set.
Under normal circumstances <emphasis remap='I'>proc</emphasis> should return <emphasis remap='B'>TCL_OK</emphasis>.
If an error occurs while executing the function, <emphasis remap='I'>proc</emphasis> should
return <emphasis remap='B'>TCL_ERROR</emphasis> and leave an error message in the interpreter's result.</para>

<para><function>Tcl_GetMathFuncInfo</function> retrieves the values associated with
function <emphasis remap='I'>name</emphasis> that were passed to a preceding
<function>Tcl_CreateMathFunc</function> call.  Normally, the return code is
<emphasis remap='B'>TCL_OK</emphasis> but if the named function does not exist, <emphasis remap='B'>TCL_ERROR</emphasis>
is returned and an error message is placed in the interpreter's
result.</para>

<para>If an error did not occur, the array reference placed in the variable
pointed to by <emphasis remap='I'>argTypesPtr</emphasis> is newly allocated, and should be
released by passing it to <emphasis remap='B'>Tcl_Free</emphasis>.  Some functions (the
standard set implemented in the core, and those defined by placing
commands in the <emphasis remap='B'>tcl::mathfunc</emphasis> namespace) do not have
argument type information; attempting to retrieve values for
them causes a NULL to be stored in the variable pointed to by 
<emphasis remap='I'>procPtr</emphasis> and the variable pointed to by <emphasis remap='I'>clientDataPtr</emphasis>
will not be modified.  The variable pointed to by <emphasis remap='I'>numArgsPointer</emphasis>
will contain -1, and no argument types will be stored in the variable
pointed to by <emphasis remap='I'>argTypesPointer</emphasis>.</para>

<para><emphasis remap='B'>Tcl_ListMathFuncs</emphasis> returns a Tcl object containing a list of all
the math functions defined in the interpreter whose name matches
<emphasis remap='I'>pattern</emphasis>.  The returned object has a reference count of zero.</para>

</refsect1>

<refsect1 xml:id='see_also'><title>SEE ALSO</title>
<para>expr(n), info(n), Tcl_CreateObjC<citerefentry><refentrytitle>ommand</refentrytitle><manvolnum>3</manvolnum></citerefentry>, Tcl_F<citerefentry><refentrytitle>ree</refentrytitle><manvolnum>3</manvolnum></citerefentry>, Tcl_NewListO<citerefentry><refentrytitle>bj</refentrytitle><manvolnum>3</manvolnum></citerefentry></para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>expression, mathematical function</para>
</refsect1>
</refentry>

