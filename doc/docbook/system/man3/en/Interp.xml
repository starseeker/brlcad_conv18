<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='interp3'>

<!-- '\" Copyright (c) 1989\-1993 The Regents of the University of California.
'\" Copyright (c) 1994\-1996 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>7.5</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_Interp</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>7.5</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_Interp</refname>
<refpurpose>client-visible fields of interpreter structures</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

typedef struct { char *result; Tcl_FreeProc *freeProc; int errorLine; } Tcl_Interp; </funcsynopsisinfo>
<funcprototype>
<funcdef>typedef void <function>Tcl_FreeProc</function></funcdef>
    <paramdef>char * <parameter>blockPtr</parameter></paramdef>
</funcprototype>

</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>The <emphasis remap='B'>Tcl_CreateInterp</emphasis> procedure returns a pointer to a Tcl_Interp
structure.  This pointer is then passed into other Tcl procedures
to process commands in the interpreter and perform other operations
on the interpreter.  Interpreter structures contain many fields
that are used by Tcl, but only three that may be accessed by
clients:  <emphasis remap='I'>result</emphasis>, <emphasis remap='I'>freeProc</emphasis>, and <emphasis remap='I'>errorLine</emphasis>.</para>

<!-- .VS 8.5 -->
<para><emphasis remap='B'>Note that access to all three fields, </emphasis><emphasis remap='I'>result</emphasis><emphasis remap='B'>, </emphasis><emphasis remap='I'>freeProc</emphasis><emphasis remap='B'> and
</emphasis><emphasis remap='I'>errorLine</emphasis><emphasis remap='B'> is deprecated.</emphasis>  Use <emphasis remap='B'>Tcl_SetResult</emphasis>,
<emphasis remap='B'>Tcl_GetResult</emphasis>, and <emphasis remap='B'>Tcl_GetReturnOptions</emphasis> instead.</para>
<!-- .VE 8.5 -->

<para>The <emphasis remap='I'>result</emphasis> and <emphasis remap='I'>freeProc</emphasis> fields are used to return
results or error messages from commands.
This information is returned by command procedures back to <emphasis remap='B'>Tcl_Eval</emphasis>,
and by <emphasis remap='B'>Tcl_Eval</emphasis> back to its callers.
The <emphasis remap='I'>result</emphasis> field points to the string that represents the
result or error message, and the <emphasis remap='I'>freeProc</emphasis> field tells how
to dispose of the storage for the string when it is not needed anymore.
The easiest way for command procedures to manipulate these
fields is to call procedures like <emphasis remap='B'>Tcl_SetResult</emphasis>
or <emphasis remap='B'>Tcl_AppendResult</emphasis>;  they
will hide all the details of managing the fields.
The description below is for those procedures that manipulate the
fields directly.</para>

<para>Whenever a command procedure returns, it must ensure
that the <emphasis remap='I'>result</emphasis> field of its interpreter points to the string
being returned by the command.
The <emphasis remap='I'>result</emphasis> field must always point to a valid string.
If a command wishes to return no result then <emphasis remap='I'>interp-&gt;result</emphasis>
should point to an empty string.
Normally, results are assumed to be statically allocated,
which means that the contents will not change before the next time
<emphasis remap='B'>Tcl_Eval</emphasis> is called or some other command procedure is invoked.
In this case, the <emphasis remap='I'>freeProc</emphasis> field must be zero.
Alternatively, a command procedure may dynamically
allocate its return value (e.g. using <emphasis remap='B'>Tcl_Alloc</emphasis>)
and store a pointer to it in <emphasis remap='I'>interp-&gt;result</emphasis>.
In this case, the command procedure must also set <emphasis remap='I'>interp-&gt;freeProc</emphasis>
to the address of a procedure that can free the value, or <emphasis remap='B'>TCL_DYNAMIC</emphasis>
if the storage was allocated directly by Tcl or by a call to
<emphasis remap='B'>Tcl_Alloc</emphasis>. 
If <emphasis remap='I'>interp-&gt;freeProc</emphasis> is non-zero, then Tcl will call <emphasis remap='I'>freeProc</emphasis>
to free the space pointed to by <emphasis remap='I'>interp-&gt;result</emphasis> before it
invokes the next command.
If a client procedure overwrites <emphasis remap='I'>interp-&gt;result</emphasis> when
<emphasis remap='I'>interp-&gt;freeProc</emphasis> is non-zero, then it is responsible for calling
<emphasis remap='I'>freeProc</emphasis> to free the old <emphasis remap='I'>interp-&gt;result</emphasis> (the <emphasis remap='B'>Tcl_FreeResult</emphasis>
macro should be used for this purpose).</para>

<para><emphasis remap='I'>FreeProc</emphasis> should have arguments and result that match the
<function>Tcl_FreeProc</function> declaration above:  it receives a single
argument which is a pointer to the result value to free.
In most applications <emphasis remap='B'>TCL_DYNAMIC</emphasis> is the only non-zero value ever
used for <emphasis remap='I'>freeProc</emphasis>.
However, an application may store a different procedure address
in <emphasis remap='I'>freeProc</emphasis> in order to use an alternate memory allocator
or in order to do other cleanup when the result memory is freed.</para>

<para>As part of processing each command, <emphasis remap='B'>Tcl_Eval</emphasis> initializes
<emphasis remap='I'>interp-&gt;result</emphasis>
and <emphasis remap='I'>interp-&gt;freeProc</emphasis> just before calling the command procedure for
the command.  The <emphasis remap='I'>freeProc</emphasis> field will be initialized to zero,
and <emphasis remap='I'>interp-&gt;result</emphasis> will point to an empty string.  Commands that
do not return any value can simply leave the fields alone.
Furthermore, the empty string pointed to by <emphasis remap='I'>result</emphasis> is actually
part of an array of <emphasis remap='B'>TCL_RESULT_SIZE</emphasis> characters (approximately 200).
If a command wishes to return a short string, it can simply copy
it to the area pointed to by <emphasis remap='I'>interp-&gt;result</emphasis>.  Or, it can use
the sprintf procedure to generate a short result string at the location
pointed to by <emphasis remap='I'>interp-&gt;result</emphasis>.</para>

<para>It is a general convention in Tcl-based applications that the result
of an interpreter is normally in the initialized state described
in the previous paragraph.
Procedures that manipulate an interpreter's result (e.g. by
returning an error) will generally assume that the result
has been initialized when the procedure is called.
If such a procedure is to be called after the result has been
changed, then <emphasis remap='B'>Tcl_ResetResult</emphasis> should be called first to
reset the result to its initialized state.  The direct use of
<emphasis remap='I'>interp-&gt;result</emphasis> is strongly deprecated (see <emphasis remap='B'>Tcl_SetResult</emphasis>).</para>

<para>The <emphasis remap='I'>errorLine</emphasis>
field is valid only after <emphasis remap='B'>Tcl_Eval</emphasis> returns
a <emphasis remap='B'>TCL_ERROR</emphasis> return code.  In this situation the <emphasis remap='I'>errorLine</emphasis>
field identifies the line number of the command being executed when
the error occurred.  The line numbers are relative to the command
being executed:  1 means the first line of the command passed to
<emphasis remap='B'>Tcl_Eval</emphasis>, 2 means the second line, and so on.
The <emphasis remap='I'>errorLine</emphasis> field is typically used in conjunction with
<emphasis remap='B'>Tcl_AddErrorInfo</emphasis> to report information about where an error
occurred.
<emphasis remap='I'>ErrorLine</emphasis> should not normally be modified except by <emphasis remap='B'>Tcl_Eval</emphasis>.</para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>free, initialized, interpreter, malloc, result</para>
</refsect1>
</refentry>

