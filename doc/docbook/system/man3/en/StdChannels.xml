<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='stdchannels3'>

<!-- '\" Copyright (c) 2001 by ActiveState Corporation -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>7.5</date></refentryinfo>
<refmeta>
<refentrytitle>Standard Channels</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>7.5</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_StandardChannels</refname>
<refpurpose>How the Tcl library deals with the standard channels</refpurpose>
</refnamediv>
<!-- body begins here -->

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>This page explains the initialization and use of standard channels in
the Tcl library.</para>

<para>The term <emphasis remap='I'>standard channels</emphasis> comes out of the Unix world and
refers to the three channels automatically opened by the OS for
each new application. They are <emphasis remap='B'>stdin</emphasis>, <emphasis remap='B'>stdout</emphasis> and
<emphasis remap='B'>stderr</emphasis>. The first is the standard input an application can read
from, the other two refer to writable channels, one for regular
output and the other for error messages.</para>

<para>Tcl generalizes this concept in a cross-platform way and
exposes standard channels to the script level.</para>

<refsect2 xml:id='application_programming_interfaces'><title>APPLICATION PROGRAMMING INTERFACES</title>

<para>The public API procedures dealing directly with standard channels are
<emphasis remap='B'>Tcl_GetStdChannel</emphasis> and <emphasis remap='B'>Tcl_SetStdChannel</emphasis>. Additional public
APIs to consider are <emphasis remap='B'>Tcl_RegisterChannel</emphasis>,
<emphasis remap='B'>Tcl_CreateChannel</emphasis> and <emphasis remap='B'>Tcl_GetChannel</emphasis>.</para>
</refsect2>
</refsect1>

<refsect1 xml:id='initialization_of_tcl_standard_channels'><title>INITIALIZATION OF TCL STANDARD CHANNELS</title>
<para>Standard channels are initialized by the Tcl library in three cases:
when explicitly requested, when implicitly required before returning
channel information, or when implicitly required during registration
of a new channel.</para>

<para>These cases differ in how they handle unavailable platform- specific
standard channels.  (A channel is not
<quote>available</quote>
if it could not be
successfully opened; for example, in a Tcl application run as a
Windows NT service.)</para>
<variablelist remap='TP'>
  <varlistentry>
  <term>1)</term>
  <listitem>
<para>A single standard channel is initialized when it is explicitly
specified in a call to <emphasis remap='B'>Tcl_SetStdChannel</emphasis>.  The states of the
other standard channels are unaffected.</para>
  <blockquote remap='RS'>

<para>Missing platform-specific standard channels do not matter here. This
approach is not available at the script level.
    </para></blockquote> <!-- remap='RE' -->
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>2)</term>
  <listitem>
<para>All uninitialized standard channels are initialized to
platform-specific default values:</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>(a)</term>
  <listitem>
<para>when open channels are listed with <emphasis remap='B'>Tcl_GetChannelNames</emphasis> (or the
<emphasis remap='B'>file channels</emphasis> script command), or</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>(b)</term>
  <listitem>
<para>when information about any standard channel is requested with a call
to <emphasis remap='B'>Tcl_GetStdChannel</emphasis>, or with a call to <emphasis remap='B'>Tcl_GetChannel</emphasis>
which specifies one of the standard names (<emphasis remap='B'>stdin</emphasis>, <emphasis remap='B'>stdout</emphasis>
and <emphasis remap='B'>stderr</emphasis>).</para>
  </listitem>
  </varlistentry>
</variablelist>

<para>In case of missing platform-specific standard channels, the Tcl
standard channels are considered as initialized and then immediately
closed. This means that the first three Tcl channels then opened by
the application are designated as the Tcl standard channels.</para>
<variablelist remap='TP'>
  <varlistentry>
  <term>3)</term>
  <listitem>
<para>All uninitialized standard channels are initialized to
platform-specific default values when a user-requested channel is
registered with <emphasis remap='B'>Tcl_RegisterChannel</emphasis>.</para>
  </listitem>
  </varlistentry>
</variablelist>

<para>In case of unavailable platform-specific standard channels the channel
whose creation caused the initialization of the Tcl standard channels
is made a normal channel.  The next three Tcl channels opened by the
application are designated as the Tcl standard channels.  In other
words, of the first four Tcl channels opened by the application the
second to fourth are designated as the Tcl standard channels.</para>
</refsect1>

<refsect1 xml:id='reinitialization_of_tcl_standard_channel'><title>RE-INITIALIZATION OF TCL STANDARD CHANNELS</title>
<para>Once a Tcl standard channel is initialized through one of the methods
above, closing this Tcl standard channel will cause the next call to
<emphasis remap='B'>Tcl_CreateChannel</emphasis> to make the new channel the new standard
channel, too. If more than one Tcl standard channel was closed
<emphasis remap='B'>Tcl_CreateChannel</emphasis> will fill the empty slots in the order
<emphasis remap='B'>stdin</emphasis>, <emphasis remap='B'>stdout</emphasis> and <emphasis remap='B'>stderr</emphasis>.</para>

<para><emphasis remap='B'>Tcl_CreateChannel</emphasis> will not try to reinitialize an empty slot if
that slot was not initialized before. It is this behavior which
enables an application to employ method 1 of initialization, i.e. to
create and designate their own Tcl standard channels.</para>
</refsect1>

<refsect1 xml:id='shellspecific_details'><title>SHELL-SPECIFIC DETAILS</title>

<refsect2 xml:id='tclsh'><title>tclsh</title>

<para>The Tcl shell (or rather the function <emphasis remap='B'>Tcl_Main</emphasis>, which forms the
core of the shell's implementation) uses method 2 to initialize
the standard channels.</para>
</refsect2>

<refsect2 xml:id='wish'><title>wish</title>

<para>The windowing shell (or rather the function <emphasis remap='B'>Tk_MainEx</emphasis>, which
forms the core of the shell's implementation) uses method 1 to
initialize the standard channels (See <emphasis remap='B'>Tk_InitConsoleChannels</emphasis>)
on non-Unix platforms.  On Unix platforms, <emphasis remap='B'>Tk_MainEx</emphasis> implicitly
uses method 2 to initialize the standard channels.</para>
</refsect2>
</refsect1>

<refsect1 xml:id='see_also'><title>SEE ALSO</title>
<para>Tcl_CreateC<citerefentry><refentrytitle>hannel</refentrytitle><manvolnum>3</manvolnum></citerefentry>, Tcl_RegisterC<citerefentry><refentrytitle>hannel</refentrytitle><manvolnum>3</manvolnum></citerefentry>, Tcl_GetC<citerefentry><refentrytitle>hannel</refentrytitle><manvolnum>3</manvolnum></citerefentry>, Tcl_GetStdC<citerefentry><refentrytitle>hannel</refentrytitle><manvolnum>3</manvolnum></citerefentry>, Tcl_SetStdC<citerefentry><refentrytitle>hannel</refentrytitle><manvolnum>3</manvolnum></citerefentry>, Tk_InitConsoleC<citerefentry><refentrytitle>hannels</refentrytitle><manvolnum>3</manvolnum></citerefentry>, <citerefentry><refentrytitle>tclsh</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>wish</refentrytitle><manvolnum>1</manvolnum></citerefentry>, Tcl_M<citerefentry><refentrytitle>ain</refentrytitle><manvolnum>3</manvolnum></citerefentry>, Tk_MainE<citerefentry><refentrytitle>x</refentrytitle><manvolnum>3</manvolnum></citerefentry></para>
</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>standard channels</para>
</refsect1>
</refentry>

