<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='listobj3'>

<!-- '\" Copyright (c) 1996\-1997 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>8.0</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_ListObj</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>8.0</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_ListObjAppendList</refname>
<refname>Tcl_ListObjAppendElement</refname>
<refname>Tcl_NewListObj</refname>
<refname>Tcl_SetListObj</refname>
<refname>Tcl_ListObjGetElements</refname>
<refname>Tcl_ListObjLength</refname>
<refname>Tcl_ListObjIndex</refname>
<refname>Tcl_ListObjReplace</refname>
<refpurpose>manipulate Tcl objects as lists</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>int <function>Tcl_ListObjAppendList</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>listPtr</parameter></paramdef>
<paramdef><parameter>elemListPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_ListObjAppendElement</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>listPtr</parameter></paramdef>
<paramdef><parameter>objPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_Obj</function> *Tcl_NewListObj</funcdef>
<paramdef><parameter>objc</parameter></paramdef>
<paramdef><parameter>objv</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tcl_SetListObj</function></funcdef>
<paramdef><parameter>objPtr</parameter></paramdef>
<paramdef><parameter>objc</parameter></paramdef>
<paramdef><parameter>objv</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_ListObjGetElements</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>listPtr</parameter></paramdef>
<paramdef><parameter>objcPtr</parameter></paramdef>
<paramdef><parameter>objvPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_ListObjLength</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>listPtr</parameter></paramdef>
<paramdef><parameter>intPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_ListObjIndex</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>listPtr</parameter></paramdef>
<paramdef><parameter>index</parameter></paramdef>
<paramdef><parameter>objPtrPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_ListObjReplace</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>listPtr</parameter></paramdef>
<paramdef><parameter>first</parameter></paramdef>
<paramdef><parameter>count</parameter></paramdef>
<paramdef><parameter>objc</parameter></paramdef>
<paramdef><parameter>objv</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tcl_Obj *const *elemListPtr in/out -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tcl_Interp"</entry><entry>"*interp"</entry><entry>"in"</entry>
<entry>
<para>If an error occurs while converting an object to be a list object,
an error message is left in the interpreter's result object
unless <emphasis remap='I'>interp</emphasis> is NULL.</para>
</entry>
</row>
<row><entry>Tcl_Obj</entry><entry>*listPtr</entry><entry>in/out</entry>
<entry>
<para>Points to the list object to be manipulated.
If <emphasis remap='I'>listPtr</emphasis> does not already point to a list object,
an attempt will be made to convert it to one.</para>
</entry>
</row>
<row><entry>Tcl_Obj</entry><entry>*elemListPtr</entry><entry>in/out</entry>
<entry>
<para>For <function>Tcl_ListObjAppendList</function>, this points to a list object
containing elements to be appended onto <emphasis remap='I'>listPtr</emphasis>.
Each element of *<emphasis remap='I'>elemListPtr</emphasis> will
become a new element of <emphasis remap='I'>listPtr</emphasis>.
If *<emphasis remap='I'>elemListPtr</emphasis> is not NULL and
does not already point to a list object,
an attempt will be made to convert it to one.</para>
</entry>
</row>
<row><entry>Tcl_Obj</entry><entry>*objPtr</entry><entry>in</entry>
<entry>
<para>For <function>Tcl_ListObjAppendElement</function>,
points to the Tcl object that will be appended to <emphasis remap='I'>listPtr</emphasis>.
For <function>Tcl_SetListObj</function>,
this points to the Tcl object that will be converted to a list object
containing the <emphasis remap='I'>objc</emphasis> elements of the array referenced by <emphasis remap='I'>objv</emphasis>.</para>
</entry>
</row>
<row><entry>int</entry><entry>*objcPtr</entry><entry>in</entry>
<entry>
<para>Points to location where <function>Tcl_ListObjGetElements</function>
stores the number of element objects in <emphasis remap='I'>listPtr</emphasis>.</para>
</entry>
</row>
<row><entry>Tcl_Obj</entry><entry>***objvPtr</entry><entry>out</entry>
<entry>
<para>A location where <function>Tcl_ListObjGetElements</function> stores a pointer to an array
of pointers to the element objects of <emphasis remap='I'>listPtr</emphasis>.</para>  
</entry>
</row>
<row><entry>int</entry><entry>objc</entry><entry>in</entry>
<entry>
<para>The number of Tcl objects that <emphasis remap='B'>Tcl_NewListObj</emphasis>
will insert into a new list object,
and <function>Tcl_ListObjReplace</function> will insert into <emphasis remap='I'>listPtr</emphasis>.
For <function>Tcl_SetListObj</function>,
the number of Tcl objects to insert into <emphasis remap='I'>objPtr</emphasis>.</para>
</entry>
</row>
<row><entry>"Tcl_Obj *const"</entry><entry>objv[]</entry><entry>in</entry>
<entry>
<para>An array of pointers to objects.
<emphasis remap='B'>Tcl_NewListObj</emphasis> will insert these objects into a new list object
and <function>Tcl_ListObjReplace</function> will insert them into an existing <emphasis remap='I'>listPtr</emphasis>.
Each object will become a separate list element.</para>  
</entry>
</row>
<row><entry>int</entry><entry>*intPtr</entry><entry>out</entry>
<entry>
<para>Points to location where <function>Tcl_ListObjLength</function>
stores the length of the list.</para>
</entry>
</row>
<row><entry>int</entry><entry>index</entry><entry>in</entry>
<entry>
<para>Index of the list element that <function>Tcl_ListObjIndex</function>
is to return.
The first element has index 0.</para>
</entry>
</row>
<row><entry>Tcl_Obj</entry><entry>**objPtrPtr</entry><entry>out</entry>
<entry>
<para>Points to place where <function>Tcl_ListObjIndex</function> is to store
a pointer to the resulting list element object.</para>
</entry>
</row>
<row><entry>int</entry><entry>first</entry><entry>in</entry>
<entry>
<para>Index of the starting list element that <function>Tcl_ListObjReplace</function>
is to replace.
The list's first element has index 0.</para>
</entry>
</row>
<row><entry>int</entry><entry>count</entry><entry>in</entry>
<entry>
<para>The number of elements that <function>Tcl_ListObjReplace</function>
is to replace.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>Tcl list objects have an internal representation that supports
the efficient indexing and appending.
The procedures described in this man page are used to
create, modify, index, and append to Tcl list objects from C code.</para>

<para><function>Tcl_ListObjAppendList</function> and <function>Tcl_ListObjAppendElement</function>
both add one or more objects
to the end of the list object referenced by <emphasis remap='I'>listPtr</emphasis>.
<function>Tcl_ListObjAppendList</function> appends each element of the list object
referenced by <emphasis remap='I'>elemListPtr</emphasis> while
<function>Tcl_ListObjAppendElement</function> appends the single object
referenced by <emphasis remap='I'>objPtr</emphasis>.
Both procedures will convert the object referenced by <emphasis remap='I'>listPtr</emphasis>
to a list object if necessary.
If an error occurs during conversion,
both procedures return <emphasis remap='B'>TCL_ERROR</emphasis> and leave an error message
in the interpreter's result object if <emphasis remap='I'>interp</emphasis> is not NULL.
Similarly, if <emphasis remap='I'>elemListPtr</emphasis> does not already refer to a list object,
<function>Tcl_ListObjAppendList</function> will attempt to convert it to one
and if an error occurs during conversion,
will return <emphasis remap='B'>TCL_ERROR</emphasis>
and leave an error message in the interpreter's result object
if interp is not NULL.
Both procedures invalidate any old string representation of <emphasis remap='I'>listPtr</emphasis>
and, if it was converted to a list object,
free any old internal representation.
Similarly, <function>Tcl_ListObjAppendList</function> frees any old internal representation
of <emphasis remap='I'>elemListPtr</emphasis> if it converts it to a list object.
After appending each element in <emphasis remap='I'>elemListPtr</emphasis>,
<function>Tcl_ListObjAppendList</function> increments the element's reference count
since <emphasis remap='I'>listPtr</emphasis> now also refers to it.
For the same reason, <function>Tcl_ListObjAppendElement</function>
increments <emphasis remap='I'>objPtr</emphasis>'s reference count.
If no error occurs,
the two procedures return <varname role='parameter'>TCL_OK</varname> after appending the objects.</para>

<para><emphasis remap='B'>Tcl_NewListObj</emphasis> and <function>Tcl_SetListObj</function>
create a new object or modify an existing object to hold 
the <emphasis remap='I'>objc</emphasis> elements of the array referenced by <emphasis remap='I'>objv</emphasis>
where each element is a pointer to a Tcl object.
If <emphasis remap='I'>objc</emphasis> is less than or equal to zero,
they return an empty object.
The new object's string representation is left invalid.
The two procedures increment the reference counts
of the elements in <emphasis remap='I'>objc</emphasis> since the list object now refers to them.
The new list object returned by <emphasis remap='B'>Tcl_NewListObj</emphasis>
has reference count zero.</para>

<para><function>Tcl_ListObjGetElements</function> returns a count and a pointer to an array of
the elements in a list object.  It returns the count by storing it in the
address <emphasis remap='I'>objcPtr</emphasis>.  Similarly, it returns the array pointer by storing
it in the address <emphasis remap='I'>objvPtr</emphasis>.
The memory pointed to is managed by Tcl and should not be freed or written
to by the caller. If the list is empty, 0 is stored at <emphasis remap='I'>objcPtr</emphasis>
and NULL at <emphasis remap='I'>objvPtr</emphasis>.
If <emphasis remap='I'>listPtr</emphasis> is not already a list object, <function>Tcl_ListObjGetElements</function>
will attempt to convert it to one; if the conversion fails, it returns
<emphasis remap='B'>TCL_ERROR</emphasis> and leaves an error message in the interpreter's result
object if <emphasis remap='I'>interp</emphasis> is not NULL.
Otherwise it returns <varname role='parameter'>TCL_OK</varname> after storing the count and array pointer.</para>

<para><function>Tcl_ListObjLength</function> returns the number of elements in the list object
referenced by <emphasis remap='I'>listPtr</emphasis>.
It returns this count by storing an integer in the address <emphasis remap='I'>intPtr</emphasis>.
If the object is not already a list object,
<function>Tcl_ListObjLength</function> will attempt to convert it to one;
if the conversion fails, it returns <emphasis remap='B'>TCL_ERROR</emphasis>
and leaves an error message in the interpreter's result object
if <emphasis remap='I'>interp</emphasis> is not NULL.
Otherwise it returns <varname role='parameter'>TCL_OK</varname> after storing the list's length.</para>

<para>The procedure <function>Tcl_ListObjIndex</function> returns a pointer to the object
at element <emphasis remap='I'>index</emphasis> in the list referenced by <emphasis remap='I'>listPtr</emphasis>.
It returns this object by storing a pointer to it
in the address <emphasis remap='I'>objPtrPtr</emphasis>.
If <emphasis remap='I'>listPtr</emphasis> does not already refer to a list object,
<function>Tcl_ListObjIndex</function> will attempt to convert it to one;
if the conversion fails, it returns <emphasis remap='B'>TCL_ERROR</emphasis>
and leaves an error message in the interpreter's result object
if <emphasis remap='I'>interp</emphasis> is not NULL.
If the index is out of range,
that is, <emphasis remap='I'>index</emphasis> is negative or
greater than or equal to the number of elements in the list,
<function>Tcl_ListObjIndex</function> stores a NULL in <emphasis remap='I'>objPtrPtr</emphasis>
and returns <varname role='parameter'>TCL_OK</varname>.
Otherwise it returns <varname role='parameter'>TCL_OK</varname> after storing the element's
object pointer.
The reference count for the list element is not incremented;
the caller must do that if it needs to retain a pointer to the element.</para>

<para><function>Tcl_ListObjReplace</function> replaces zero or more elements
of the list referenced by <emphasis remap='I'>listPtr</emphasis>
with the <emphasis remap='I'>objc</emphasis> objects in the array referenced by <emphasis remap='I'>objv</emphasis>.
If <emphasis remap='I'>listPtr</emphasis> does not point to a list object,
<function>Tcl_ListObjReplace</function> will attempt to convert it to one;
if the conversion fails, it returns <emphasis remap='B'>TCL_ERROR</emphasis>
and leaves an error message in the interpreter's result object
if <emphasis remap='I'>interp</emphasis> is not NULL.
Otherwise, it returns <varname role='parameter'>TCL_OK</varname> after replacing the objects.
If <emphasis remap='I'>objv</emphasis> is NULL, no new elements are added.
If the argument <emphasis remap='I'>first</emphasis> is zero or negative,
it refers to the first element.
If <emphasis remap='I'>first</emphasis> is greater than or equal to the
number of elements in the list, then no elements are deleted;
the new elements are appended to the list.
<emphasis remap='I'>count</emphasis> gives the number of elements to replace.
If <emphasis remap='I'>count</emphasis> is zero or negative then no elements are deleted;
the new elements are simply inserted before the one
designated by <emphasis remap='I'>first</emphasis>.
<function>Tcl_ListObjReplace</function> invalidates <emphasis remap='I'>listPtr</emphasis>'s
old string representation.
The reference counts of any elements inserted from <emphasis remap='I'>objv</emphasis>
are incremented since the resulting list now refers to them.
Similarly, the reference counts for any replaced objects are decremented.</para>

<para>Because <function>Tcl_ListObjReplace</function> combines
both element insertion and deletion,
it can be used to implement a number of list operations.
For example, the following code inserts the <emphasis remap='I'>objc</emphasis> objects
referenced by the array of object pointers <emphasis remap='I'>objv</emphasis>
just before the element <emphasis remap='I'>index</emphasis> of the list referenced by <emphasis remap='I'>listPtr</emphasis>:</para>

<programlisting remap='CS'>
result = Tcl_ListObjReplace(interp, listPtr, index, 0,
        objc, objv);
</programlisting> <!-- remap='CE' -->
<para>Similarly, the following code appends the <emphasis remap='I'>objc</emphasis> objects
referenced by the array <emphasis remap='I'>objv</emphasis>
to the end of the list <emphasis remap='I'>listPtr</emphasis>:</para>

<programlisting remap='CS'>
result = Tcl_ListObjLength(interp, listPtr, &amp;length);
if (result == TCL_OK) {
    result = Tcl_ListObjReplace(interp, listPtr, length, 0,
            objc, objv);
}
</programlisting> <!-- remap='CE' -->
<para>The <emphasis remap='I'>count</emphasis> list elements starting at <emphasis remap='I'>first</emphasis> can be deleted
by simply calling <function>Tcl_ListObjReplace</function>
with a NULL <emphasis remap='I'>objvPtr</emphasis>:</para>

<programlisting remap='CS'>
result = Tcl_ListObjReplace(interp, listPtr, first, count,
        0, NULL);
</programlisting> <!-- remap='CE' -->
<para>Tcl_NewObj, Tcl_DecrRefCount, Tcl_IncrRefCount, Tcl_GetObjResult</para>
</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>append, index, insert, internal representation, length, list, list object, list type, object, object type, replace, string representation</para>
</refsect1>
</refentry>

