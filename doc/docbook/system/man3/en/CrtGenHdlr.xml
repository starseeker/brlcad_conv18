<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='crtgenhdlr3'>

<!-- '\" Copyright (c) 1992\-1994 The Regents of the University of California.
'\" Copyright (c) 1994\-1996 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refmeta>
<refentrytitle>Tk_CreateGenericHandler</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='manual'>Tk</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tk_CreateGenericHandler</refname>
<refname>Tk_DeleteGenericHandler</refname>
<refpurpose>associate procedure callback with all X events</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tk.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>Tk_CreateGenericHandler</function></funcdef>
<paramdef><parameter>proc</parameter></paramdef>
<paramdef><parameter>clientData</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>Tk_DeleteGenericHandler</function></funcdef>
<paramdef><parameter>proc</parameter></paramdef>
<paramdef><parameter>clientData</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tk_GenericProc clientData -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tk_GenericProc"</entry><entry>"*proc"</entry><entry>"in"</entry>
<entry>
<para>Procedure to invoke whenever any X event occurs on any display.</para>
</entry>
</row>
<row><entry>ClientData</entry><entry>clientData</entry><entry>in</entry>
<entry>
<para>Arbitrary one-word value to pass to <emphasis remap='I'>proc</emphasis>.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para><function>Tk_CreateGenericHandler</function> arranges for <emphasis remap='I'>proc</emphasis> to be
invoked in the future whenever any X event occurs.  This mechanism is
<emphasis remap='I'>not</emphasis> intended for dispatching X events on windows managed by Tk
(you should use <emphasis remap='B'>Tk_CreateEventHandler</emphasis> for this purpose).
<function>Tk_CreateGenericHandler</function> is intended for other purposes, such
as tracing X events, monitoring events on windows not owned by Tk,
accessing X-related libraries that were not originally designed for
use with Tk, and so on.</para>

<para>The callback to <emphasis remap='I'>proc</emphasis> will be made by <emphasis remap='B'>Tk_HandleEvent</emphasis>;
this mechanism only works in programs that dispatch events
through <emphasis remap='B'>Tk_HandleEvent</emphasis> (or through other Tk procedures that
call <emphasis remap='B'>Tk_HandleEvent</emphasis>, such as <emphasis remap='B'>Tk_DoOneEvent</emphasis> or
<emphasis remap='B'>Tk_MainLoop</emphasis>).</para>

<para><emphasis remap='I'>Proc</emphasis> should have arguments and result that match the
type <function>Tk_GenericProc</function>:</para>
<programlisting remap='CS'>
<funcsynopsis>
<funcprototype>
<funcdef>typedef int <function>Tk_GenericProc</function></funcdef>
    <paramdef>ClientData <parameter>clientData</parameter></paramdef>
    <paramdef>XEvent * <parameter>eventPtr</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</programlisting> <!-- remap='CE' -->
<para>The <varname role='parameter'>clientData</varname> parameter to <emphasis remap='I'>proc</emphasis> is a copy of the <varname role='parameter'>clientData</varname>
argument given to <function>Tk_CreateGenericHandler</function> when the callback
was created.  Typically, <varname role='parameter'>clientData</varname> points to a data
structure containing application-specific information about
how to handle events.
<emphasis remap='I'>EventPtr</emphasis> is a pointer to the X event.</para>

<para>Whenever an X event is processed by <emphasis remap='B'>Tk_HandleEvent</emphasis>, <emphasis remap='I'>proc</emphasis>
is called.  The return value from <emphasis remap='I'>proc</emphasis> is normally 0.
A non-zero return value indicates that the event is not to be handled
further; that is, <emphasis remap='I'>proc</emphasis> has done all processing that is to be
allowed for the event.</para>

<para>If there are multiple generic event handlers, each one is called
for each event, in the order in which they were established.</para>

<para><function>Tk_DeleteGenericHandler</function> may be called to delete a
previously-created generic event handler:  it deletes each handler
it finds that matches the <emphasis remap='I'>proc</emphasis> and <varname role='parameter'>clientData</varname> arguments.  If
no such handler exists, then <function>Tk_DeleteGenericHandler</function> returns
without doing anything.  Although Tk supports it, it's probably
a bad idea to have more than one callback with the same
<emphasis remap='I'>proc</emphasis> and <varname role='parameter'>clientData</varname> arguments.</para>

<para>Establishing a generic event handler does nothing to ensure that the
process will actually receive the X events that the handler wants to
process.
For example, it is the caller's responsibility to invoke
<emphasis remap='B'>XSelectInput</emphasis> to select the desired events, if that is necessary.</para>
</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>bind, callback, event, handler</para>
</refsect1>
</refentry>

