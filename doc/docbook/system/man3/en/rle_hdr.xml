<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='rle_hdr3'>
<!--  Copyright (c) 1986, University of Utah -->
<refentryinfo><date>2/2/87</date></refentryinfo>
<refmeta>
<refentrytitle>RLE_HDR</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>2/2/87</refmiscinfo>
<refmiscinfo class='source'>3</refmiscinfo>
</refmeta>
<refnamediv>
<refname>rle_hdr</refname>
<refpurpose>Structure for communication with RLE functions.</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;rle.h&gt;

rle_hdr rle_dflt_hdr;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>RLE_SET_BIT</function></funcdef>
<paramdef><parameter>the_hdr</parameter></paramdef>
<paramdef><parameter>bit</parameter></paramdef>
</funcprototype>

<funcprototype>
<funcdef><function>RLE_CLR_BIT</function></funcdef>
<paramdef><parameter>the_hdr</parameter></paramdef>
<paramdef><parameter>bit</parameter></paramdef>
</funcprototype>

<funcprototype>
<funcdef><function>RLE_BIT</function></funcdef>
<paramdef><parameter>the_hdr</parameter></paramdef>
<paramdef><parameter>bit</parameter></paramdef>
</funcprototype>
<funcsynopsisinfo>

rle_hdr the_hdr;
</funcsynopsisinfo>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>This data structure provides communication to and between all the
<citerefentry><refentrytitle>RLE</refentrytitle><manvolnum>5</manvolnum></citerefentry>
file routines.  It describes the parameters of the image being saved
or read, and contains some variables describing file state that are
private to the routines.  The public components are described below.</para>

<literallayout remap='.nf'>
<!-- ta 1i 1.8i 2.8i -->
     typedef unsigned char rle_pixel;
     typedef unsigned short rle_map;

     rle_hdr {
	int	ncolors,	/* Number of colors being saved */
		*bg_color,	/* Background color array */
		alpha,	/* if != 0, save alpha channel (color -1) */
			/* alpha channel background is always 0 */
		background,	/* if = 0, no background processing */
			/* if = 1 or 2, save only non-bg pixels */
			/* If 2, set clear-to-bg flag in file */
		xmin,	/* Min X bound of saved raster */
		xmax,	/* Max X bound */
		ymin,	/* Min Y bound */
		ymax,	/* Max Y bound */
		ncmap,	/* number of color channels in color map */
			/* if = 0, color map is not saved */
		cmaplen;	/* Log2 of the number of entries in */
			/* each channel of the color map */
	rle_map	*cmap;	/* pointer to color map, stored as 16-bit */
			/* words, with values left justified */
	char	**comments;	/* Pointer to array of pointers */
			/* to comment strings. */
	FILE *	rle_file;	/* I/O to this file */
	/*
	 * Bit map of channels to read/save.  Indexed by (channel mod 256).
	 */
	char    bits[256/8];
    };
</literallayout> <!-- .fi -->

<para>A global variable,
<emphasis remap='I'>rle_dflt_hdr</emphasis>,
is available, conveniently initialized with default values.</para>
</refsect1>

<refsect1 xml:id='fields'><title>FIELDS</title>
<variablelist remap='TP'>
  <varlistentry>
  <term><emphasis remap='I'>ncolors</emphasis></term>
  <listitem>
<para>The number of colors (exclusive of the alpha channel) in the image.
This is one greater than the largest channel index (i.e.,
<emphasis remap='I'>ncolors</emphasis> would be 3 if channels 0, 1, and 2 were saved, or if
only channel 2 were saved.)</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='I'>bg_color</emphasis></term>
  <listitem>
<para>A pointer to an array of <emphasis remap='I'>ncolors</emphasis> integers, defines the
background color (if used).  The background alpha value is always 0,
so is not included in the <emphasis remap='I'>bg_color</emphasis> array.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='I'>alpha</emphasis></term>
  <listitem>
<para>If non-zero, an alpha channel is present as channel -1.  This
should always be 0 or 1.  <emphasis remap='I'>Rle_get_setup</emphasis> and <emphasis remap='I'>rle_put_setup</emphasis>
enforce this constraint.  The alpha channel will only be actually read
or written if the corresponding bit in <emphasis remap='I'>bits</emphasis> is also set.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='I'>background</emphasis></term>
  <listitem>
<para>Controls whether background color processing is done.  If 0, no
background processing is done at all (and <emphasis remap='I'>bg_color</emphasis> is ignored).
If 1 or 2, then runs of 3 or more pixels in the background color are
not saved at all.  If 2, then these runs will be restored by
<emphasis remap='I'>rle_getrow</emphasis>; if 1, they will not (this can lead to some strange
images).</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='I'>xmin, xmax, ymin, ymax</emphasis></term>
  <listitem>
<para>The bounds of the image.  All pixels from <emphasis remap='I'>xmin</emphasis> to <emphasis remap='I'>xmax</emphasis>,
inclusive, in rows numbered from <emphasis remap='I'>ymin</emphasis> to <emphasis remap='I'>ymax</emphasis>, inclusive,
will be saved.  Thus the dimensions of the image are
<!-- .br -->
<emphasis remap='I'>	(xmax - xmin + 1) * (ymax - ymin + 1)</emphasis></para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='I'>ncmap, cmaplen</emphasis></term>
  <listitem>
<para>The size of the saved colormap (if any).  The color map will have
<emphasis remap='I'>ncmap</emphasis> channels, each <emphasis remap='I'>2^cmaplen</emphasis> long.  If <emphasis remap='I'>ncmap</emphasis> is
zero, no color map is present.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='I'>cmap</emphasis></term>
  <listitem>
<para>A pointer to colormap data, if present.  The data is stored in
"channel major" order, so that all the values for channel 0 precede
all the values for channel 1, etc.  Each individual value is
left-justified in 16 bits (i.e., the range of values is 0-65535).</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='I'>comments</emphasis></term>
  <listitem>
<para>A pointer to picture comment data, if present.  Use the functions
<citerefentry><refentrytitle>rle_putcom</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
<citerefentry><refentrytitle>rle_getcom</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
and
<citerefentry><refentrytitle>rle_delcom</refentrytitle><manvolnum>3</manvolnum></citerefentry>
to manipulate this field.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='I'>rle_file</emphasis></term>
  <listitem>
<para>The standard I/O <emphasis remap='I'>FILE</emphasis> pointer for the file containing this
image.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='I'>bits</emphasis></term>
  <listitem>
<para>A bitmap that selects the channels that are actually written to/read
from the file.  The macros below are used to modify this bitmap.</para>
  </listitem>
  </varlistentry>
</variablelist>
</refsect1>

<refsect1 xml:id='macros'><title>MACROS</title>
<para>The macro
<function>RLE_BIT</function>
will retrieve the state of one of the bits in the
<emphasis remap='I'>bits</emphasis>
map.
<function>RLE_SET_BIT</function>,
and
<function>RLE_CLR_BIT</function>
set and clear bits in the
<emphasis remap='I'>bits</emphasis>
map.  The predefined symbols
<emphasis remap='I'>RLE_RED</emphasis>,
<emphasis remap='I'>RLE_GREEN</emphasis>,
<emphasis remap='I'>RLE_BLUE</emphasis>,
and
<emphasis remap='I'>RLE_ALPHA</emphasis>,
or an integer value from -1 to 254
may be used in these macros.</para>
</refsect1>

<refsect1 xml:id='see_also'><title>SEE ALSO</title>
<para><citerefentry><refentrytitle>librle</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
<citerefentry><refentrytitle>RLE</refentrytitle><manvolnum>5</manvolnum></citerefentry>.</para>
</refsect1>

<refsect1 xml:id='author'><title>AUTHOR</title>
<para>Spencer W. Thomas, Todd Fuqua</para>
</refsect1>
</refentry>

