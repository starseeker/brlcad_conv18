<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man+tkman by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='exprlong3'>

<!-- '\" Copyright (c) 1989\-1993 The Regents of the University of California.
'\" Copyright (c) 1994\-1997 Sun Microsystems, Inc. -->

<!-- '\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\"  -->
<refentryinfo><date>7.0</date></refentryinfo>
<refmeta>
<refentrytitle>Tcl_ExprLong</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>7.0</refmiscinfo>
<refmiscinfo class='source'>Tcl</refmiscinfo>
<refmiscinfo class='manual'>Tcl Library Procedures</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tcl_ExprLong</refname>
<refname>Tcl_ExprDouble</refname>
<refname>Tcl_ExprBoolean</refname>
<refname>Tcl_ExprString</refname>
<refpurpose>evaluate an expression</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;tcl.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>int <function>Tcl_ExprLong</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>expr</parameter></paramdef>
<paramdef><parameter>longPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_ExprDouble</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>expr</parameter></paramdef>
<paramdef><parameter>doublePtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_ExprBoolean</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>expr</parameter></paramdef>
<paramdef><parameter>booleanPtr</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>Tcl_ExprString</function></funcdef>
<paramdef><parameter>interp</parameter></paramdef>
<paramdef><parameter>expr</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='arguments'><title>ARGUMENTS</title>
<!-- .AS Tcl_Interp *booleanPtr out -->
<informaltable>
<tgroup cols='3'>
<tbody>

<row><entry>"Tcl_Interp"</entry><entry>"*interp"</entry><entry>"in"</entry>
<entry>
<para>Interpreter in whose context to evaluate <emphasis remap='I'>expr</emphasis>.</para>
</entry>
</row>
<row><entry>"const char"</entry><entry>*expr</entry><entry>in</entry>
<entry>
<para>Expression to be evaluated.</para>  
</entry>
</row>
<row><entry>long</entry><entry>*longPtr</entry><entry>out</entry>
<entry>
<para>Pointer to location in which to store the integer value of the
expression.</para>
</entry>
</row>
<row><entry>int</entry><entry>*doublePtr</entry><entry>out</entry>
<entry>
<para>Pointer to location in which to store the floating-point value of the
expression.</para>
</entry>
</row>
<row><entry>int</entry><entry>*booleanPtr</entry><entry>out</entry>
<entry>
<para>Pointer to location in which to store the 0/1 boolean value of the
expression.</para>
<!-- .BE -->
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</refsect1>

<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>These four procedures all evaluate the expression
given by the <emphasis remap='I'>expr</emphasis> argument
and return the result in one of four different forms.
The expression can have any of the forms accepted by the <emphasis remap='B'>expr</emphasis> command.
Note that these procedures have been largely replaced by the
object-based procedures <emphasis remap='B'>Tcl_ExprLongObj</emphasis>, <emphasis remap='B'>Tcl_ExprDoubleObj</emphasis>,
<emphasis remap='B'>Tcl_ExprBooleanObj</emphasis>, and <emphasis remap='B'>Tcl_ExprObj</emphasis>.
Those object-based procedures evaluate an expression held in a Tcl object
instead of a string.
The object argument can retain an internal representation
that is more efficient to execute.</para>

<para>The <emphasis remap='I'>interp</emphasis> argument refers to an interpreter used to
evaluate the expression (e.g. for variables and nested Tcl
commands) and to return error information.</para>

<para>For all of these procedures the return value is a standard
Tcl result: <emphasis remap='B'>TCL_OK</emphasis> means the expression was successfully
evaluated, and <emphasis remap='B'>TCL_ERROR</emphasis> means that an error occurred while
evaluating the expression.
If <emphasis remap='B'>TCL_ERROR</emphasis> is returned then
the interpreter's result will hold a message describing the error.
If an error occurs while executing a Tcl command embedded in
the expression then that error will be returned.</para>

<para>If the expression is successfully evaluated, then its value is
returned in one of four forms, depending on which procedure
is invoked.
<function>Tcl_ExprLong</function> stores an integer value at <emphasis remap='I'>*longPtr</emphasis>.
If the expression's actual value is a floating-point number,
then it is truncated to an integer.
If the expression's actual value is a non-numeric string then
an error is returned.</para>

<para><function>Tcl_ExprDouble</function> stores a floating-point value at <emphasis remap='I'>*doublePtr</emphasis>.
If the expression's actual value is an integer, it is converted to
floating-point.
If the expression's actual value is a non-numeric string then
an error is returned.</para>

<para><function>Tcl_ExprBoolean</function> stores a 0/1 integer value at <emphasis remap='I'>*booleanPtr</emphasis>.
If the expression's actual value is an integer or floating-point
number, then they store 0 at <emphasis remap='I'>*booleanPtr</emphasis> if
the value was zero and 1 otherwise.
If the expression's actual value is a non-numeric string then
it must be one of the values accepted by <emphasis remap='B'>Tcl_GetBoolean</emphasis>
such as
<quote>yes</quote>
or
<quote>no</quote>,
or else an error occurs.</para>

<para><function>Tcl_ExprString</function> returns the value of the expression as a
string stored in the interpreter's result.</para>

</refsect1>

<refsect1 xml:id='see_also'><title>SEE ALSO</title>
<para>Tcl_ExprLongObj, Tcl_ExprDoubleObj, Tcl_ExprBooleanObj, Tcl_ExprObj</para>

</refsect1>

<refsect1 xml:id='keywords'><title>KEYWORDS</title>
<para>boolean, double, evaluate, expression, integer, object, string</para>
</refsect1>
</refentry>

